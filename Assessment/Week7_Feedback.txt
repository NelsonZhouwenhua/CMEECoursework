Starting weekly assessment for Wenhua, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 31.58 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week6, Week1, Week7, Assessment, Week5, Week2, Week4, .git, Week3, MiniProject

Found the following files in parent directory: README.txt, .gitignore

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:
**********************************************************************
*~ 
*.tmp
*.tif
**********************************************************************

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
My CMEE Coursework Repository

Author : Wenhua Zhou (wz2812@ic.ac.uk)

This repository includes all the coursework I have done from the course MRes in Computational Methods in Ecology and Evolution. 

This course begins in October 2019 and ends in September 2020. 

Every week I will update the work I did including the practicals and miniprojects.

Hopefully I can learn more about programming this year, and this repository can also be useful in the future.


**********************************************************************

======================================================================
Looking for the weekly directories...

Found 7 weekly directories: Week1, Week2, Week3, Week4, Week5, Week6, Week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: Code, Data, Sandbox, Results

Found the following files: README.txt

Checking for readme file in weekly directory...

Found README in parent directory, named: README.txt

Printing contents of README.txt:
**********************************************************************
Week 7 summary

Author: Wenhua Zhou(wz2812@ic.ac.uk)

Date: 11/11~~17/11

Chapter covered: Biological Computing in python 2

Status: chapter covered and practicals all done

###############################################################

Chapter 6: Biological Computing in python 2

Code directory:

blackbirds.py
# python 2 practicals for regex

DrawFW.py
# Python 2 practical
# Draw food networks

fmr.R
# practical of R 
# plot, save dataset and species

LV1.py
# python 2 practical
# Differentiation and plot of LV model

LV2.py
# Python 2 practical
# modified LV1.py with prey density

LV3.py
# Python 2 practical
# modified LV model with discrete time values

LV4.py
# Python 2 practical
# modified LV model with discrete time values and a gaussian fluctuation

LV5.py
# Python 2 practical
# modified LV model with discrete time values and two gaussian fluctuations

MyFirstJupyterNb.ipynb
# jupyter notebook of jupyter introduction and maths in jupyter

Nets.py
# python 2 practical
# Python version to draw networks from nets in R

Nets.R
# downloaded file from QMEE, draw networks from nets in R

profileme.py
# Profiling example

profileme2.py
# improved profiling example

regexs.py
# python 2 notes of regex

timeitme.py
# Profiling example use timeit

TestR.py
# Python script running R on python

TestR.R
# test to run R script in python

using_os.py
# Python 2 practical using subprocess.os

run_LV.py
# scripts to run LV1 and LV2 and compare speed

run_fmr_R.py
# Python 2 practical
# python script to run fmr.R


Data directory:

blackbirds.txt
# downloaded data of blackbirds practical

QMEE_Net_Mat_edges.csv
# downloaded file using in Nets.R to draw networks

QMEE_Net_Mat_nodes.csv
# downloaded file using in Nets.R to draw networks

NagyEtAl1999.csv
# data for plotting image in fmr.R


Results directory:

errorFile.Rout
# test file of TestR.R doing R script in python

outputFile.Rout
# output of no input of TestR.R

TestR_errFile.Rout
# test file of TestR.R doing R script in python

TestR.Rout
# output of TestR.R

FW.pdf
# output image of food network by DrawFW.py

LV_model.pdf
# output image of practical by LV1_model.py 

LV2_model.pdf
# output image of practical by LV2_model.py

LV3_model.pdf
# output image of practical by LV3_model.py

LV4_model.pdf
# output image of practical by LV4_model.py

LV5_model.pdf
# output image of practical by LV5_model.py

QMEENet.svg
# output image of given Nets.R

QMEENet_py.svg
# output image of practicals
# changing from R to python and plot the image by Nets.py

fmr_plot.pdf
# output image of fmr.R
**********************************************************************

Found following files in results directory: outputFile.Rout, TestR.Rout, fmr_plot.pdf, LV_model.pdf, LV2_model.pdf, LV4_model.pdf, LV5_model.pdf, FW.pdf, LV3_model.pdf, TestR_errFile.Rout, errorFile.Rout, QMEENet.svg, QMEENet_py.svg...
ideally, Results directory should be empty other than, perhaps, a readme. 

Found 21 code files: TestR.py, regexs.py, LV3.py, profileme2.py, timeitme.py, blackbirds.py, Nets.py, TestR.R, profileme.py, LV4.py, fmr.R, MyFirstJupyterNb.ipynb, using_os.py, LV1.py, LV5.py, DrawFW.py, Nets.R, run_fmr_R.py, run_LV.py, LV2.py, MyFirstJupyterNb-checkpoint.ipynb

======================================================================
Testing script/code files...

======================================================================
Inspecting script file TestR.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 running R on python"""

__appname__ = 'TestR.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import subprocess
subprocess.Popen("Rscript --verbose TestR.R > ../Results/TestR.Rout 2> ../Results/TestR_errFile.Rout", shell=True).wait()
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.12936s

======================================================================
Inspecting script file regexs.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""python 2 notes of regex"""

__appname__ = 'Nets.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'



import re

my_string = "a given string"

match = re.search(r'\s', my_string)
print(match)

match.group()

match = re.search(r'\d', my_string)

print(match)

MyStr = 'an example'

match = re.search(r'\w*\s', MyStr) # what pattern is this?

if match:                      
    print('found a match:', match.group()) 
else:
    print('did not find a match')    

match = re.search(r'2' , "it takes 2 to tango")
match.group()

match = re.search(r'\d.*' , "it takes 2 to tango")
match.group()

match = re.search(r'\s\w{1,3}\s', 'once upon a time')
match.group()

match = re.search(r'\s\w*$', 'once upon a time')
match.group()

re.search(r'\w*\s\d.*\d', 'take 2 grams of H2O').group()

re.search(r'^\w*.*\s', 'once upon a time').group() # 'once upon a '

re.search(r'^\w*.*?\s', 'once upon a time').group()

re.search(r'<.+>', 'This is a <EM>first</EM> test').group()

re.search(r'<.+?>', 'This is a <EM>first</EM> test').group()

re.search(r'\d*\.?\d*','1432.75+60.22i').group()

re.search(r'[AGTC]+', 'the sequence ATTCGT').group()

re.search(r'\s+[A-Z]\w+\s*\w+', "The bird-shit frog's name is Theloderma asper.").group()

MyStr = 'Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory'
match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
match.group()

# MyStr = 'Samraat Pawar, s-pawar@imperial.ac.uk, Systems biology and ecological theory'
# match = re.search(r"[\w\s]+,\s[\w\.@]+,\s[\w\s]+",MyStr)
# match.group()

match = re.search(r"[\w\s]+,\s[\w\.-]+@[\w\.-]+,\s[\w\s]+",MyStr)
match.group()

# check birthday
data = '19940506'
re.search(r'(19\d\d|20[0-1]\d)(0\d|1[012])([0123]\d)', data).group() 

match.group(0)

match = re.search(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+),\s([\w\s&]+)",MyStr)
if match:
    print(match.group(0))
    print(match.group(1))
    print(match.group(2))
    print(match.group(3))

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a-academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a_academic@imperial.ac.uk, Some other stuff thats even more boring"

emails = re.findall(r'[\w\.-]+@[\w\.-]+', MyStr) 
for email in emails:
    print(email)

f = open('../../Week2/Data/TestOaksData.csv', 'r')
found_oaks = re.findall(r"Q[\w\s].*\s", f.read())

found_oaks

MyStr = "Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory; Another academic, a.academic@imperial.ac.uk, Some other stuff thats equally boring; Yet another academic, y.a.academic@imperial.ac.uk, Some other stuff thats even more boring"

found_matches = re.findall(r"([\w\s]+),\s([\w\.-]+@[\w\.-]+)", MyStr)
found_matches

for item in found_matches:
    print(item)

import urllib3


conn = urllib3.PoolManager() # open a connection
r = conn.request('GET', 'https://www.imperial.ac.uk/silwood-park/academic-staff/') 
webpage_html = r.data #read in the webpage's contents

type(webpage_html)



My_Data  = webpage_html.decode()
#print(My_Data)



pattern = r"Dr\s+\w+\s+\w+"
regex = re.compile(pattern) # example use of re.compile(); you can also ignore case  with re.IGNORECASE 
for match in regex.finditer(My_Data): # example use of re.finditer()
    print(match.group())



New_Data = re.sub(r'\t'," ", My_Data) # replace all tabs with a space
# print(New_Data)

**********************************************************************

Testing regexs.py...

regexs.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 100

Output (only first 500 characters): 

**********************************************************************
<_sre.SRE_Match object; span=(1, 2), match=' '>
None
found a match: an 
Samraat Pawar, s.pawar@imperial.ac.uk, Systems biology and ecological theory
Samraat Pawar
s.pawar@imperial.ac.uk
Systems biology and ecological theory
s.pawar@imperial.ac.uk
a-academic@imperial.ac.uk
y.a_academic@imperial.ac.uk
('Samraat Pawar', 's.pawar@imperial.ac.uk')
(' Another academic', 'a.academic@imperial.ac.uk')
(' Yet another academic', 'y.a.academic@imperial.ac.uk')
Dr Arkhat Abzhanov
Dr Arkhat Abzhanov
Dr Cristin
**********************************************************************

Code ran without errors

Time consumed = 0.39649s

======================================================================
Inspecting script file LV3.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical"""

__appname__ = 'LV3.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import matplotlib.pylab as p
import scipy.integrate as integrate
import numpy as np

# def dCR_dt(pops, t=0):

#     R = pops[0]
#     C = pops[1]
#     dRdt = r * R * (1 - R/K) - a * R * C 
#     dCdt = -z * C + e * a * R * C
    
#     return sc.array([dRdt, dCdt])

# set default value
r = 1.
a = 0.1
z = 1.5
e = 0.75
K = 30

# take arguments from the command line
if len(sys.argv) > 1:
    r = sys.argv[1]
if len(sys.argv) > 2:
    a = sys.argv[2]
if len(sys.argv) > 3: 
    z = sys.argv[3]
if len(sys.argv) > 4:
    e = sys.argv[4] 
if len(sys.argv) > 5:
    K = sys.argv[5]
t = sc.linspace(0, 15, 1000)
R = 10
C = 5 
pops = np.zeros((len(t),2))
for i in range(len(t)):
    R1 = R * (1 + r * (1 - R/K) - a * C)
    C1 = C * (1 - z + e * a * R)
    R = R1
    C = C1
    pops[i,:] = [R1,C1]

# open figure object
f1 = p.figure()

p.subplot(2,1,1)
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('')
p.ylabel('Population density')
# make title include parameters
title = 'r = ' + str(r) + ', a = ' + str(a) + ', z = ' + str(z) + ', e = ' + str(e) + ', K = ' + str(K) + ', t = (' + str(int(min(t))) +','+ str(int(max(t)))+')' 
p.title(title)
#p.show() not to display the figure

# Plot
p.subplot(2,1,2)
p.plot(pops[:,0], pops[:,1]  , 'r-')
p.grid()
# p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
# p.show() #not to display the figure

f1.savefig('../Results/LV3_model.pdf') #Save figure

# print population values 
print(pops[-1,:])**********************************************************************

Testing LV3.py...

LV3.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.5

Output (only first 500 characters): 

**********************************************************************
[ 20.           3.33333333]

**********************************************************************

Code ran without errors

Time consumed = 0.72916s

======================================================================
Inspecting script file profileme2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Profiling example improved"""

__appname__ = 'profileme2.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.0

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.63990s

======================================================================
Inspecting script file timeitme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Profiling example use timeit"""

__appname__ = 'timeitme.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

#############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

import timeit

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

# %timeit my_squares_loops(iters)
# %timeit my_squares_lc(iters)


##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# %timeit(my_join_join(iters, mystring))
# %timeit(my_join(iters, mystring)

import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start))

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))
**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00649s

======================================================================
Inspecting script file blackbirds.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""python 2 practicals for regex"""

__appname__ = 'blackbirds.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import re

# Read the file (using a different, more python 3 way, just for fun!)
with open('../Data/blackbirds.txt', 'r') as f:
    text = f.read()

# replace \t's and \n's with a spaces:
text = text.replace('\t',' ')
text = text.replace('\n','?')
# You may want to make other changes to the text. 


# In particular, note that there are "strange characters" (these are accents and
# non-ascii symbols) because we don't care for them, first transform to ASCII:

text = text.encode('ascii', 'ignore') # first encode into ascii bytes
text = text.decode('ascii', 'ignore') # Now decode back to string

# Now extend this script so that it captures the Kingdom, Phylum and Species
# name for each species and prints it out to screen neatly.
found_kingdom = re.findall(r"Kingdom\s*Animalia\s+\w+,\s+\w+,\s+\w+", text)
found_phylum = re.findall(r"Phylum\s+Chordata\s+\w+,\s+\w+,\s+\w+", text)
found_species = re.findall(r"Species\s+\w+\s+\w+\s+\([A-Z\w\s]+,\s+\d+\)[\w\s\-\'\,]+", text)
for i in range(len(found_kingdom)):
    print(found_kingdom[i])
    print(found_phylum[i])
    print(found_species[i])
    print('\n')

# Hint: you may want to use re.findall(my_reg, text)... Keep in mind that there
# are multiple ways to skin this cat! Your solution could involve multiple
# regular expression calls (easier!), or a single one (harder!)**********************************************************************

Testing blackbirds.py...

blackbirds.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 

**********************************************************************
Kingdom Animalia   Animal, animaux, animals
Phylum Chordata   cords, cordado, chordates
Species Euphagus carolinus (Statius Muller, 1776)  Tordo canadiense, Rusty Blackbird, quiscale rouilleux  


Kingdom Animalia   Animal, animaux, animals
Phylum Chordata   cords, cordado, chordates
Species Euphagus cyanocephalus (Wagler, 1829)  Brewer's Blackbird, quiscale de Brewer, Tordo ojo amarillo  


Kingdom Animalia   Animal, animaux, animals
Phylum Chordata   cords, cordado, chordates
Species Turdus bou
**********************************************************************

Code ran without errors

Time consumed = 0.02975s

======================================================================
Inspecting script file Nets.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""python 2 practical
Python version to draw networks from nets in R"""

__appname__ = 'Nets.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'


import networkx as nx
import scipy as sc
import matplotlib.pyplot as p
import csv
import numpy as np
import matplotlib.lines as mlines
# pip install pandas
# import pandas as pd

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

# Read files containing:
f = open('../Data/QMEE_Net_Mat_edges.csv','r')
csvread = csv.reader(f)
links = []
for row in csvread:
    links.append(tuple(row))
f.close()

f = open('../Data/QMEE_Net_Mat_nodes.csv','r')
csvread = csv.reader(f)
nodes = []
for row in csvread:
    nodes.append(tuple(row))
f.close()

# generate networkx graph object
G = nx.DiGraph()

#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# link to node one 
node_net = [x[0] for x in nodes[1:]]
nodesize = np.asarray([x[2] for x in nodes[1:]], dtype=np.float32)*50
linklist = [['ICL','CEH'],['ICL','ZSL'],['ICL','CEFAS'],['ICL','NonAc'],['UoR','CEH'],['UoR','CEFAS'],['UoR','NonAc'],['CEH','NonAc'],['ZSL','NonAc']]
linka = [x[0] for x in linklist]
linkb = [x[1] for x in linklist]
edgelist = list(zip(linka + linkb,linkb + linka))
# pos = nx.circular_layout(node_net)
# pos = nx.bipartite_layout(node_net)
# pos = nx.kamada_kawai_layout(node_net)
# pos = nx.random_layout(node_net)
# pos = nx.rescale_layout(node_net)
# pos = nx.shell_layout(node_net)
# pos = nx.spring_layout(node_net)
# pos = nx.spectral_layout(node_net)
# pos = nx.planar_layout(node_net)
pos = nx.fruchterman_reingold_layout(node_net)
# pos = nx.spiral_layout(node_net)

G.add_nodes_from(node_net)
G.add_edges_from(tuple(edgelist)) 

edgewidth = [10,9,5,70,12,2,76,6,28]
edgewidth = [1 + float(i)/10 for i in edgewidth]

# # Generate colors based on partner type:
# colrs <- c("green", "red", "blue")
# V(net)$color <- colrs[nodes$Type]

# # Set node size based on Number of PIs:
# # V(net)$size <- V(net)$Pis*0.9

# V(net)$size <- 50

# # Set edge width based on weight (PhD Students):
# E(net)$width <- E(net)$weight

# #change arrow size and edge color:
# E(net)$arrow.size <- 1
# E(net)$edge.color <- "gray80"

# E(net)$width <- 1+E(net)$weight/10

# open figure object
f1 = p.figure()
nx.draw_networkx(G, pos, node_size = nodesize, edge_color= 'grey' , width= edgewidth + edgewidth, node_color = ['b','b','g','g','g','r'])
colors = ['blue','green','red']
legend = [mlines.Line2D([], [], color=c, marker='o', linestyle='None', markersize=10) for c in colors]
labels = ['University','Hosting Partner','Non-hosting Partner']
p.legend(legend,labels, bbox_to_anchor = (0.6,0.6))

f1.savefig('../Results/QMEENet_py.svg') #Save figure
**********************************************************************

Testing Nets.py...

Nets.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 98.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 283, in fruchterman_reingold_layout
    raise ValueError
ValueError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "Nets.py", line 71, in <module>
    pos = nx.fruchterman_reingold_layout(node_net)
  File "/usr/lib/python3/dist-packages/networkx/drawing/layout.py", line 287, in fruchterman_reingold_layout
    A = nx.to_numpy_matrix(G, weight=weight)
  File "/usr/lib/python3/dist-packages/networkx/convert_matrix.py", line 308, in to_numpy_matrix
    nodelist = G.nodes()
AttributeError: 'list' object has no attribute 'nodes'

======================================================================
Inspecting script file TestR.R...

File contents are:
**********************************************************************
# test to run R script in python

print("Hello, this is R!")**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 

**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.09289s

======================================================================
Inspecting script file profileme.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Profiling example"""

__appname__ = 'profileme.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")
**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 96.5

Output (only first 500 characters): 

**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 6.47055s

======================================================================
Inspecting script file LV4.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical"""

__appname__ = 'LV4.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import matplotlib.pylab as p
import scipy.integrate as integrate
import numpy as np
import scipy.stats



# def dCR_dt(pops, t=0):

#     R = pops[0]
#     C = pops[1]
#     dRdt = r * R * (1 - R/K) - a * R * C 
#     dCdt = -z * C + e * a * R * C
    
#     return sc.array([dRdt, dCdt])

# set default value
r = 1.
a = 0.1
z = 1.5
e = 0.75
K = 30

# take arguments from the command line
if len(sys.argv) > 1:
    r = sys.argv[1]
if len(sys.argv) > 2:
    a = sys.argv[2]
if len(sys.argv) > 3: 
    z = sys.argv[3]
if len(sys.argv) > 4:
    e = sys.argv[4] 
if len(sys.argv) > 5:
    K = sys.argv[5]
t = sc.linspace(0, 30, 30)
R = 10
C = 5 
pops = np.zeros((len(t),2))
for i in range(len(t)):
    R1 = R * (1 + (r + scipy.stats.norm.rvs() ) * (1 - R/K) - a * C)
    C1 = C * (1 - z + e * a * R)
    R = R1
    C = C1
    pops[i,:] = [R1,C1]

# open figure object
f1 = p.figure()

p.subplot(2,1,1)
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('')
p.ylabel('Population density')
# make title include parameters
title = 'r = ' + str(r) + ', a = ' + str(a) + ', z = ' + str(z) + ', e = ' + str(e) + ', K = ' + str(K) + ', t = (' + str(int(min(t))) +','+ str(int(max(t)))+')' 
p.title(title)
#p.show() not to display the figure

# Plot
p.subplot(2,1,2)
p.plot(pops[:,0], pops[:,1]  , 'r-')
p.grid()
# p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
# p.show() #not to display the figure

f1.savefig('../Results/LV4_model.pdf') #Save figure

# print population values 
print(pops[-1,:])**********************************************************************

Testing LV4.py...

LV4.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 96.0

Output (only first 500 characters): 

**********************************************************************
[ 28.94937655   0.55833357]

**********************************************************************

Code ran without errors

Time consumed = 0.87211s

======================================================================
Inspecting script file fmr.R...

File contents are:
**********************************************************************
# Plots log(field metabolic rate) against log(body mass) for the Nagy et al 
# 1999 dataset to a file fmr.pdf.
# Writes the list of species names to species.csv

cat("Reading CSV\n")

nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)

cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class], 
     xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
    model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
    abline(model, col=col[class])
}
dev.off()

cat("Finished in R!\n")
**********************************************************************

Testing fmr.R...

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Code ran without errors

Time consumed = 0.17456s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "bad operand type for unary -: 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-c6eb8077416a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m<\u001b[0m\u001b[0;34m-\u001b[0m \u001b[0;34m\"this is R!\"\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: bad operand type for unary -: 'str'"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing() # for pretty-printing equations etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAJBAMAAAAWSsseAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEHarIkSJZt3NuzJUmW693xMAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABASURBVAgdY2AQUnZVU2BgTGBv4pjAwCbA9pDVgYGRgWsBAwjwKYCpfRuAFI+AHgOTAEPcgXUM7gwMwkpC1wsYABfXCcn8wW65AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x$$"
      ],
      "text/plain": [
       "x"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var('x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAPBAMAAABgjEDtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA782r3SJ2ZjIQmUS7VIlAnjihAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAwElEQVQYGWNg/GQs72z0hQEVMAYw5BcwNKIKMsxiAIkyo4mGg0XZJqAKR4BFOUCi0Q2c3QFwWaAJ3Iq5j0LXH+A9n8DAuvwxWAooysC4dn4B0wEG/gSGLRO4JUEaQKJMDgwMPGBROQYGMaAgRNQAKsrxq7zcHC66ACrK+xckBARgEx7A1H4DiyFEmQ8wxCcwODEwTIOpZVnAwMAuwHDxJEP/BYaVDAzca+RlVnCf/3OBgeFd2hSRCZxWeROghqBRAGPPN8vbJxBHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{True}$$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPBAMAAACCUFuUAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvdmc0Qu+8iZlR2iUR1i74cAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA+UlEQVQYGWMQsv/kovo/gQEIhGJBJAzIFzAwSAiAeGxNMDEQPV+BgYFrA1ikCExCCZA42wEGEEAXn8ZwAav4SgaGPWcPgNQznl4TwDBlrSZQGdCcSgZuSwYnkHg6A4MBnxnDiwSgeIvGTwbuRob3CUBxoMABjgsMHEDNQPVAbYxn/ScAxZm/n2SQ91q1aAFYfCUDW/gEeZA429X/Dvshjga5k4HdgEF+GlB8GgPXP3mgIUAAFue/wLB/nkARwxsGBi3mAAa2AwwM8goMDAwcBQz3pRLA9lYy/mZgSWCYYv/dk4GBU+VsTpTQf823a9Y+YEjyuQZUih0AAHGBRtIqn6whAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{False}$$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751058209749445923078164062862\n",
       "08998628034825342117068"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n=100) # pi to a 100 places after decimal!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.1415926535897932384626433832795028841971693993751$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHUAAAAbBAMAAACw1N2lAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAACIUlEQVQ4EZ2TP0wUURDGv7u9g1t2wcNCC0lcSLT1FSYQEwMaKpo7iguFzQWRgkYsNBgLtiKEYDgTGxso+JOIBduZ0LAkhlCAuUYLqmvsTM5ILlbknJm3b89LToM7ye18b2Z+u3Pz3gOSmTvzOBlI1CG+JGafoZ5PCr/CzSApC2yo5OxCctQtE5vy6PE/9kaKb/PzbicudfKp8ke8rxwt3OXP6OUBO6FTAyajcJu7BvunBOxNdt1VgJX1CE9gFSny7d1bhXSZk8ZsX6u1Cn6xun96zm6lqlWmjHHgmCJ7zSa9kjuIzbD7ARoSTDObukXfZXUgxfdM+XUjxBuWWtQ9C+tmI3ZCirJBxCyRH3l9Y9WXdYsdDiUg7KBhG9+XiJPt4exDmkCYXuguSmnMDrxQMWv5EWs1PLyk7nUtWLvKPXfy7SxyH2LWhWFpPnMK9rykACqxkBnjlVsqTW2XSlWd2VXsued1w/Ls7wTo+6ErmAWu+NHK9NwPFCocI9YKY/Y5sV6LpZ6Beo2fZIZtqhZrf519uuNLB2fyXWdeF/OsbLWGnHQYs1vAokRkzuip6u7rCnOkihF7RDteKeCqXprvDvH+jlJNTs5Vz5hWvaH1HugKoe0jHbzlkWlPrwzrzM4EfIq7zhrTNMTChafV0WkNyNJPrPOZjJKd3bAJt98FS/6kyf3F813Q9sCIy3q5g7q4493/13sy+Tib8mJ5OTFoyn4DlUWJXgDaBIkAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(x + 3.1416\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "(x + 3.1416) "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(MyFun, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFYAAAAbBAMAAAAUvmV2AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABkUlEQVQ4EY2SPUjDUBDH/2kksSVtg4OOZhHExYA6+1EQ3KoQQfyg4KrSVUGoi4KLblYnd4d2cxGpg92U6uQg6CQ4qYguCvFe7uWriOaGd/f+9+Ny73JAQmtO2glJGGa2mJTVzdxbYraufCVlgfR7clavJGebhCoWHX9a2qR0qkTHcMjN2E/74S2Mbig8wzkwTcERz7nmfodAJBoBcnOHBVFbvX9gduFOfE1YlZ08jQoyrvsKXaQHmW0FRJxVjznRI9w/LOaZ3Y6wt/1rLAY97Lqu+wmIeZFNiEPWLaC3Lq5Bv8Z1tWuLmuxjdV04yQIdZVZlv8+46Hwk5YDVE+ECVhPLdOk4G46z6OXHsjb5Fy9GhKUNNeQy+XPItXSBSTbSQ6YITS6Tz2pWXtQ95bqRt2mAXmTVZ0ftfJ0U+TZvHHs21A8oJQyYcXYHmQYpK6yK8qu1WQubQPfVMovBfKeQbZC0xLL3jyUROr8HVtQye28vQ0hGQzGFdodtPCb/eqGdZIvsui+1+6CcYrWn2u8pOZwfO6dQIT3zDYsAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(1.5 + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(1.5 + π) "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFIAAAAbBAMAAAAdVcUMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJMqtHo0JKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABn0lEQVQ4EY2SP0jDQBTGvzS1SWsi59RNugiOHXS19Q/OOgQRkRaF4tChq4vGxUUKnRQnRRFBBd0EUejUqYOri1ZEdBBa6eCgEN/lcucfWsmD3L37vl9e7nIPCBW1qXQoDhbrmw5HGsx+C0meax/hSCDeDksabliyRqCWouGfiDMyI3kahjtRemHyRuoPlFzhGpiRys95FJY67Ahgz+1MiLoKirsiXQKOpWi5SHheCwbfhgpJHgFNaeh7wk4qiieSzKXRVBudF8gGTVpx+UCsJEmrtbR55nleHuB/iGKcnkvW0/IXqibQ+4n67fpQP+mDwlsB9H3Esn9Jo2FXLFbm8rbwToBYG/5lWY4ze+g4Dd8o0BjFI8/vfQFEJrLIBNtX+zTzZN+hxKGApK9nqtjlCoUit6AxLMLvoAvh0YkyFTz5t/tN2lWYTG/Dv6jgRPQLom5k1RLvyZrJeu0ZZgmnXC4Kj0rrL+WBzd9kzvPeEa3glcsLwut8m8ITo+4fK+g8ZehplaqEOkTEmJK6JNR1Ijp2sjT5rEppKb7sHhEmvC+K7lb+N5WoIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, a+pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFIAAAAbBAMAAAAdVcUMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJMqtHo0JKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABn0lEQVQ4EY2SP0jDQBTGvzS1SWsi59RNugiOHXS19Q/OOgQRkRaF4tChq4vGxUUKnRQnRRFBBd0EUejUqYOri1ZEdBBa6eCgEN/lcucfWsmD3L37vl9e7nIPCBW1qXQoDhbrmw5HGsx+C0meax/hSCDeDksabliyRqCWouGfiDMyI3kahjtRemHyRuoPlFzhGpiRys95FJY67Ahgz+1MiLoKirsiXQKOpWi5SHheCwbfhgpJHgFNaeh7wk4qiieSzKXRVBudF8gGTVpx+UCsJEmrtbR55nleHuB/iGKcnkvW0/IXqibQ+4n67fpQP+mDwlsB9H3Esn9Jo2FXLFbm8rbwToBYG/5lWY4ze+g4Dd8o0BjFI8/vfQFEJrLIBNtX+zTzZN+hxKGApK9nqtjlCoUit6AxLMLvoAvh0YkyFTz5t/tN2lWYTG/Dv6jgRPQLom5k1RLvyZrJeu0ZZgmnXC4Kj0rrL+WBzd9kzvPeEa3glcsLwut8m8ITo+4fK+g8ZehplaqEOkTEmJK6JNR1Ijp2sjT5rEppKb7sHhEmvC+K7lb+N5WoIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new = MyFun.subs(x, a+pi); MyFun_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vec = sc.arange(0, 10, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(MyFun.subs(x, xx)) for xx in x_vec]) #Note: using a list comprehension!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_new_vec = sc.array([N((MyFun_new).subs(a, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.86960440108936, 10.5079229318073, 11.1662414625253,\n",
       "       11.8445599932432, 12.5428785239612, 13.2611970546792,\n",
       "       13.9995155853971, 14.7578341161151, 15.5361526468330,\n",
       "       16.3344711775510, 17.1527897082689, 17.9911082389869,\n",
       "       18.8494267697049, 19.7277453004228, 20.6260638311408,\n",
       "       21.5443823618587, 22.4827008925767, 23.4410194232947,\n",
       "       24.4193379540126, 25.4176564847306, 26.4359750154485,\n",
       "       27.4742935461665, 28.5326120768845, 29.6109306076024,\n",
       "       30.7092491383204, 31.8275676690383, 32.9658861997563,\n",
       "       34.1242047304742, 35.3025232611922, 36.5008417919102,\n",
       "       37.7191603226281, 38.9574788533461, 40.2157973840640,\n",
       "       41.4941159147820, 42.7924344455000, 44.1107529762179,\n",
       "       45.4490715069359, 46.8073900376538, 48.1857085683718,\n",
       "       49.5840270990898, 51.0023456298077, 52.4406641605257,\n",
       "       53.8989826912436, 55.3773012219616, 56.8756197526795,\n",
       "       58.3939382833975, 59.9322568141154, 61.4905753448334,\n",
       "       63.0688938755514, 64.6672124062693, 66.2855309369873,\n",
       "       67.9238494677052, 69.5821679984232, 71.2604865291412,\n",
       "       72.9588050598591, 74.6771235905771, 76.4154421212950,\n",
       "       78.1737606520130, 79.9520791827310, 81.7503977134489,\n",
       "       83.5687162441669, 85.4070347748848, 87.2653533056028,\n",
       "       89.1436718363208, 91.0419903670387, 92.9603088977567,\n",
       "       94.8986274284746, 96.8569459591926, 98.8352644899106,\n",
       "       100.833583020629, 102.851901551346, 104.890220082064,\n",
       "       106.948538612782, 109.026857143500, 111.125175674218,\n",
       "       113.243494204936, 115.381812735654, 117.540131266372,\n",
       "       119.718449797090, 121.916768327808, 124.135086858526,\n",
       "       126.373405389244, 128.631723919962, 130.910042450680,\n",
       "       133.208360981398, 135.526679512116, 137.864998042834,\n",
       "       140.223316573552, 142.601635104270, 144.999953634988,\n",
       "       147.418272165706, 149.856590696424, 152.314909227142,\n",
       "       154.793227757860, 157.291546288577, 159.809864819295,\n",
       "       162.348183350013, 164.906501880731, 167.484820411449,\n",
       "       170.083138942167], dtype=object)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([39.4784176043574, 40.7450546657934, 42.0316917272293,\n",
       "       43.3383287886652, 44.6649658501011, 46.0116029115370,\n",
       "       47.3782399729729, 48.7648770344089, 50.1715140958448,\n",
       "       51.5981511572807, 53.0447882187166, 54.5114252801525,\n",
       "       55.9980623415884, 57.5046994030244, 59.0313364644603,\n",
       "       60.5779735258962, 62.1446105873321, 63.7312476487680,\n",
       "       65.3378847102039, 66.9645217716399, 68.6111588330758,\n",
       "       70.2777958945117, 71.9644329559476, 73.6710700173835,\n",
       "       75.3977070788195, 77.1443441402554, 78.9109812016913,\n",
       "       80.6976182631272, 82.5042553245631, 84.3308923859990,\n",
       "       86.1775294474349, 88.0441665088709, 89.9308035703068,\n",
       "       91.8374406317427, 93.7640776931786, 95.7107147546145,\n",
       "       97.6773518160504, 99.6639888774864, 101.670625938922,\n",
       "       103.697263000358, 105.743900061794, 107.810537123230,\n",
       "       109.897174184666, 112.003811246102, 114.130448307538,\n",
       "       116.277085368974, 118.443722430410, 120.630359491846,\n",
       "       122.836996553281, 125.063633614717, 127.310270676153,\n",
       "       129.576907737589, 131.863544799025, 134.170181860461,\n",
       "       136.496818921897, 138.843455983333, 141.210093044769,\n",
       "       143.596730106205, 146.003367167641, 148.430004229077,\n",
       "       150.876641290512, 153.343278351948, 155.829915413384,\n",
       "       158.336552474820, 160.863189536256, 163.409826597692,\n",
       "       165.976463659128, 168.563100720564, 171.169737782000,\n",
       "       173.796374843436, 176.443011904872, 179.109648966308,\n",
       "       181.796286027743, 184.502923089179, 187.229560150615,\n",
       "       189.976197212051, 192.742834273487, 195.529471334923,\n",
       "       198.336108396359, 201.162745457795, 204.009382519231,\n",
       "       206.876019580667, 209.762656642103, 212.669293703539,\n",
       "       215.595930764974, 218.542567826410, 221.509204887846,\n",
       "       224.495841949282, 227.502479010718, 230.529116072154,\n",
       "       233.575753133590, 236.642390195026, 239.729027256462,\n",
       "       242.835664317898, 245.962301379334, 249.108938440770,\n",
       "       252.275575502206, 255.462212563641, 258.668849625077,\n",
       "       261.895486686513], dtype=object)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f87a9329908>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = p.subplots()\n",
    "ax.plot(x_vec, MyFun_vec)\n",
    "ax.plot(x_vec, MyFun_new_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_lamb = lambdify([x], MyFun, 'numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.3 ms ± 897 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit #remember this?\n",
    "\n",
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.14 µs ± 125 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIAAAAAWBAMAAAD6L4mmAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABl0lEQVQ4EZ2Tv0rDUBSHf4ltGpqioX2BoOLiYF3ErRkUHZ1cHOzUrSA+QfEF7GhAqK6CKLgK9gEU6tSpq+iiFlTcYnLP/XNMi9JmuPfc8/2+Q7gkAD3NS19Wk2zGcsKZ9iQmZZnlht7H5AOY5e7kPqcYwK3ScPIBALPcYJoBzGpmfGtwcZ1pjTkaq9DL4Aqc/2+FWbvYowmlgPZH4DUzMzkqKom24J3en1NTRZ6BWihzZlOUOsbCbBy/U1NFOj5qo5egKGXJKi9sLgXUSFcWOfbttziOezARRSVIBateOHLbaUWPigD5LzRuFw83eERRAsJwfGeYD6WdbCoCuFWv64TLAItIKoGwLBTPtO5E0clLFFVFY5CsRawmLykjnAogvblAFmLTb2D3kvMNWmlXRzSVIIW4+3XZOvKAXIg+xC+iI5pKkOglfwW2LyaJRUW8OuzQGiL5HFlEUQJC2O9eYcv4+hK3G8112C08ASyiBhAQWmW+3D8YM6ATx98odrEGsIgaQIBpplQR0+HV31QkLXYfXKV6lP4ARYJq5GFzLW8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x^{2} + 2 \\pi x + \\pi^{2}$$"
      ],
      "text/plain": [
       " 2            2\n",
       "x  + 2⋅π⋅x + π "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*pi*x + pi**2\n"
     ]
    }
   ],
   "source": [
    "print(expand(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor(x**2 + 2*pi*x + pi**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNIrvdRDJuPMnUAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDElEQVRIDe2UPUgjURDH/3trPk1ErOQawQNBT3GRdB5EhEMEISk8TJlaBMM1d41ewLtTsDDlRYRsYXGFhdUJ2igIloq1RWorRSwENc7M2427y9MUy1Vmivcx83v/N2/2vQX+u/VY4bYwP+dCKgCLbQX5CO06qLsYvg4/wt6on6N/iuEeRnv1G6tAI6y9sXq9dtxk8aXoexVoCYy/JIAOW0JawFw7qLvAplbB+ACYFQlpgQwiDw4QLXsVjJKaZWZvaDDHEz2wAvQ7QMpmzDVXAVFWGGO3HhgGcrYCdtzF0vsVEmfk1AM1C7k6BPhOUPLXKh2bza8QKZOLAfwtfFW/3CYAnFoQ4B/Fz+3EFXNBhWiFXAykh1DjsAdA+pZqxMAR1XwA8V2JB3IwDhWAsSLWAwBSE6THwAgQv0GqRMNItbo1WK1ShNS5kl1X1BCADQsn1HkBrHmAd7vI1mlO1jymX+EjzMcAECuTQ7agU2Tz6FPxgEL6kNx8zFsYnA5Zc4teJG0IQIXKdmPasP2A5OBW0rxGR0W9ElehK4+YDQEKQGcpehwRgectYlyHeJ4aArCHhQkeP+ew86Uw4wAXlOTU8vaSxJsK8cm730CiTl4CkPl2OXUmhJtDrdG4dwD9pRUan7hrCfgfjmmptarVvCwNgH3vGt/Yed0tAe0PRJQ6belaAsmicJpmXvleB54AbevBYvg/zT0AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{1}{\\left(a + 1\\right) \\left(a + 2\\right)}$$"
      ],
      "text/plain": [
       "       1       \n",
       "───────────────\n",
       "(a + 1)⋅(a + 2)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 1/((a+1)*(a+2)); f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAI4AAAAsBAMAAABBB53eAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yVO+riWZ2mSJEu92sN7DKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABwklEQVRIDWNgoCFwFSDGcJZA/KoY0/OJMUes7CN+cxgY+okxh4Fj1By8ATkaPniDh4j0M5+odMhJKB0ui9dqwO8UkCxX6qcVhFUNdhUsE6jjwlFz8IcjwfARUgIBZQaG/9jBB6D57EpKekFKSglAJj92Vf/xuwIhS9A9CKV4WaPmYAkeqbWXYaKUhA9jAkP9AahBjHiKNpwVvSdEM5cAA2sAzEFYaKgy3BU9VAHrAwa231j0w4SgynAX1FAFTB8Z2D7DNGGhcZjDvXwltEUDU8DAwIdZlu+qmgoNK5gytIr16AYmUGYCApgCBobzBRARBMkTzaAP5cGUoZrDGMHAdQGiAqaAgeEZwgAoS7SBYS1ec7g+MvBNAKooUlJ6qqSkBlbLtQCqBUGtF2B4CeIhKUN1D+sFBnkDiHq4e2Yh9MNYsQyMsLCHKUM1R76AwR+qGKaAZQHDbph+KM34nYHlA5oyNHMcGJJYNoCVwMwxZ2CYjW7OFwY2BW+IIEwZqjm8EziesaMo4H5evuwBmjkMNxn6EgpQlDGgVvSMmZO3zUFRwAQsQzHMEZtpnXkARRnuih7mYIhynCRBZYI4taJIICsDAAPNmOFYzOHFAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$- \\frac{1}{a + 2} + \\frac{1}{a + 1}$$"
      ],
      "text/plain": [
       "    1       1  \n",
       "- ───── + ─────\n",
       "  a + 2   a + 1"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apart(f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHwAAAAsBAMAAABVvsF6AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNIkS73TJc4EnkAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB4ElEQVRIDe2WvUtCURjGHz35kWZGS9EiFAR9kZS7EoQ0hA4JNgT+A5G4NAQl9OUQ5NDQHcI7FLQE0dRoU0MNEUVjzk2KOESUnTznXO+XJtQQ5Bnuve/zvL9z3vvec70CvzZ6/a1MZRkyzSKzkVbwwELZFAdWWsFhb+PG/v3n1m20tG0cDbbN1uRhwthPveKced3Ra380tiR/VFgbb9K+qvkoUsQmSUcjkhSil17zrGqTib+sdue/aZDOPoldCaVJ60jmtiDS1GdXGr4EF0jjX5AAbG9qDH0scpTgvdMYmkAUtAkMagyOu8fgzWoMTSDwCSAiqx2OU0kpXm3za4Hn/IgUANf2Lv9iKzh5NGKn8RTrg8BpyjNVLuTOIssWuGuJ3pduuEeRY1Idd1cAMgxnnhkCB1LnOhpTCezpcU8IcJbhSVJjUZLuJemApVgNf0D2/XiinuolBDJUsOYRLDCIr+6S0VViSv04DvLBIqV4R5oKwSh8PIvj3rIRJxVYeIcUvB90oWAP5ixybQKO03o8+g8RKaEjO1DLEnh3FA5aZ9L+YGPLc9yeMHnu11gORTX4WSw+TzsfXj9e0+C4zNwwQXUMrL6E2eMQq+eq1XdVAsSe12jGQOAGZ9qgmAnEr1I/AeTDmkunD146AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{1}{a + 3} + \\frac{1}{a + 2}$$"
      ],
      "text/plain": [
       "  1       1  \n",
       "───── + ─────\n",
       "a + 3   a + 2"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f2 = 1/(a+2) + 1/(a+3); f2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACv0lEQVRIDe2WT2gTQRTGv02af7tNWJRCe+raYE9KC3pRRHPy4Cl4kxa6VOypYI71pNKD/QMShHpRcSkotKdeNYeEIihFMHjsxXrUQ2lAWlR0fTOzk26S12bVnsSB7Ox+7/e+nZmd3Regsx3Ln+0UAetjz2lO79SMIm6WOmWkfd9lZEaK2UjfCenZmrqwbmyE1MNO02UkvoUA7ZAIaYefWg0kvoSQ33eg5EwD5vCpu8qm6bC9XlBKhONtFzOetaNI7RC3zb0IuQpZgnEfsdFWB7o6F9Uh5iDWQKZGfLJSebFYqRRV6oin+q7HdSA9isGCAvUsxsDvE8Yu62B10MWHIKQdFoERm8EZ6TKwMVjHWNaTQe3gAI8YmpHMh1Mny/FabimpgtphGbkFBmcky/f9sjH+6tnrVgdz+GrESbSb6jG069GvjT+8c/Q7/CePagVo+/xdO6qB/AM+5tZBk9hUga7Acc7AGDpTQMKTIRYwp67XNfBSYm2HPiT3YKxJlQWWkf0ZADknnKw/BieAOWBahHjgXR1fAyDjcQ7zwISHfhHigZkSvkMBK2ED6DFUbUwUYJUoyAMQs1AAFQemSJL41EbSoV4AWJ58oz5V+hbAgEsFyaHYRfp1FkkgtUtLIJZSAKkFVKmj1nR4/oAsJfAEfJHMFAkvUw4B6N9CXuSHHNB7LwCoZ4vkEOE9O3QgQBSrx9S1VtE5uwkwRRK9DmU0HWZhBH9K9CxWgUt1BdAgmSKJ9zA9pIJZGLvIiuFQ0w6+LRwkQAvFFMkeF71ecyWNH0isbbY4zMqHJVdyEmCK5MrU5DVaIJeyCMAFfCqK8/0xbMv9IIFb9Cw6i2TV92nTWgXKIQB9b6+Ml6jfd0gN5UmQAL9pJY0B0XUFWl+c1iI5LRy6AjgvMLYFb3dXgP2ASMe4J7uuwMEfsc9qZIcDvwDYJP++gGwiTQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "together(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACv0lEQVRIDe2WT2gTQRTGv02af7tNWJRCe+raYE9KC3pRRHPy4Cl4kxa6VOypYI71pNKD/QMShHpRcSkotKdeNYeEIihFMHjsxXrUQ2lAWlR0fTOzk26S12bVnsSB7Ox+7/e+nZmd3Regsx3Ln+0UAetjz2lO79SMIm6WOmWkfd9lZEaK2UjfCenZmrqwbmyE1MNO02UkvoUA7ZAIaYefWg0kvoSQ33eg5EwD5vCpu8qm6bC9XlBKhONtFzOetaNI7RC3zb0IuQpZgnEfsdFWB7o6F9Uh5iDWQKZGfLJSebFYqRRV6oin+q7HdSA9isGCAvUsxsDvE8Yu62B10MWHIKQdFoERm8EZ6TKwMVjHWNaTQe3gAI8YmpHMh1Mny/FabimpgtphGbkFBmcky/f9sjH+6tnrVgdz+GrESbSb6jG069GvjT+8c/Q7/CePagVo+/xdO6qB/AM+5tZBk9hUga7Acc7AGDpTQMKTIRYwp67XNfBSYm2HPiT3YKxJlQWWkf0ZADknnKw/BieAOWBahHjgXR1fAyDjcQ7zwISHfhHigZkSvkMBK2ED6DFUbUwUYJUoyAMQs1AAFQemSJL41EbSoV4AWJ58oz5V+hbAgEsFyaHYRfp1FkkgtUtLIJZSAKkFVKmj1nR4/oAsJfAEfJHMFAkvUw4B6N9CXuSHHNB7LwCoZ4vkEOE9O3QgQBSrx9S1VtE5uwkwRRK9DmU0HWZhBH9K9CxWgUt1BdAgmSKJ9zA9pIJZGLvIiuFQ0w6+LRwkQAvFFMkeF71ecyWNH0isbbY4zMqHJVdyEmCK5MrU5DVaIJeyCMAFfCqK8/0xbMv9IIFb9Cw6i2TV92nTWgXKIQB9b6+Ml6jfd0gN5UmQAL9pJY0B0XUFWl+c1iI5LRy6AjgvMLYFb3dXgP2ASMe4J7uuwMEfsc9qZIcDvwDYJP++gGwiTQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEQAAAAQBAMAAABdIsRgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABJElEQVQoFW2QMUsDQRCFXySXGLmYTRGxEDRnKyjYKhwpBeFaQcwSxcI0/ocgqL1gIXixswk2qa64NpFUARtJkdZORKIWss6YzOEGp9h57+3H7jBIeZs+/q2KpCVkPkTb/UpsGTgXzX0gxj0TdQFUQzHUE6TVljRWqPpi/iI6QSi9VbirddSYk1fmQ0I6xpg3yrMjZC8Rj4nkoyW0kTkatB5DusgFWBxidQrRhOzixPU594B1hRuW9Si6jiIeIu8TAmw4/L+7AjSQeifJNZllAYykgxxnfcw1R8i/sqaaIE+e97mGmWGBXklruM1vOA/PFkKGVresCqfA/XFtD1t4CfQ00gC6mKU4NuYLpd7OPuFcshccmgNsw9G/qXUkiJVapmg5Nj/m8kjK2dlUkgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$2 a + 4 \\pi$$"
      ],
      "text/plain": [
       "2⋅a + 4⋅π"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAkAAAAOBAMAAAAPuiubAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEJm7MquJRO/dIs12VHWsM+wAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABRSURBVAgdY2BUMnZgYBBlYHvOwKDIwNDBwNDJwBC3gGGfAEMcUIKBYZ4AkGB/BmJyBoBIJRDBowAiLzFwLWBgSWDgWcCwMi0pkoFh37t3LxkABZYPUKJR+4UAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$2$$"
      ],
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAbBAMAAACJs2z+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNuzJE3SJtjddMAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACEklEQVQ4EZ1UO2sUYRQ9O4/szL4Sq4iFkQh24qApbGQXG0khmcIQRYgprSRYCWpYMGpIlcJmq6ytNmthYeXgH3CQiI3EKSSdGlgEg4/x3Pnm2+xsRiRzi/ude849871mBjh02OsPDu2hYRGzRWzbeB0V8H3Et6CADZjyCtk+FHLZ7VHbzigxUh+X+qYmzbVnPcFmVzPD4/n157q0IqDm19hcOgnMwP4likv2QJgt3AhS1twAXh055mHmSh/gtU+LMJg+6ZpUvY4H44SCwAJwJo5ZjdF2GpiLiLe1moypzQhh/dHCWQ3EtulhjutthJoctrl9WD+14AYpEhvjkweU2wSNh4+5W4l0NqJ6H7fjOP4BDA5f2WrfqVaWmN5E7i4Hxr7trW9fn9xZibiljURSe+PzWizrE7yDU3C6Stq3beEFFss90qVQacmRAGtSGQHg9FFfJr7W6bzrdJ4IDafN1LU85uouk0SyyGRXic3ootlTymC2O6yrrbqwWdtRNCK1yKaPKdEZ2lZq4yucpXGZrRYmkpqt6qMcqSNpTmC2RMzQtpfACpreeEBucCRlXsCX+auXycnpVpbHtmxiRmprvJ9fDXEfhk/OkSTjxb1H2Izj38SyAvPS3c/3EkXbXN5YiKewxOH2lJbJuS9XpuNCpkqL7Kt8LqdlIYdDJcpjhzj5cA5G/mc61PeP5/7vp3ArfcRf5Sp5cMUaIdcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$12 \\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "12⋅(a + 2⋅π) "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new**2, a, 2) # same as above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALEAAAAWBAMAAAB9HmCgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNuzJE3SJtjddMAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACzklEQVQ4EZ2UT0gUURzHv7Mzs2POrq4QKQUFZRBSNpQhHcKpyOwQbpCxGdgeCutQiBEeIluIbBFBQy970vBQdCgFD3XJvXSIiCQCL5EDgnSp/JOR/Xv9xp335rWzRtu7vN/7/r7fz5t9M/uAvJG4b+Up/7HUe28GUrqjDQTEooU2HAtkoo75KyAWLbzDpJMfimbLfuRrxa/f4lM2mFKWglrxypYCbyvaUTwnmJj2JDX9YIx3E7zw58dA/dU+fx2szBTUrkRWNPQUlco2oA46P92wq+WNN0AKWixPlZdRGyXAQSFdoKruJJ0rfX1bPfUZXnhVJfcZ1VCSUAf42p+FpdPGBmA/70TiETqDMJF3Ac3OqmzeqRj1+iI2NwR9BOqUp0sTt5RdtNEKHOCtJxUbrRx52EIzbUIjxNi81+cxxIcQ+WbpSU+XJm7R19l4NYpTvLWbMSrdZ6YxY+F9opN2EoPHws4Q/aQvJ4BOxthXSD5uuUxkjZ2PwSAmS3mIHDmyjEgthgWWCh6rB5F1Ngj9TOVctyP7PIvaQWScXbHQMt7d/pFDcmR6uXuS6OWiO3Ny3CVXvVzMjqPNoDOTfJ5FB5GVvpmdZkx3rglGjpwG+i1MC/V0JvM6kyEklDEih23coK9zRKPj4j7fsskln4OxaKEUhwVjlWykgBqo34VKhfdA+0DkkAVzAaYdJV3y5Sxq3CXTxpMxTGBKMFbJVSibXYYyL1SfvD6dXrzdQOtGlCTLLaiSL0dWmtL9O65QVkuiB/6145LNOIzZBWgDmyW098ykVCPkAA/RYJVnoUo+YQnZqAVKHXUJ/M8MGET+0JI4jnu4ZMcLkmsQGUS4A9cRIoPk88kjeG6hHcYUtnNEyaGVHgwz9hN1XU+PZrlMs4i1skZM3KIb6S40Iks+btEffU6aTXQjlcZwREKsUfLYGm1X/gdLofTeQuKf2t8svwHtILoj8Abu/gAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$12 a^{2} + 48 \\pi a + 48 \\pi^{2}$$"
      ],
      "text/plain": [
       "    2                2\n",
       "12⋅a  + 48⋅π⋅a + 48⋅π "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(diff(MyFun_new**2, a, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y, z = var(\"x,y,z\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAJBAMAAAAWSsseAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEHarIkSJZt3NuzJUmW693xMAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABASURBVAgdY2AQUnZVU2BgTGBv4pjAwCbA9pDVgYGRgWsBAwjwKYCpfRuAFI+AHgOTAEPcgXUM7gwMwkpC1wsYABfXCcn8wW65AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x$$"
      ],
      "text/plain": [
       "x"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAANBAMAAACN24kIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAV0lEQVQIHWNgVFZgcBVgYGMPYNBnYPBgnsCwioFBgFWB4RMDA0O9APdvIGXJwBQApNYwcB0AUjYM9ReAlIySvQOQAskyMPBMYPwOpPgucCkAKXYlayAJAFheDOlS+mEEAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$y$$"
      ],
      "text/plain": [
       "y"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAJBAMAAAD5iKAgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARN3vMmYQu3aZIqtUic3QRwAsAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAANklEQVQIHWNgYFQWcGVgSI+YWcDAkMCwnAEIWMpApDSI4NkAIk8yMGxgYFG92ifAwMkQ/JABANaQCOwnyvUYAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$z$$"
      ],
      "text/plain": [
       "z"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = sin(x*y) + cos(y*z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKAAAAAUBAMAAAD4uit9AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMnZUZs0Qu91E7yKJmaurDqYVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACzklEQVQ4EX1VUUgUURQ94+6+2XVW24KoLx028KPa2q8KglqkIEhh+1hIghiCMEJqCSNIiIWKPvwRv8QCNTKQCBaSCiFYhIIoaQskAqlNqh8JtCKxNDvzdt7uPFu7MPvuOe/cM3PnzswCa2PcT+z3g5q5lfLRgXwZWHeqpMhWc6DRU/g5Pe/U4FwZGctVNqRZiHR1p3Z2QqNPa0iCdp2a9GDA1nmFgkWVyTVqa9AFvTpz1oPrGYa1hiCGpd7aWHGxcpVUJqG+Ml7P8LEuRweMba3pR3+w+f6mXTY369iCiM/1T+LUG1h3EfVaUoZiZiqJrvhzWUd9gvKEjQkHA2NGCpgCp5TDSeCGbf2mwCTZhSP2dRQGUTePYJokQxlOJI17Ri9MW9YB3UA0MozdEN2Jt9QdxqADG1eAy8APEuEk8AyvnJtWchpmFoEcSYYyzCAwEi7AWJB1wFXgQUMalyBgZanbh/DiDriGF4FvJOr7AIf7FNzGBhvGPMloJnN8NJMpkV0hbOZJl2UdMEZ5vS1LtzjuHsTT1aJrSA9lWM4iP9EcKxtS6F2h4WoO8qSLsk4aYsgxFoBIiVs0fIjgks/QbZkN8YeNbKcsx5ThGVaucEXWyZYxjbph4IDUDaAf+OQzdIeyh8NogVly6bVDydC7vghjSdbJoVBGbaCIRnhD6XH79VrmYxL5bs7zlW8oRTilhgJVDDWUiRReGCMIFTiUHvJTPN5jKIWtba0dzGdwq7Wtr2n1S9Pqx72/SrJFMduSOMT7P5vgcxSKUcVQhuLrzjyevHwn68gP8DgX/5BHMTjKW4tjPPTwvXq8izjj7SpDXczHLO8y04oWOZVV1naVfcZ5nnLSg8JRvL7y49CYFkuKjNoqq6ymPCXhNVxg37zI/0cPwinTVpoany+R9Tb7EzG+icpeVfyzdiISf11h3TmtjXE/cdQPaubaX0Awj78usLOuNbejmwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sin{\\left (x y \\right )} + \\cos{\\left (y z \\right )}$$"
      ],
      "text/plain": [
       "sin(x⋅y) + cos(y⋅z)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAAUBAMAAABSee3BAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0ydqsiRIlm3btUme8mhfXmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADlElEQVRIDY1WS2gTURQ9k2nzTxxKC6KoIaKCq+IH3HWEKF0YjR8EF8K4UfyVLoqICxtF1I1YREQFIYgWxS6KPxBB48aFLgxVUXFhtaK4ECz+KlXjuTMvn3mjxQM3ufe88+59nzuZAAFsDzB+IjzQHN9vDqbwfVmTDiAWgDEcoPzETF/Y6vhCYNbLa4oJf2gMaVk3ckRMR8jRGS2e74uNjC+EUcDxXo8yJxpDWtY2jojpOKcTWhyr+IlDKkzarpOykB5VVNOXljVqA2I6BnVCi+OOn5itQlU8XULrN79CIi2rMQqIaQiXNEIPd2hESB2yKh4aR+tnTxJeXJcGsi7gkJgHI7exT06whafq+e1PEH7N4PmxMqbnjsBcdTJDQZ7WvmJbt23kbfRYiKprUMU5Gh+HK975FYs+LllhkwpkPUZSzMN0nLXP000MAJ5f3I+WT0BP2XxnDiJhs8tLFNzieoqxC/FMNDKKNUAsQ5JoFO8vAq54HnDFDsslBLKeICnm4QCOW3voxsuA64fLI0gMA1kkx+JFmJ/3W7ApGGKrWNHxiLMrlcFtFi2RJBrFLzJyxTeAO8APhoGsD0g+QFtWMBeWJCLSvfB8A28xzYbxi2RXGZiIT64UwXvu3F2VlbbxhQfM00E0m134JpstiCBV4YcrZvGrEE0gK7pIitUgIk/mTYiMo6sTptCPuKJJ42BV0rI4ZFVAv2WytdzijOo7zzOAK2Zx7qhWvDmrXlwSEXJAPGN+8FRXM0tt57+2IPad9BBNVgWMoGUUiJToErXiyQq2Aq64UVzPin2cIebhHptrOV1pDc9PFMDZvHMk0xWY3/uATYzZcElrDVosjlISaLhlAK/HFTeKB7L6Gi7yM/HJfWPwyVF+qhCRXukZwGFzDKEie+gmYz4g/eW72A48RT9XmiqSJNTOw5eOPi25DXdTzlwdeyDrc84Qc2FsWJ4/Ix5PUfnGhrw8Jcbmbge7jz7D3pOnexnzsDpy7S9YtiP3ygFCnSQJVTxUrVZLcMVLq2uXVtc//F34S9a5nCGmYbAR89aDaP55HeHwDCWp3XlwhjBaVqPEXdF01F8B6zBHdqojVlFMa8aQBqy9WAxLVzbHWtZ/vVgSjpp0Gdebp9d9uXhBfCBhc/0Z/A+0rG2cI6aj/trvy3fqY248U7GR3GN69ax/1dZJLatsoLaJukYc9vGU8P+NOjWltjHoyxpz+Ig6+ANVvAhuIAzHgwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$- x \\left(x y \\cos{\\left (x y \\right )} + 2 \\sin{\\left (x y \\right )}\\right)$$"
      ],
      "text/plain": [
       "-x⋅(x⋅y⋅cos(x⋅y) + 2⋅sin(x⋅y))"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x, 1, y, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFoAAAAbBAMAAAAOgoX4AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABeUlEQVQ4EZWTMUjDQBSG/9R6DW3RUCedDhUXERXE+QZFRycRHHRyCxQ3t+Ls0EHBoIOC4CQWXIVmdHBwsquLgpMWdI7vJe3dJUJJD3L53ntfX3LXC5B7+HdebhdCjTTz266q/AxhbxV/89tAtTuM7cphbN+Wi3U7SnFVUVh6sXNTdpDhFYq3sWtlTy3O4iRQuXy+Nun0g6rSVIiExFgUfZucqwzTbkk7gvOWCoHNVJyxcdar1mbW5yTxAl19Nr0LX1EU0Wb4ie3sl47dJvEtoNnYB4+zh2tUPUps4YnuqCI+obX0WduVUKh5Fp94on4oX8XwblgEwflnECxxvoxlvrV54jEu4xvZmnVv4AENLmi73eKQ34SSCVt2B/HJ2+Eqpb1FFDwCWqVmYztdxKe6t8q98B4b/DPaI83GLjTwwdVXnoCJ6VqnzkDP0mzscohVrl7wZI3B/3zDMhnTp8rhpZghpOGEbrIJK6YTmxmDvob/nQZ8aSWVdP4Dbm1JgeCzfN0AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "x⋅(x + π) "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAbBAMAAAD7fA5IAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABoklEQVQ4EZWTOUsDURSFz2SZyTIx0yhaGeMfCKQWphcxrQtkFLEIglOLP0CxMJ0QBae1ibaSIomVioVLJ4rBTgsJIoqgjPdmtiwaxgN5775zv9y3DuBT4viYT5KwAub8wyVMG77pHRzqvmHgQfkHvPcPVky1weW2uCu85fEj/YR0VuVYyHD7u8IGIGmSikGIH4zEyfhLwhEweX+jgO5lgyGexVOi5sUUrQDbpglsAnmDxqWObBc8bCerCvIqECv2g+O6m91XADlFe7yYXacJWU7lU9M0XwHv2KR3ygYbwBCearuMurC4dFc+N4AB2qGlaI766CWwgFVlzfLsylMoyCo5iaJlA2kOIjqgINvyxErleKtS4RrIhBVqQ81WwlqtBQNftueuOZSLsuXC14gZ1jIQeuuGA40kV5aKViKkQSaYN3glN1G3XOc0RpWkTo6zwYPlxRka0uFI38FmjP7DcuAzRDQaBrghVU3zkzqaSJivn7y0PA+eQFgjK67avt31ve6RTrbrIQm8LU/2vbpG0HDDnoCfaIf6Pf7eQn0+q2e77A8qXF7AwJjxsQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$2 \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "2⋅(x + π) "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, (x, -1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB0AAAAVBAMAAABI7vhRAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAInarRM2ZVBDdiWbvuzJCz3LGAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAr0lEQVQYGWNggADG/2DwAcplYHaAsSC0KCqXIR2VzzEBlc9VgMrvROUyrEblg7TrAB3wDSrMtIGBa12RtKIAkO8CxJwMDM8ZFjI9ADKZjgIJJSBmuMDcACQl9B0YGEC28xkAVQFB/wUGbgUgzbaBvwFIMbB9ZOAEMfob+B2AFAPjN4ZdIFqTgWcBiGawb5gBoq4zMC8A0QzvlyeAaRjBerQBxgTT7DBXwkQvwhhAGgC58CczEgwlOgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sqrt{\\pi}$$"
      ],
      "text/plain": [
       "√π"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(exp(-x**2), (x, -oo, oo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAALBAMAAAAHCCkxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yq+9mibuZdlQi3UTAfPOwAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAg0lEQVQIHWNggAMBEAtMQIUYXb8mMDBUTFkA5QMpDgOuTwxCGxhOIYSSGRj2NygzMLAdYBBSAgFlhgUMDOx/gQRDAhBDwAIg1Z8AJEAMCFgApFr/MTAwJkD4QDKRgYGrJvQAA9cBuBAnA0Mlg2kcQzpchIFxpscGBsb5oQUIISgL6HoA9QQYMvwZYisAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$-\\infty$$"
      ],
      "text/plain": [
       "-∞"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-oo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = var(\"n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADsAAAA9BAMAAADhUgydAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMruZ3URUIqt2iWYQ780BvRqmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACG0lEQVQ4Ec1VPWgTURz/hfTSJPeSFDt1MZDVoa10soV2CVKwTYZOQuEUEbcUiqJQiJt0aA3EqdNt1Q72oFBKoXCji6CjUkh2QRPQRqXt893He/fu3cfsb8j9Pt7/fdy7lwc4uAEU3pkujfmZnANO8SQm8aw1oI6KnZSvgQxRMpLjzAhjVkp8ibFOSjxCKSVmY1eaydWpM38EdJPXvdnYRuFgRu47dy4rlX94e6laIa3/D/EPGuCPmJ6YWotOuCZ5etK7isZZusRNvWEIKhbW+M09ZPucis5RpRY3MctZQVTrdMRN6D7L7lzPc3P6J2exz480tFlqG41eqFZIH17ZIa2IMu0rTkiS3t+QVkWLNlVL1ll6LssIb0i9V4IdHPgN20uRCtk425CVyrWh6gDF2wvcrBqcBc997PqCfAlcwe6i6o9YnhFmQOpoNz1VC0yZtWxXFe8JMycYI8uekFZ1LMVFb0hpVdonKT7yeNvgHll0C+6/etHtQDO1CRaQrzx99to7EWatQ0a4+fihzZLy9XcXK2wn3G8yY6xifIgepU7dYrBB1D1jhPyCPnCieOQGyPfjI8dlR6li2Yl5yUTLNhNj9q7f686iVLBbgYH9uz+XXx9v5dwKaWB1aYjG+vxUV1TExOtWaSNfY7jlTko09cjWG+kKilZjG+uiIib+jDuZvLNn3+I6Hx+g/oCXs1tBgfYSe5bvObdCGP8A0u6rseJ52wwAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\sum_{n=1}^{10} \\frac{1}{n^{2}}$$"
      ],
      "text/plain": [
       "  10    \n",
       " ____   \n",
       " ╲      \n",
       "  ╲   1 \n",
       "   ╲  ──\n",
       "   ╱   2\n",
       "  ╱   n \n",
       " ╱      \n",
       " ‾‾‾‾   \n",
       "n = 1   "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAPBAMAAAAIUwCQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3TIiu0Sg0+p/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAACVElEQVQ4Ea2TPWhTURTHf0ma76Q+HFwcjHZR8ONZXOqSR6EQcTBDYgWRBIWCIDQIBYtCKxjpoCaDiOCgg4MOYmYXgyA4OGQUlwYdXAuNYkUbzz33fcTdS/i/++7/I+e+ey74I3slf1um+XUS7VqfN5V6vQqLK73883a9rkChfskJ9PoUWjVEbojNKBcfjyWAnMdsszDD8ng89pgbZropmY0U+EDsR2DY66K0hcjNqdq2BmZrt8zzusc8VLgHU/CJ4iDTB0+BNYdf1pBYOCeBhrYQuSFlA8Uuo3DVYwcaSLUXmf4tS0n59RT4MjSkNSy7llaN+XPfHfD+UjLrJf7AWh+mWxRLRgbfQjBbDgOVthobKG5RBhUu3ejBNVk6IhUOoQh7niw+MFmDEE5L5WGg0lYzFboDnqJb2CXRksAGPG3CeSg/IufIjuXNwvsXbmCQLSttNZE74E0Nn+V7SWCxFWs4JLYkcIuM9EDZkAqkjwcGE2hoXxO6A954Ov39JpB9Nxs90l3Z8jNSu7BqSAU45E5s2dC+JnIH3/CMfLmvVQ0E6YncQJqyS0pO4ZUJNPARNp0oUGmrmXT7hyJH0TlZ2egcbonzoVTnSSeWtMKRrGBg7P4TqLTVTLr9wHV4KZ64x2U3L/33Vhby22RK5H/KusIxeD2xZaWtRsS+G9LS2OWuXKvUUTHGB6y6c004UJW3BWYdYt9lprCkV88YpFVdn1ZN5CYzv3PX3OBCuyKS5Oaombxgmu+dI5Bsn5Xbc1BmCtMb94fWwJ0Tj5uWtprQLdr/O/4C+CrWblgKxFoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1.54976773116654$$"
      ],
      "text/plain": [
       "1.54976773116654"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n,1, 10)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAPBAMAAAAIUwCQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3TJEuyJIWJmAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACm0lEQVQ4Ea2Tz0sUYRzGn9lxdsvdHT1ECB36YYeKhMEUyYuDB5E67AYKUsgOBUGXNKEsOjgY1gRFhnsMVCioU3so6NbWKbpknTPnUkSHYjWVlWx73u93N/oDWthnn5nn8z7sO+93gMbHmTxDmw5V7JmhGPg8/J6XeAE4V0wqjEjP5Tv1RJwdLZfgDo+28qbVbhLYD3CbP82+SmfgtsMNsTfg9UPgPnpjZRQM0WQWMxHXBecXvsLaALqG1hgA2RDL/JnwVfqBQaQqaFkAUgeR3AdnVhkBrQD2rCTqbgAHMNWKLa5OauG7mB7uBV+lChSQOYoWLvtSRNaHtQZhRJwl2AuSqDsC5OLXZXBZo/ADLR/STl/E3gamYt4wW84X0eIjU4EwIpltz9FE3byHXImPj1tuFFafXy0DF02hkcP8h7y2HxGIi+gLkdmEMArmNk5pAnHseeoBvXka3bJdDbAIe5xdIgVgPoB7mg+nB0X8yCO9KYyCcGpzmqgDMusciscsbRTWgGnPAQtFsuNWoZXpRBl5UxgivW4b5piAaHu7qom6+nikjv4tNOczVt5jCkWw+3qhxDTRbpVYqFsWRiTpY0oTcQQjfnnU/Iv1U37CwnN5FtpGTJjz3BjZSjdYyEOxKjBMIJLwkNZEHAcoBL4DK9xVvZCDN/ZqMLp36JKRcRayZo2Fu6Jo9VZ2yXCGKYv0MR+QRBzQBjeuef8WvvQwTSrhq5z10r+RWEKzmdLGYAsjkoiBT5KoS+eRijv0qFNc0jeLpry9nwQ7RK55xwMkA331SC6is6SMgJk5JM0uOqDu2/DICZyXOdzRX70pb/DIUIkzvfIzEHFGzMv/JvpIHa0NoHvyJJ0wIs9mTG4ScfO12hYy0d0yb/7nzx+UW/6EMJzTtQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$1.64493406684823$$"
      ],
      "text/plain": [
       "1.64493406684823"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, oo)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAA9BAMAAADPFy0PAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMruZ3URUIqt2iWYQ780BvRqmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABXklEQVQ4EWNgAAEhBgbOlQvATBRC2ISBYRdDBooYhBPCwODKwH8AUyaEgecjA28CNgnG7wwsG7BK/GFgmYBV4jsDL1YJoB38Adh04HBVCgPDZGz+KPbvZOBcZYBp0iAU4f2PAB+R3cce8f/TGRDY//+ZALIEA4P+DzA///8BVHGG9VCJL2jiQ1wiqr1yMiTBoHlwgdIEnu9gv6JKMCb4MbBDQhNVgofnKwP3Byw6GNg+MHA8wCbB/ICBf8MBkAyqUQy8CxjyDyzAIlEfwLCOGxxlaDqA2atiG0gDulFgsYGX0Iekm/X/Ee4BsdiF//9vLWDgkfr//1kBshQ47X5gYAKlYJS0i6yIHmxgSYcVgEo67AAYFdgBsgS3teRkuCoUidgNvAUcSkCgzcCALFEzBan4RJZg6GSIxWoUw0UGK0aOd0DwGtUo9g8MrokwLcCSDg5YGxhmbYDyQCUdDAAAkfypqiLfSSQAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\prod_{n=1}^{10} n$$"
      ],
      "text/plain": [
       "  10   \n",
       "┬───┬  \n",
       "│   │ n\n",
       "│   │  \n",
       "n = 1  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Product(n, (n, 1, 10)) # 10!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAPBAMAAAArJJMAAAAAIVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdcGRXAAAACnRSTlMAVO8Qq4lmdpnNpXqjvAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAACBJREFUCB1jYAADRmUGBpOQxUA2GykEO1Axh9PKNrAZAEESCWTnoGnkAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1$$"
      ],
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(sin(x)/x, x, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAUBAMAAAADwRznAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABlElEQVQoFXWTv0vDQBiG31jbpjkTg6CDiIQq4iCYSREVI1J0URwEB5egorgVQUebwd0MLm4OTqLY/0DBWQgizkUcHP0BCjroG5LKXasHOb7n+57c3UcuwH+jNZIr+zI0xt1Kos1TUIVDBbVQQQVMV0GsqiiT5ckEdKoo04IMjAtlaH0OSjagjawF6CpuQgzexufq49MxNDvgpELORS6/iGGmS4FYEo8wHHZeI5/zbd98sMJUMEPMZUKcsnQEfcXyIb52bDjkJyBn517yXiroNdhZB69c4Y3lywB4tz77GWKZORjHqAviGajY4gsQ1HFQBj61rW83UYF2h1EqUB1Dy6K06ts0zA8KPAC3qXJKhHwNOINxxcQRoGddiI9t4IbMtnR7GC12KrAtTKASsVSKsC5WUPDZ1gl5jTsHF5ivCxkf6ClOeSxp1wMeZjZGsXt7XybvxZWOSa6SCIUqkzzMH0P+sLHQC7SFWtxF0/i9LqnA62JFhtPkxYn4wPFIhPgS5ovjSapxrl/tRDC8xrrE6g9zB/wAm91aBo7Q7skAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "h = var(\"h\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAUBAMAAAADwRznAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABlElEQVQoFXWTv0vDQBiG31jbpjkTg6CDiIQq4iCYSREVI1J0URwEB5egorgVQUebwd0MLm4OTqLY/0DBWQgizkUcHP0BCjroG5LKXasHOb7n+57c3UcuwH+jNZIr+zI0xt1Kos1TUIVDBbVQQQVMV0GsqiiT5ckEdKoo04IMjAtlaH0OSjagjawF6CpuQgzexufq49MxNDvgpELORS6/iGGmS4FYEo8wHHZeI5/zbd98sMJUMEPMZUKcsnQEfcXyIb52bDjkJyBn517yXiroNdhZB69c4Y3lywB4tz77GWKZORjHqAviGajY4gsQ1HFQBj61rW83UYF2h1EqUB1Dy6K06ts0zA8KPAC3qXJKhHwNOINxxcQRoGddiI9t4IbMtnR7GC12KrAtTKASsVSKsC5WUPDZ1gl5jTsHF5ivCxkf6ClOeSxp1wMeZjZGsXt7XybvxZWOSa6SCIUqkzzMH0P+sLHQC7SFWtxF0/i9LqnA62JFhtPkxYn4wPFIhPgS5ovjSapxrl/tRDC8xrrE6g9zB/wAm91aBo7Q7skAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit((f.subs(x, x+h) - f)/h, h, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABMAAAALBAMAAABv+6sJAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEKvvZom7mXYyzVQi3UQ6SGZXAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAbUlEQVQIHWNgYBBgAAIQwaj82YGBIayogYGBbQLHLwapDQwnGBg8GRj2J6xkYGA5wACUYP0LJBgcQEyGfAcg0QBmJv8DandgcGRg4IgxPsDAcYCBnYEhnGGyHYMrUKJcbQMDY71xAFA5BABtAwBKehUH3PvDFwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\infty$$"
      ],
      "text/plain": [
       "∞"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"+\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAALBAMAAAAHCCkxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yq+9mibuZdlQi3UTAfPOwAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAg0lEQVQIHWNggAMBEAtMQIUYXb8mMDBUTFkA5QMpDgOuTwxCGxhOIYSSGRj2NygzMLAdYBBSAgFlhgUMDOx/gQRDAhBDwAIg1Z8AJEAMCFgApFr/MTAwJkD4QDKRgYGrJvQAA9cBuBAnA0Mlg2kcQzpchIFxpscGBsb5oQUIISgL6HoA9QQYMvwZYisAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$-\\infty$$"
      ],
      "text/plain": [
       "-∞"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"-\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\frac{x^{3}}{6} + \\frac{x^{4}}{24} + \\frac{x^{5}}{120} + \\mathcal{O}\\left(x^{6}\\right)$$"
      ],
      "text/plain": [
       "         2    3    4     5        \n",
       "        x    x    x     x     ⎛ 6⎞\n",
       "1 + x + ── + ── + ── + ─── + O⎝x ⎠\n",
       "        2    6    24   120        "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x) # this is a classic!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$e + e \\left(x - 1\\right) + \\frac{e}{2} \\left(x - 1\\right)^{2} + \\frac{e}{6} \\left(x - 1\\right)^{3} + \\frac{e}{24} \\left(x - 1\\right)^{4} + \\frac{e}{120} \\left(x - 1\\right)^{5} + \\mathcal{O}\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "                         2            3            4            5             \n",
       "                ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)     ⎛       6\n",
       "ℯ + ℯ⋅(x - 1) + ────────── + ────────── + ────────── + ────────── + O⎝(x - 1) \n",
       "                    2            6            24          120                 \n",
       "\n",
       "        \n",
       "       ⎞\n",
       "; x → 1⎠\n",
       "        "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADgAAAAUBAMAAAAqxuNgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvNiRDvuyJ2RN1UmWaBK2/dAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABSklEQVQoFWWSv0vDUBDHv9HEpkmM2n+ga8FFwUG6mKGTEAgqSHGpjuIgTg6ib/YXRQKSQSxdHexoQSSbg4MZnByk4CCOBasgSL1r3ivaHlzux+fucrz3gEExW2nGEUBuboCuqrgAGBsqkHZexcvk7KggtW6iYr06BG2hoFEZgkeKAcUeXIkWgbr/fk7ggrR8dhjSTJ+hdoNM1ergLktgn3b03KY9A7wytD1o7ZEGpnniLaAHescSwAPDfAx8jFdSuEmdyGxzXZ7hYw34MtvGFmcIAhP0Rwm588cMQ8EZGkvpSf5ecedYAu3bqXHcW8gJLpEN5ELaOkY9qzglGNL+1/EBTsl9Qq5bwEnpGVjofiaUoVlLUfmlRe4saSqZ2Dhukvvn+BqK4Z68N9L/By/xGi24x/6uTICvTIpRinziQP+y+1WqhKx6Jq7AL1c3SthOBNhaAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\log{\\left (x \\right )}$$"
      ],
      "text/plain": [
       "log(x)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(log(x), x, 0) # will not work why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$-1 - \\frac{1}{2} \\left(x - 1\\right)^{2} + \\frac{1}{3} \\left(x - 1\\right)^{3} - \\frac{1}{4} \\left(x - 1\\right)^{4} + \\frac{1}{5} \\left(x - 1\\right)^{5} + x + \\mathcal{O}\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "            2          3          4          5                         \n",
       "     (x - 1)    (x - 1)    (x - 1)    (x - 1)         ⎛       6       ⎞\n",
       "-1 - ──────── + ──────── - ──────── + ──────── + x + O⎝(x - 1) ; x → 1⎠\n",
       "        2          3          4          5                             "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(log(x), x,1) # this will work, however"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAAAvBAMAAAC8ty28AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3SJEuzIF9t57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADJ0lEQVRYCbWWTWgTQRTHX7pJdpNs0ogHBREjXhQEl1qpN4OXoj0YsFI/Ds1BRLwYqNKCBwOtvVULCrIiWKxSRZGcvGjpHgQLoi3e1SB68NSUFkutGt/bj9lZ+zE7DXnQyXtvfu+ftzOz0wBIWGxkUIKWQ8/BMbkCCfoZzFUkcCn0OUxZUgVS8C5DCpeCJ6RoKThWlsKl4ItStBSsF/SqVIEE/GPLzibspdLf9bYHDtTrEp2ERQ/BpdLTsLAkdxJ6jXeSNWFxAz6FRZHrGZLblqXw2lpRmw1PA2T+iumM5TBaIV6Dkph3ia1qDfpE9DcGYN9vWCBw9Pl0LVUUQHCbAW1ViAlxl1Y6+wYusMqgM62cXbYopbFlUO9iOE65xkwtv/9w6zdpTPmHg/ZyAFORPQ2Jd+rjoP4hidO+TmoevwqgvXvBzUXYMzFoG/P+d7wZLd9mAdhXwW6PaaumfgIkswDxhrRnjBGUfIDLkfJ0IFmJ41rQujSm/QSwPTiBf/EcDrZlerorAGpuDW3nzrMp78mdGn50Z3TnlfqIU9ooDh1XXl8tOZyOz7Gqb+7OE2przkLsRbn0LIBSiE8k6TvQ6E1epc3deULtdM2WoTOYyAPEjNiCXqEUrj8mHe2Yad7bZ5p5THp33hnTfGiad4hrrTMjMX8mYfdNLUOyjH3b3WOApjBtDPwzuGRP4iDsO2qvt/1rK1GmqtYSjWR+3xgwbf/OE2qriyRzn4Z0nsa5Ko1kmRVvTTDwtLk7T6it1IsAkxZWQxQXJmJcB9WgCIDOiepsNdPm7zyhNlxe3DHdZWvReZ7JfoGXdoQ950A7ujzsRG7f/J0n1s4c/3XTKac+2/s7houuNr2XzLw1YYngXh4e+bzOjJvez02jm2C7ioHiLhSHHPR9JQ+9lh9yM17yhuc4n0dWywUBP9IMaMn54Rre12DufDDcKGoZgyieqg0smg1MvghEGwb4BjovyrqUMspPxQt8JPST3mldh9zO5yf5QOzPCFqJWJzGIOeHcB+FYDaJaOVNFoYoox8FTbJIGV41SRq+A1xrknbq8amhsSZpJ/C/mqT2P1W6v8EoFNglAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\mathcal{O}\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 0, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAAAvBAMAAAC8ty28AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3SJEuzIF9t57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADJ0lEQVRYCbWWTWgTQRTHX7pJdpNs0ogHBREjXhQEl1qpN4OXoj0YsFI/Ds1BRLwYqNKCBwOtvVULCrIiWKxSRZGcvGjpHgQLoi3e1SB68NSUFkutGt/bj9lZ+zE7DXnQyXtvfu+ftzOz0wBIWGxkUIKWQ8/BMbkCCfoZzFUkcCn0OUxZUgVS8C5DCpeCJ6RoKThWlsKl4ItStBSsF/SqVIEE/GPLzibspdLf9bYHDtTrEp2ERQ/BpdLTsLAkdxJ6jXeSNWFxAz6FRZHrGZLblqXw2lpRmw1PA2T+iumM5TBaIV6Dkph3ia1qDfpE9DcGYN9vWCBw9Pl0LVUUQHCbAW1ViAlxl1Y6+wYusMqgM62cXbYopbFlUO9iOE65xkwtv/9w6zdpTPmHg/ZyAFORPQ2Jd+rjoP4hidO+TmoevwqgvXvBzUXYMzFoG/P+d7wZLd9mAdhXwW6PaaumfgIkswDxhrRnjBGUfIDLkfJ0IFmJ41rQujSm/QSwPTiBf/EcDrZlerorAGpuDW3nzrMp78mdGn50Z3TnlfqIU9ooDh1XXl8tOZyOz7Gqb+7OE2przkLsRbn0LIBSiE8k6TvQ6E1epc3deULtdM2WoTOYyAPEjNiCXqEUrj8mHe2Yad7bZ5p5THp33hnTfGiad4hrrTMjMX8mYfdNLUOyjH3b3WOApjBtDPwzuGRP4iDsO2qvt/1rK1GmqtYSjWR+3xgwbf/OE2qriyRzn4Z0nsa5Ko1kmRVvTTDwtLk7T6it1IsAkxZWQxQXJmJcB9WgCIDOiepsNdPm7zyhNlxe3DHdZWvReZ7JfoGXdoQ950A7ujzsRG7f/J0n1s4c/3XTKac+2/s7houuNr2XzLw1YYngXh4e+bzOjJvez02jm2C7ioHiLhSHHPR9JQ+9lh9yM17yhuc4n0dWywUBP9IMaMn54Rre12DufDDcKGoZgyieqg0smg1MvghEGwb4BjovyrqUMspPxQt8JPST3mldh9zO5yf5QOzPCFqJWJzGIOeHcB+FYDaJaOVNFoYoox8FTbJIGV41SRq+A1xrknbq8amhsSZpJ/C/mqT2P1W6v8EoFNglAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\mathcal{O}\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp(x).series(x,0,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMQAAAAwBAMAAAC8i8hXAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNMiJE3bsIsXnQAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADkklEQVRYCcVXz2sTQRR+6XazyWaTRjxYKmjVSw+Ki7b0aPBStZQGtFgRMQcRpajBKO3NgLQWD21BLwGhQbx4arz0pG0OgkXBgj3UX2DwD2gjjWjVGt/s7OxukpmW1QEfZOa975t5X+bXSwsgMnXitoiCkpDxRZyF46LxgbKI8Yd/gJmCYEaXJImPMF8USGQkSQDsNvkSelyaxDJfAVSQJaFmBRJD0iQuCRSUtCwJI2nkuSKB0cHvKS7jF3y8bZfguCGy5jdZ/XhluPfFaThYrdYTQBm4Wok3UP6ALriSfsedIma4w8XgSThvvuLSYoY7XAyasCIgxQxngn5iNsWBbeibkBIzDVOMaqUBcwD9h+PWOWLGHagXqW+04Y1Mu7jX266VIeMFHF/MOEMAHtm+9ayeewjXNb7EypGUG7uemHHHANyzA+POiAlqyksxX+nJjFxkQU0vZgAWlHPrRTI6xPYmUgyWAJYIJsW07OuXk79Iqnk8Adv0nwAj6Af2MeRf+h5jCbTfJMMgSxMyFdScB+g8tXXB2cFmNfSMCSUOFQGsirOHDWoqkFoWjQMEZUgsmhOYeRr3yC2Rqkl+cUIlSRJvAb8s9OMn2I4NtYFR7LV2ORIGfaufMWVoCpvuG09vprFHM3CTZGxUiG52B6aMlQCUZHA5SqTQSD2QIRErW9nIpQ0nAPAU1owCgfBsEKQSSs6yPIItVcfIzDO53Jtc7j56YiZsrYIsAKJZXIW1FgzQyMWVsYpm6yysvx7DWZK4JU1aYu4qaCxo2e1vpG1Gs8r2A8LHEqSdyZOWGHnhMlahVFMAc0WSsrmEBcO8BZpJInqjNBlP71pl50KvlZK8g8X4KsxaEa6gHUJH18fsSNhtuVGg923cpdPJO+gc7h5L2dnI6+aaMr6SdwlHwob1LOMchgEA+12XeGHn4Gtx6AQVLxuzw8yx4WiCAQ7DAABSNTx2xD4TD0Rd/B9sbwMIYMPXExyOQQ+ZQ/sLtaEbHcCaVnBD5lE4cjnBAE7fHK8B39dEngDLcn/eE9suhVVSJISmTHmpYNIb1fmfzDqAhggPbSoBrd55c96gzje+1gE0RFhJby4RKHpm4ukJzb01NUMQVq1qWoP+XTDOn4ZwmyQJLcuVQFhJSpJohUiBI4Lwk2Pjkx1pDucT0pOgcSRsuCnhMx1v+LOBwT4ObsNNJQ7nF5quVjc4cyisrlZSHPI/Qn8AupbvjhHEvv4AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1 - \\frac{x^{2}}{2} + \\frac{x^{4}}{24} + \\mathcal{O}\\left(x^{5}\\right)$$"
      ],
      "text/plain": [
       "     2    4        \n",
       "    x    x     ⎛ 5⎞\n",
       "1 - ── + ── + O⎝x ⎠\n",
       "    2    24        "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 = cos(x).series(x, 0, 5); s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAcBAMAAAD1rn4EAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDUlEQVQ4EY2SP2hTcRDHvy/Ne/nf/mih4NTXCm41QVwqBbOUjn2IQ7ekIjjqpC46FB0ES8VSaAYxIF1cGigdHCR1cBHBVztIu9ilQycTERwU4t3l98t7P00kB7+7+3zv7t3L7wUY0rzjgyE7ddtNzA03sKfbHqFZTgwxkivppsdYClwD/xnMqF7xk8KtHvyVuOHk+qZon6PKKpCOxiOds1l3+20noCTZ7hW8EEjQ6Wcj/rJCsU4l7tL2gGKyZUhi3td46JwCY1wc3dcS3KrbAJ4alGgG3HahDmT4bZaU6Xjz8QPlxwYlmoF0mCce4Q0Pew3fOh3KL9IZP79wwRfdDFRoN5A9IXdEx5m5fO0GRbaKglNNraafCZmBr7SbXj8k95rOJO77T1ghazbgKa/tloXMwI5QM6CwQWcFt9V1keg3BXCQrTN5tdrWWa1WovSlbOCHY42Okj1MwBQ/ZcznlMxsuNogyP1g6QU7fBfPjjbIe3UFM1AsEWe4hFfscr/YizXLyKsiEkrIDEz9pG+6LdIV8u8SLUwLyS1V9new2EUzkOrMLxyWRaN7d39nW8k7eoC+y8TM+BeNZgC762uNbgff+6Xp2Xu6f8CXNlWKo0EMKH1uoaMsZChULcmJ/u2WHkHuJMopS5Us7AfzlpjWP80SbThn4V2L+kI+jMnJegwGpe9jhcK/txKrDkj/AD2MYyFwzynjAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x + \\mathcal{O}\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2 = sin(x).series(x, 0, 2); s2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAcBAMAAAD1rn4EAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDUlEQVQ4EY2SP2hTcRDHvy/Ne/nf/mih4NTXCm41QVwqBbOUjn2IQ7ekIjjqpC46FB0ES8VSaAYxIF1cGigdHCR1cBHBVztIu9ilQycTERwU4t3l98t7P00kB7+7+3zv7t3L7wUY0rzjgyE7ddtNzA03sKfbHqFZTgwxkivppsdYClwD/xnMqF7xk8KtHvyVuOHk+qZon6PKKpCOxiOds1l3+20noCTZ7hW8EEjQ6Wcj/rJCsU4l7tL2gGKyZUhi3td46JwCY1wc3dcS3KrbAJ4alGgG3HahDmT4bZaU6Xjz8QPlxwYlmoF0mCce4Q0Pew3fOh3KL9IZP79wwRfdDFRoN5A9IXdEx5m5fO0GRbaKglNNraafCZmBr7SbXj8k95rOJO77T1ghazbgKa/tloXMwI5QM6CwQWcFt9V1keg3BXCQrTN5tdrWWa1WovSlbOCHY42Okj1MwBQ/ZcznlMxsuNogyP1g6QU7fBfPjjbIe3UFM1AsEWe4hFfscr/YizXLyKsiEkrIDEz9pG+6LdIV8u8SLUwLyS1V9new2EUzkOrMLxyWRaN7d39nW8k7eoC+y8TM+BeNZgC762uNbgff+6Xp2Xu6f8CXNlWKo0EMKH1uoaMsZChULcmJ/u2WHkHuJMopS5Us7AfzlpjWP80SbThn4V2L+kI+jMnJegwGpe9jhcK/txKrDkj/AD2MYyFwzynjAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x + \\mathcal{O}\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1 * s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAG8AAAAwBAMAAADtMzlxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACUklEQVRIDc2VPWgUQRTH/7PZvbvkPrJcIJ2wiRKwODwloGCRLZSzSxD7rBZXCJJ0WumhQbBSsHGrpI6FV6UTI5YinBESCBwINn6A3PmFoLjOfl1m9t6LqIVOcfve//f+szNz+3aBaBRPNpbjKPubqx3NSmpuBR/VVIl3sKtkQ6H11B7SYmEb1xgSyVabp/vfcavG3VK84+cEzIX8GsMPOwxI5OInju+71LItPnPG+U2OSL3imn0Syx3OM/9wVJ+zcx3SiBVcZY6tevD0jIPm9pBPTM+evYCNmdkhEgnCy18v3KHYJK44tygQa3KRfcul+Hks2ecoEGsCY2s0tbFOg1Qdd9Ioe/2QFfT8UVvPB1nx2yAkgpJ9BAZ54I+NHqYIRyItbj5Ag8LW97GeuUyRWJuYru6QWBybql3mff83KTl/uL5/Z4z76TeWnSyV7ydursSY9FOwN6RB+NEIn97xPdCTac73773x/bqsYfvpF3eUczpcCa0P/g62n2gfEiPfT4wvNbL9xPlSY9pPB3bvh6UPqXrRXQ8POBmDPUa5qGNpQUY3UqxeJ5BTvgzCVlnZRuUlYLxSxTR+DrxP4+y10sKI/FA17mZBmL8G5lwKSG20jxH5NvNI46qNOWWT2SkKfeRd0igrb2sb062LHqpgjNYXvVbL5IF6nLFQ10q1pNxBqc0Zu1qpntSASTBGo6PXqlmpg1NPut0fW6qYxs9gummcvW4Ah6RGPgBFD4YrITXMm80XLQneUvBM89IJSg+1UfmGaAEXg+NExWoQfCXkv5J+AhiVizjQMMAzAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{x^{5}}{24} - \\frac{x^{3}}{2} + x$$"
      ],
      "text/plain": [
       " 5    3    \n",
       "x    x     \n",
       "── - ── + x\n",
       "24   2     "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1.removeO() * s2.removeO())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "m11, m12, m21, m22 = var(\"m11, m12, m21, m22\")\n",
    "b1, b2 = var(\"b1, b2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGgAAAAyBAMAAABCJ4MDAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyRKt2u93NZpk6rBljAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABoUlEQVRIDe2WsU4CQRRFryws6qqFJiZWUmqDIX4AJGIthT0x/gCx8BeMVnTGzsbCxhC/gMQPkR41aDDYrfNm2RnfcinQyoSXTMLOnZOFG/ZksR1/YKbZi9+xUT+cicFxvYLN2RA5fTKHktJsEcWd+s1luHvBemSZhXLL92heowKEt8nyuM7KDw0TWeg06uKohGeEbx27PAOV5WqL3RRqNFuoNnAFFDvJ8pTKolo4TCFUgT6wxSCVRa38yEEvwCOKwwK5E1SG4NNB6yiMsNY9YJDKELVTyNwzGGClVCKQzlA2TNKe+flLPQSvNQLpbLXnIPmQzGR7aZKUdIZzs5F5NAJTuSw2Zj982r+bgPL9r7Ysxsj+QhwPJiB2mOxlvh45Qbbm0LiUeRF/LoIJMf3LscxW7oUoMhRh+tEZk6XIUIT5Y5wsJaOytDKUR96Pk6VkVJZWhhpyspSMy1JkmIGcLK0omSxFhhnIydKKkslSZKghL0srSiZLkaGGzNVYpJJRWYoMNeR7lIzJ0spwiiwlo7IUGU6TpWT/RZa/enX7zUviN+Imzk8nSiCdAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11} & m_{12}\\\\m_{21} & m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡m₁₁  m₁₂⎤\n",
       "⎢        ⎥\n",
       "⎣m₂₁  m₂₂⎦"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = Matrix([[m11, m12],[m21, m22]]) # Again, note: capital M for to avoid namespace conflict \n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAyBAMAAAC5cHbcAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyu93NmUSrdmazgYEmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA9UlEQVQoFWOQ//+JAQb0/39kEHZxhXEZQlwMGcTgPBAjEcRnLWyACYL5DJwLUPn8Bqj8/QGofA0YF2Iew5y7i6EiEPN/BsQ7MKSDhMB85q8M/BeyVsD5XBMY4hUYdsD5QOv3GyDx+R8wrA9A5m9glWNA4vM8YF+AzGddqwc0C2EeyGBMvgVIEOJfEMur/ywKHySGLE9HPl3ig2n5Upj/wPGhwnASxgfHRwtDvgPU/+D46Gbw3wDlQ+KDwR6YCsDhxw+OD4ZemH5IfDAtgPEh8fEKyEUKb24F7gRkfqaxOcw8kEIG+f//gSQifsCCRPDR0ztafgAA94hWMvfBmrcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1}\\\\b_{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⎤\n",
       "⎢  ⎥\n",
       "⎣b₂⎦"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = Matrix([[b1], [b2]]); b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11}^{2} + m_{12} m_{21} & m_{11} m_{12} + m_{12} m_{22}\\\\m_{11} m_{21} + m_{21} m_{22} & m_{12} m_{21} + m_{22}^{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡    2                               ⎤\n",
       "⎢ m₁₁  + m₁₂⋅m₂₁    m₁₁⋅m₁₂ + m₁₂⋅m₂₂⎥\n",
       "⎢                                    ⎥\n",
       "⎢                                 2  ⎥\n",
       "⎣m₁₁⋅m₂₁ + m₂₁⋅m₂₂   m₁₂⋅m₂₁ + m₂₂   ⎦"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJEAAAAyBAMAAACufiRQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyu93NmUSrdmazgYEmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACoElEQVRIDe2Xv2tTURTHvyZ9aX5UUxTERc2oRaXi4iINNC4uPgcRXN7gIDjp4FIQov+AAemQ0iHg0haqwUHcOjpIJDgqhfwHljYdJOrznHNP8t7Lu3kG08n2woV7z/3209uT1/chOO/vYuKR8v1ZnKrcnBgEp7I4i9OTc5iQEZLzpDoW7t6Z0TFDQq4xOhI+WQlvomslFeej5eHdDS3sDR8EeyVtuUHJtlJSYd92aGpKujA6ISdKSlVH55S0uv1aMoVLle1W5vKn4R9QUq711bTBkjMk54frlfEQSE0/g/cNV+lDfWymYSrJW3a6mFtyh3Jc0acgvY9i+9Ea8CBbw+0SviOzUZWpl1PSgotfqfJMLZqTipLyNXglfABcrwmKfwQKVTMJdbFef16vr9JqHc5utpzpRnNSURI9TlvzTMICQFc7GyFRWe+0gsJetjnVi+ZMxfSp2MFbV0jrwAsUuk74TgHpN/L0HFAv6HahnFSU1HTOQUgn4fSQry3aST3c6QDZNhDJScWQZjrTDSHRxdM7yJVKdtJnLNEF54Bojiv9/+DNK7SmPlGfjzeQflO2k+5/6QAnGsM5riiJFjS444MR+uyoph2X03d4P0gJE1Ixf505uR4KIF2l1tI0425/Qb/71bWnwY4zphIi3XrZChJTaz/bPINKf3XM93f6a2oYZUwlRAqO/2l1RBqvbYehT0fm5GfhvzEn25DtaYa+6Szm5FyiOdmGbM8oKW5OziWbU2zIb2AaSebkXLI5xYZKIthIc3LuL+ZkG8ZIFnOKNdml5l1QjJuTbRgjWcwp1mSXGpLFnGzDGMliTrFmojnVj9LyQZ8s5uRcsjnZhrE7CTdqTt4lmlNsOIY5OZdsTrbhOObk3CEx58F9Kzuwb4p/AMbnOKDCDPxBAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1} m_{11} + b_{2} m_{12}\\\\b_{1} m_{21} + b_{2} m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⋅m₁₁ + b₂⋅m₁₂⎤\n",
       "⎢               ⎥\n",
       "⎣b₁⋅m₂₁ + b₂⋅m₂₂⎦"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKYAAAAMBAMAAAAaIdvMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARImrInYyuxBU793NZplSrWBsAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABpElEQVQoFXWRMUvDUBSFT9Mam8aW0MHFwYC6CoLFxSGDDi62UlxFXEQQdRGdJD9AsJtUQUVwtopugsVBEBydtZtCq7RawS3e+1rfbRQPHHjnS3K4Nw+RgYnZjDk0Aq2/RD/iQ3p0Mp9byDsC/xCjex07M9gDzLWWhQxv+WCH5G7k4p+OdQQsAsbzC6CJSkSX7DKyLp5gvpWUhRhetMwOVZqFK8TekaxjpQoMYhxCODH1dxwc+hgDIqWWNbE9s8nmzu171i0QjzdgfSFKS/UBF1j1hHBiikOAqk+kUxPbiTXYoTlh1ZEqIZFTnWfIOkJU4s4acI5IM67nFMIDKXe2psqwXfR7vpqIdxTCiTuPQdukylPSqQlsmobdqYQL+l21WKHVeQkIASXqpNVomx7X1Z1CMExl7E7RsvS7bgz1NYwKeP024USddDNdFVivnu4UkqRX2CHRN3PAwUOr85GeCWknef/n3oWk0Qv2P+KJ3Mi8PFWJqMgq0YWQtcy74iZbg1+HfWC5uOsLVYmoVqz6kWNrgEQQ1NlCQqfp6wxOg6CDcSL6DdvNpos4TbgRAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$m_{11} m_{22} - m_{12} m_{21}$$"
      ],
      "text/plain": [
       "m₁₁⋅m₂₂ - m₁₂⋅m₂₁"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.det()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVQAAAA1BAMAAADsYw7NAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyZpl2q0Tdu81aHXxQAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAD70lEQVRoBe1aMWgUQRR9MXcXL4mJIEawMQqWYuxTpEgamxyioBZ6SRewsBJBBFHE1tIExSBEsNPW6kCu9gotBYvUcloJCuf/u/N3/87t3sze7mkimebyZt68eTc57j/+Hk71fmAfjPO97zi2vOJwOvFk41l9q+lgDbXsL315+QLmnGdMvLs9tlPfxvq5pdqZT056HoJIYwdO6TUPqyvPMfv28Dw6tdYR3MrjxMkV6fXjcEr7WMUbrGF6AV+r3RncdB6fi2Ck0YZT2svqHF5gtQaMt4DFXE6cZJFuE9Mh7WO10qV7vX8IuLGE6q7z9DyESJqsuqR9rE5tYxcXz6K6A1xv5HHi5Io0fQCc0j5W5cCrV+arjy8JKve1Dad0Hqsfe63p3u9yLRq1jZ8LTunYaq/w6FrvovotGE3MFpbukXRs1Tpn78EDq6P4nxzc6mhv1cpjFjRn372z+WDzdWTEgtG8/YfFs2DItiYtSJz4A6DyGCYbEJhMfvdO4GRjC0ygBRgY5DcqZZlDbaO4p7exSjgUJ106tqryWO10AwITya9yrYVfeAgm0IJAzm8U4zKH8Hgb8QTyNlIJt8lktnRsVaIel+PpBgSa5Df1hcZnTD6tHcWHgEALAoP8Rtsyh9rG8gbyNlLxlVZWVR5jqwLHWyqejTXrnUq3GbwXWhDI+W2QVeGxLvEE8jaWD4ZMMidVOraq8xjRI5hIfqt0IxOd+cAqLQjk/DbIqvCMVYG8jVTCIZPMSZWOreo8RnSByeT3HjNLlVcNtsoLAjkaDrIqPGNVIG1jlXDIZKZ0bFW28JksaUZ68iMCLQgnyG+DrArRWDWQtykVM5sp3W+V8ljt5SMRR2ryYwItCInzG20TmPnK2xSPtymVcFu2dL/VzIP+9cJ/aDW9zha66LySvreq6ixX1TKGSHKp9ZH0tarqLJe+MoZIUqn1kvS1quqs/iorZDnurHhJeltVdVZ96xayKpLJL/JMSV+rus6WZDWSLNmqrrMlWRVJqzwWvlUR4EJYklWRHJVVKoS67EbHFfjDquSZSr6f1UyBv7cQWI06NsUbNl3bejlNIFbdb7dq38TexAe3Oor/y769VStCWtBcldWisWDffVrrFgzp1qQFjWTyVq0IKbBQM0g1eIZvArHbpFUrQgrs6MeA7o6NuYXwRdOHbwL1W5VUKmU5+RjQt2OTsIpSmkApVq0IKXC8NXwzSDd4KO4JxGKeJlBoVT9ktyJkBKkxEz+rc3Zskreq6WRVYL4mEMAP2fVPF6wIKbBQM0g1ePhzJTBfEwjgny6kDtJUqbSUZhDrkawZOZtAsq3/1YqQZTSDijWB+i3u7Zk/zItxqrKNIcYAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{m_{22}}{m_{11} m_{22} - m_{12} m_{21}} & - \\frac{m_{12}}{m_{11} m_{22} - m_{12} m_{21}}\\\\- \\frac{m_{21}}{m_{11} m_{22} - m_{12} m_{21}} & \\frac{m_{11}}{m_{11} m_{22} - m_{12} m_{21}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡       m₂₂               -m₁₂       ⎤\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎢m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎥\n",
       "⎢                                    ⎥\n",
       "⎢      -m₂₁                m₁₁       ⎥\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎣m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎦"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.inv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAUBAMAAADYerbFAAAAKlBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADmU0mKAAAADXRSTlMAds0yiUTdEFTvq2aZojEYFgAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAHlJREFUKBVjEFJmIAQ2pTK4ElIDlHdFVsUxHYuOzgJUVVVe1zFUsS9Zi6aKgRtTFQPD3kGuqkgJBICBO1hdzwgM1VoFtPCXRQtVnpWXTjOwpaOqOjVXZwNqbIPl21FVgXkoaQIs4kCMKnYBYlRxY1EEdJcY4RQtlAoANlUsX3ws1XEAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ -1, \\quad 1\\right ]$$"
      ],
      "text/plain": [
       "[-1, 1]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjEAAABLCAMAAAC2lyZIAAAAPFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo1xBWAAAAE3RSTlMAMquZdlQiEEDpMETNu2aJ791shm4DjAAAAAlwSFlzAAAOxAAADsQBlSsOGwAACQZJREFUeAHtndvWoygQhYmHOD1JNBnf/10HwSoRBas4KL2SXDTob1Ef2x1DENPiNqpXJeivQYfk+JcOYR2ZA0a3aSUK2EyoFzt7wtwgx22sG/lqGSwfxrFnHVoiE/T9SrZ0ufvJJtUoxG28Q8+o5ZN64InHlcgE3b+SLXHuNsgxtxqkKKcskQnUuZItde4wx/Q9aFFOWSITqHMlW+rcYY6pb6BFOWWJTKDOlWypc4c5JvFHIwgbVZbIBB26ki117jDHpBt+g6bxZYlM0Ksr2VLnDnLMnTN1A6plLktkgi5fyZY8d5Bj2ga0KKcskQnUuZItee4gxwwP0KKcskQmUOdKtuS5gxzz6kCLFOW9Meb3gxtMzJQCCfsSx3aPYonMvT03QY5JO5iqklyxSmQCy8SxxemTPHeIY7oXSJGivCf5+lciE6gTxxanT/rcIY55DKBFirLm3AF1JiyRCWDj2OL0SZ87xDGsu9wgm6vs1GXz2XfiFqNNeqZoJOxxFJvSJ5wlPrewkoc4pnLf6m7f3EHxoC4x72l0F3PpcjPxkYRiikZCxyxs57PE5xaWECGOcQ2mumqoRqZj9CVGPIeqcfsQtXdXHEwhSGK+7MUiIezMdglLfG773IQ4xjNU7bmOGfRd8OhJZDcTG0lopmgkdMzCdj5LfG5hCRHgGN+CC64k8yXGpkKxqRUPExdpvsREIyG6wXY6S4LcthABjvEtuOBK0swLbaq+b2Juy3uYuEhiZopFQscYbKezJMgtLCECHOM7s0RJHjBpB8OPaWbyPsJeFJtc8TARkYTNFIuE7Abb6SwJcgtLiADHLB+NKApWaJI077mNZnVL8wX+webIFQ8TDUnsM0UgIbvBdjpLqtxiESLAMb7zSpLk3jXz5WTdVM1foQ6nZd0Q7FUlCUk4mCKQEMJgO50lVW6xCMF3jHfBBU0S0Y3qRkMPl5hKvReG4I8lHxMRyWaKRULDmGxnsyTILWwh+I7xLrigSqIt+4HJG/0pVXO/muNZ8TFRkea3ETDFIu2ync1i6hKYW9hC8B3jXXBBxbqP8vmVHid59cMsH+NTFwUnVXxMVCQ58jaZYpGQ22Q7myVBbmELwXeMd8FFQ71MTJPD8HaWX5MmrP4dPOvrYyIjiRVTLBI6xmQ7myVB7s254TvGGEyhKnOlrt7jsyY9y3Qbh1a7V8Xe66Gq4TPKbvZ4283EQJLPhppMkUgIvbCdz5Iit7TM6twcOaay18LELbhAHcXz/Qx1SIlMS8esWqheEfogQZbch46xrxhxCy6wM6KdRg1hr6pAJmdPQvWK0AdZsuQ+cgxkxyEGf8GFOWCH5mT5wiaNnawqNlAQE3SAwZZcn7y5iY5Zzsmy4ALEOSodihyFHf69RCaA5rCl1idzbqJj3vhFeBlMgTpHZWpFIF+JTCFsqfXh6BKQ2+uYrqn1rGyv52gnPfhzJgFUIPxOWSLTBpOlV1p9RO7cXscM4vFWavQfXcpfJ+KPV9MqUiLT1jEcvdLqI1jnKiC3zzH3VtTqktLLya1ZFWPBxUYnx44AKkdLcneJTBtanl5J9RHZc0+O+efPv7rT3dN43YScLxnne4XNOP9iDC64sI6VDWwf3RtUc5+3KnDxn3HcproR397hY6IgiRxMhmpPrdNWrx15crBIvTLn/u+P73fwWpj0b8d5DoQ/jBFp30NyImee+SuIyfa1hKTrlVif3Ll9n0pyzgQuDOou3aQL/6tSaseUyLRxDEev1I7JnNvrmG5sxfy1ev6yZC642Mjk2JFWkRKZdjrO0CutPpIlb26vYx6juMPVVX9ZCukdN6YbfR99lzD5kXYMI2+bqb2UvlOOMVIcs+TLPWF4HTMtI59Z50fXzAUXRi+8VaYi8pNvWQax0/AlTH6kPUo92qLoxdXnkIVxrri5ZU/9jlmkmFfmmgsulj9Cravr12vzM5weqv0A0dLualOYXBlgvSigY+kKoCFhM3tsrqadLGI/4kienLnpjnnowb934NtN4+TtYt3OKbYjAMZOKL+jQmByZXAyuQLwLomDxd69w+Zq2skiHBFHLDlz0x3TqcUJd3u1zEoovSTqDdPDq7/tbjgCOvebbtUMgcmRYdXMasMRQEXCtnbYHE1jyLayH3HIkjG3ZKR+Kgk1HG299n6rK1BFf4bEEQBjp62E1p5jJkcGqx1j0xFARsKmtmyOpjFiW9mPOGbJl1sykh3znO4T6J/u2HZN73mq0V4F08Ouw5b97IAlVNWOmdgZ2AEWEm5u2fhN8yN0+qy5yY5Rj4ZQVkF9YE4WxTuosAOwPSoTOwM7AJGw4mLjN82PyJqb7Jh+evzMO/DVYj24PxzEDsCTIm/sk5jYGdgBCxLWHGz8pvkRLl34Le1FkB1zkzclO9/U2qzVB24soHYHFXbA0h6RiZ2BHbAgYc3Bxm+aHyEfitg9V/yW9iLIjunGSjyOF8fUx4egqKrCDjDCaUzsDOwAAwmr+2z8pvkRQj4QvHeu+C3tRpAdMz1NCb/2grJsKg3XMOyAVUoKEzsDO2CFhBt7bPym+RETQM7cdMe8RlFt5nNRH11RD63dcS279dedTXbAug0CEzsDO2CNhFs7bPym+REqf87cdMcM4+FvEd/UdA3jJxDZAXg+dOWYiZ2BHWAh4eaWjd80P8KlC78lVwTdMf3YHnxVun+GYairg6NQUrkEkxtgxKrqIRM7AzvARsLtDRu/aX7EnD1nbrpjbiOuZUJV1pWnXoRJdww7YJ1vWj14wMTOwA6wkXB7w8Zvmh8xZ8+Zm+4YuVCVeL8HRctfKZEJen0lW8bcDMd8gn9CCjRMX5bIBL28ki1jboZjXtzpf5AuY1kiE3T3SraMuRmOGejLGEC07GWJTNDpK9ky5mY4pvUujgGdzi1LZAIFrmTLmJvhmI4xMweq5S5LZII+X8mWMTfDMaDEr/xqBX6O+erTH9D5n2MCRPvqkJ9jvvr0B3T+55gA0b465OeYrz79AZ3/OSZAtK8O+Tnmq09/QOd/jgkQ7atDfo756tMf0HntGLUUivvYSEC2X8hfrcBHL5mTDys06hX+/3r+1TL84MkK9Noo4n8KaI/15uFY5wAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left [ - i \\sqrt{- \\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad i \\sqrt{- \\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad - \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}\\right ]$$"
      ],
      "text/plain": [
       "⎡       __________        __________       ________      ________⎤\n",
       "⎢      ╱   1   √5        ╱   1   √5       ╱ 1   √5      ╱ 1   √5 ⎥\n",
       "⎢-ⅈ⋅  ╱  - ─ + ── , ⅈ⋅  ╱  - ─ + ── , -  ╱  ─ + ── ,   ╱  ─ + ── ⎥\n",
       "⎣   ╲╱     2   2      ╲╱     2   2     ╲╱   2   2    ╲╱   2   2  ⎦"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**4 - x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAH4AAAAVBAMAAAByPkciAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAZpkQzYndq1TvMrsiRHaZuvfyAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABsklEQVQ4EaWUvUvDUBTFT/JsWmhaXRycpOAs2YpLGwRx7SC4FcXBRUoHFxcJODm1oJODBFeHujkIfvwBgmsXGypSXPyq4uLgvS+vbZKmFOoZbnPveT/ezbuvAaDlMJnOnpgTK5PRRDVdCtr7JHx5lljdBpDYoBBR6ihSiKZTjthRaAyfX+9GgUg+B6yN5qGN4y+BmuW3HrP/eP4HaDkBvtC5f/aoR6MqG43Zv7AIU57KNq0Qn8R7SNTpOWlTXtIqBv1iiQPNZLj/UhNZnpQ4pmB+Aw3PH92hSwdhJbqZWzKUhnnTWUD6ouebtH+jBCwD5zQHiIDHa4Z5gVNMe+yxVP9IVtQlCnjsD/PIdNFw2ZOi86s5wColSdlVwKNaDK/beCFH6QqYt/z35/mlrDdkrZ4Zy6eroKH3pO5PnXLmW84N7thT55+l8y/aXOhLr2Y+OJHnD8MRJz4q+fxrITfDrj9/fe8rB2OLC32J/favTHj+EOWOG+ClEQ0HkYJuRwrq/vFLxKkUKu6i+BAqUCKv/qj/v/BCyzdxHco50W0KGPH90dgb6LHtDhL11JQdpf7z/fsDFeVnZQdxT5sAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left \\{ x : 1, \\quad y : 0\\right \\}$$"
      ],
      "text/plain": [
       "{x: 1, y: 0}"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - 1, x - y - 1], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOAAAAAmBAMAAAAvsop7AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAZrsyIs3dRBDvmatUdomwWowxAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADqElEQVRYCc2XT0hUQRzHv67P3eeuu+pFiIgW+3OJYKHoWHsIoboswUrQQSOCyjIPHfIg7jGV2jKLIorFCEKx9pCdEvcQYUG0YJAKwnYIQtA1ipK0bP699b2ZeW/3INEcZub3me/v932zb2ffWwCo2kG6f9C2dnETo1VM7J5HF2ZT9pjNI/PTCpOB8XTsrsyAxfkYEF7lC31RVRAYQptCjQvYpUAZdMdrlmWGlpwvQeAR2gHPUmxwdH0NGHYAGvgLeKlACZg3EYxKDOhEKEdg3RpbGVTW2UVcVLDuymRRcAX+vAZy9IsN9+V1Eg/C/KZg3ZXJotoo0jEN5IhbaQzNP6hbltMILN/SBbxXVATy5m64hlDilZz4ldwFmclxOofxurhE6xuAHGWuhtiLpmyBSuxtFOYje6yb+/JVHRF5IZhFP/uc3Q0H5vdPdMl5kU/bZKTE5sT0sY8KXWrMM+ZuqKRsDvhPDd9tzu5oFb7D1TIFN92QH3931000PE5d2A+cOf+8Z5FG/iztHc3b8NoYDPZ46HAk6YNiinB/lHTX0ZQ/Q0b0JWjvaN6GhW6El4nevO1I0gd9GcBg2/yCYuqyXgRPQyP3GL6oS6aCjfPAmxzFKTTbV+vXaaPkczJ5Lpk8SaeM0c3Ym4kHqM9vkJLITLIWI0sb1RAewsBOrv69kSTNPHeIwAoO0aqVtdcZYHsX1VarTyOrhLdhMIFZS1l2DN8iEvLIBKbIjZ9x0Xsb+rLY45Ko4t4GwkzyYQbWfMsGDSr4lqYTjkLBbIA8tir8lu5mqQ+JemJmrpEF5c+h/ywTWp05MfedzSs5h/ydgf/AWQX4aI40xyxS+kj7h9kL7JS1IEZyF21NiGyE7Meqxq10hgOI/LRyroqJmUWxi8wL1gIbx5Gm0GqWyIrZWKrmbvgEuOfIIUEwhdob5HLzjoVT5O3A1oTIRsi0VM3d8A4wGXdmobYdIXK7qpy4Zy5mB0JkR0CpmrthWwqTjkKkQs0KQu6nVVhoRaVq7oYk/VJK1LANfnpmyzWtiFfzMgzo3kJ7C+XcyLpOJKp5GWoOJFDJWdOKRDUvwxHNXoIZDZSRViSqccNWOYXG4YyGzmmYgnQiUU38WeCPCynxLYy4hFCXwWGZKbFWJKpF+I9giP9rc6RWFxCOOwgJDgIfZKbEOpFVrZjj8i0nlLSWpYUXMjQ6l0bbZSjHWpGoduC0pb5iTUpj2/r6j1IgJjXk9aFdhnKsFYlq+6j4L0mzDCaVVUcUAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left \\{ x : \\frac{a}{2} + \\frac{c}{2}, \\quad y : \\frac{a}{2} - \\frac{c}{2}\\right \\}$$"
      ],
      "text/plain": [
       "⎧   a   c     a   c⎫\n",
       "⎨x: ─ + ─, y: ─ - ─⎬\n",
       "⎩   2   2     2   2⎭"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - a, x - y - c], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, N, t = var(\"r_m N t\",real = True) # the real bit is not really necessary here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = Function('N')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKwAAAArBAMAAAAXqn6LAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yRHaribtU792ZImZu+f8wAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC3klEQVRIDa1WTWgTQRT+Nt24TZs/ior0Yki9iZCLIII0ID1UheZSKehhe8hRSAVvHorgRdQseBFEFAXxoJiTnrRB8Odk40U8FBs8CYpGKNiCUt+b2W1248za7u6D2Xnz3vd9mdmdmTwgjh15FIet527oUzEy5s8YZD3VaulzMTKpdgyyjrpyYdLR5aLHzcdoFqPTdczxLl7qcjHiy0U8i0HXUR/CWNPloseNX8j0otN1TGMDu0q3ddno8cv4ajei0j8xMdNR0PfOHqtXB+J6tADObVaRWXpQhLEoxucG6MHh9tFNkkvRZk/RPEc7GAvqDI62izZv/gEsYn+jdofcmquU8Ry/shbtB7Fv7f4NTJPznBqdJeMu9WxKWS1acvrPLJaABSDXohifpQNuTimrRQNT81OzftkfXbSBdBvm2/VXwMVwWQ0aaFxyrvRlp1FooQEMd2ndPYp/DpPVojHkPMXxvuwCrDWzSpvAAbIlit9yc8qXoECPldkmjOC10UZunTfCSJWkadaYZFmrXD54r1y22febGi0QwWuDlJorFGfZ/dSkLPXebAubnlFQi5ZLzb87fDZ9ugKYDjDzhgj8EmZgACdpwObJypF86tE0L/rJ/InuyHzaptUWSZEvU/5k53Ej/JPp0cBqBXh/BoVqlvRHSTHfo4fVBl4bNYCnzqaarR7trrKOo7zufU9ekIJNzWwBH7+TM0GNTSEbgpYc3MccVofcgej48JIZJC9MIetmuBtEy1Suhzq+8MbaMr5qyLauGqMoA/z8t7AbREusaeMQPtBV0LfhjvDVFyMVdu78XEIoui9Kq18Uo2v+mOdTYRfc7aFojyV78TeSl3MOZkCFnTjYvnAI2ocKd6mwEwc7HLXDLBd2p5pXazuk/QcuCzv6P0rWxkVhl3httywKu8RrO1HYBS/pBF6HLOzMHnynLglZUdhZpUwlATGfhCjssvYeXygJVxR2uetdtdZfq8fORrMhTw4AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$- r_{m} N{\\left (t \\right )} + \\frac{d}{d t} N{\\left (t \\right )}$$"
      ],
      "text/plain": [
       "           d       \n",
       "-rₘ⋅N(t) + ──(N(t))\n",
       "           dt      "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t) - r_m*N(t); dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYBAMAAADJzkisAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdrtEVN3vqxDNIomZZjLe39VDAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACRklEQVQ4EaVUS2gTURQ96UzS6UwaxwqKCyE7wU2DqNuOgiurZqkVSXcu225cSIWxouIHWlAUQWRwayVdtiAaFRX/EQURKs7CpWBphIIf9Nw7+Y1JtJgD771zz71z5v1mgC7RF3ZpAEx37YDd/2nx7u2GIHp09uDLmMcticwgprUN3lSSuWrikowDv3IwC0d8WFmVj2kf76yByeP2XE2zT2RrFN+UDVLo89kCIBngLFqxvgzzUbmu97o1mhkVZuyik0OyyLaftJ6XrGLqAIdXQRSwT4Ws3rv46Q4S4+cYOyd/ANtIRtieANYoxzgu+4x3NLQi6c6ZlLcHaVeWl0YBmAfsPINDbBfZYkh/lfBzQ9tK2huewgNkJkLyND6WUQISJRj3l+8BtynGUBRzyIyJ82uf6pjEMPKeUq5hTR6cTk+ZJ7pE7b3qC1cF14TfdVVBJsudG8FNjc5gHSaCKDEPp2LkeBgeZzRDreXCFUKtzDzPA6c9K36ZJFWCvSwHkhKbOZIvojZjzJfIh0GLo683aSRKHXxqcJaRWEyztVpwu7nGUC1WhP8BwwOGnlGUhQzBArZrRbQXV4TrjeBEZRbfNRnvHJ9PV6jJdi5gX207m6qKLgMeu1jw1BNNKaVJ9v1L7JwS8NhitUwpBvMnMOxHFhthRYfaqJgaO8xgnE3eceMDyfVGtsoubJ7MVSsSL6SkE+SCExat2kNe8nfIZ0a0+cyiBMx/WvQEWtruY9eE/XDFrZp1Gqq/nC2d8qvR9cfXH6ymtKnmN/kcfxP0Mc0QAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$N{\\left (t \\right )} = C_{1} e^{r_{m} t}$$"
      ],
      "text/plain": [
       "           rₘ⋅t\n",
       "N(t) = C₁⋅ℯ    "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyEq_sol = dsolve(dN_dt); MyEq_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8799d46390>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy  import integrate\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "\n",
    "# initial conditions\n",
    "N_0 = 0.1\n",
    "\n",
    "# The time vector\n",
    "t_vec = sc.arange(0, 10., 0.01)\n",
    "\n",
    "def exp_pop(N, t, r_m):\n",
    "    \"\"\"The right-hand side of the exponential growth ODE\"\"\"\n",
    "    return r_m*N\n",
    "\n",
    "N_vec = integrate.odeint(exp_pop, N_0, t_vec, args=(r_m,)) # the comma is needed!\n",
    "\n",
    "# plot the numerical solution\n",
    "p.plot(t_vec, N_vec)\n",
    "p.xlabel('Time') ; p.ylabel('$N$') \n",
    "\n",
    "# plot analytical solution\n",
    "p.plot(t_vec, N_0 * sc.exp(r_m * t_vec),'k--')\n",
    "p.legend(['numerical approximation', 'analytical solution'], loc='best') # draw legend\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00, -1.00501671e-03, -2.02013400e-03, ...,\n",
       "        -2.13744854e+03, -2.15893125e+03, -2.18062988e+03],\n",
       "       [ 1.00502283e-03,  6.11819401e-09, -1.01511118e-03, ...,\n",
       "        -2.13744753e+03, -2.15893025e+03, -2.18062887e+03],\n",
       "       [ 2.02014197e-03,  1.01512526e-03,  7.96376975e-09, ...,\n",
       "        -2.13744651e+03, -2.15892923e+03, -2.18062786e+03],\n",
       "       ...,\n",
       "       [ 2.13744963e+03,  2.13744863e+03,  2.13744761e+03, ...,\n",
       "         1.09563845e-03, -2.14816243e+01, -4.31802491e+01],\n",
       "       [ 2.15893236e+03,  2.15893136e+03,  2.15893034e+03, ...,\n",
       "         2.14838268e+01,  1.10688877e-03, -2.16975180e+01],\n",
       "       [ 2.18063100e+03,  2.18062999e+03,  2.18062898e+03, ...,\n",
       "         4.31824631e+01,  2.16997432e+01,  1.11834951e-03]])"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_vec - N_0 * sc.exp(r_m * t_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, K, N, t = var(\"r_m K N t\",real = True) # the real bit is not really necessary here\n",
    "\n",
    "N = Function('N')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$- r_{m} \\left(1 - \\frac{1}{K} N{\\left (t \\right )}\\right) N{\\left (t \\right )} + \\frac{d}{d t} N{\\left (t \\right )}$$"
      ],
      "text/plain": [
       "     ⎛    N(t)⎞        d       \n",
       "- rₘ⋅⎜1 - ────⎟⋅N(t) + ──(N(t))\n",
       "     ⎝     K  ⎠        dt      "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t) - r_m * N(t) * (1 - N(t) / K); dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMMAAAAwBAMAAABeV9MuAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdrtEVN3vqxDNIomZZjLe39VDAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEnElEQVRYCbVXW2hcRRj+Nns2e3Y3e2l9qJVqzoOoFCRLaUHwYTeCfamaRR/UhpIIBRXUbHwQL9UeI15bSbwgLER78EXFSrYPaivFbGulNMG61uIFEroF0QcfGhNF26TGb+ZcOCe7wTlu/GFmvv+f+f5vzpnZmbPAf7X09dMRS5CjPdciMW8KuLaWfA36dXbK74D3rBbZ32kRCxOayANnbMKj0HICxYN8fS7oh/b6yThvs+7DFRJ0BJNopaCv4EX2Xiwjvmw/fuQvMl6SLH1hpC6BkEg/3fukdJD8crxhoxB1dgzQNtuEmCHbuMnQwhHbkRKF/F2yB0gUHRCiKVSBs874LDGQ+cQEUpejf8uokHh/vYSiyloeVAaTeexzaTFK6HXETM62hruZ44nKW5VKHcNeup89pA4OICPnLhhdBqcPKZEtos8SMbncj3A9Tsye3tHABl1GRY+yXcSMHKsf2mRhF/TPbIkLFjprokNIJOe4OBuxW6viGKcQ0qKLkT8kZZuVrCK155ApJVIDU9i+JDqERNRg9Yxe6srjl2sIw1nqt9zXRVL03djfcKhiLTyTL0p4Ja0W07xwCJC4jIkxjo8/vO4Hh5bpPuFL4Ero5Ug+fpWvQxlmDXSI3Zktr0JJrhJXDxdyiP4pJLxtpc5VHDnZAAZMLjElcoqckMMGOL6b6SNj2G+F5HrDPxJIszzfD/RTy8OIDMyzd9Ns3d+jgNcv56EN3G9CN+Ro56RUYKoP6WHqhMli8UVbeBlrbtFbLsnzRh4PfYRrv5ap5/jz38qZ72Q5xV/v4Jo/RRe4Vw7zBCsxtbgv3/gfJM7VUeNmrCF6fP4YcHTNJbYiWwL3ewe3ojbH9D8KiVRFWk3gtu0wUgvRPDdTkTfNGNPd2nbKlQlqSM6L26NTyFQJLqwc0bbPrD0HHYlRyjRLZJfbsDneU0WgMM3M4kUVoAPb6LhrURa4XUuZzL7ALGK5j+AOZ7nbTevnx+ik+TRI1YCTeg4Qj9TSzuyp2pfZlvkiDtzQckyL4MjQLkbLLNES8O4sgf1J2Tz2gxxGBmU4PYhkq9My0WhmBSLiAKHplGplSb7NtCF74gZ6JRBT89moD7eE9lfSqseg2NCZnGR25iJ5CYxgon/9RXVYkrDaYd5t8glZaKM33ShbGGy+P7vBsr2D9562gVdvNz0ogXMlbQ5GPe9OGz3Opu/m123HYPPtQsx+JOBNO+rW+lN7TRc7rbxY09aKqOsuSvDrA2wm64WG9Awe0M+ycuySC9z2nOkipbafo14F7mEzjliZ32yVyoOVtxG314fhzCCrgIWQ2LduCsdJrtoSv0OzJ2ww1tkAZm6f+elzRMqv0PebukR0Jz5ErC7/XvApMsz/kMxksJ5g6R3rLO5AV45TCJi6xAtFnXvl0+kryafEx0uWNlQTuQyWLSzxxvP4ApnhBrHf1CUe++Zq02WKtfDMcFAMt6FUtB3dvswawlOXEJ+yjp1fKrqQreHgF/m/eNhyHF+jLrHoYwWgFfCaHXWJfn48NPMVIuoSG6FPKSRsHtJtNsdaRyJfiUM+vJ0cGq+HZ4Vn/AOGDUQmstbH5wAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$N{\\left (t \\right )} = \\frac{K e^{C_{1} K + r_{m} t}}{e^{C_{1} K + r_{m} t} - 1}$$"
      ],
      "text/plain": [
       "           C₁⋅K + rₘ⋅t \n",
       "        K⋅ℯ            \n",
       "N(t) = ────────────────\n",
       "        C₁⋅K + rₘ⋅t    \n",
       "       ℯ            - 1"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyEq_sol = dsolve(dN_dt); MyEq_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8799491d68>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy  import integrate\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "K = 10.\n",
    "# initial condition\n",
    "N_0 = 0.1\n",
    "\n",
    "#The time vector \n",
    "t_vec = sc.arange(0, 10., 0.01)\n",
    "\n",
    "def log_pop(N, t, r_m, K):\n",
    "    \"\"\"The right-hand side of the logistic ODE\"\"\"\n",
    "    return r_m*N*(1-N/K)\n",
    "\n",
    "N_vec = integrate.odeint(log_pop, N_0, t_vec, args=(r_m, K));\n",
    "\n",
    "p.plot(t_vec, N_vec) # plot the solution\n",
    "p.xlabel('Time') ; p.ylabel('$N$') \n",
    "\n",
    "# plot analytical solution\n",
    "p.plot(t_vec, K * N_0 * sc.exp(r_m * t_vec)/(K + N_0 * (sc.exp(r_m * t_vec) - 1.)),'k--')\n",
    "p.legend(['numerical approximation', 'analytical solution'], loc='best') # draw legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, a, e, z, K, N, C, t = var(\"r_m, a, e, z, K, N, C, t\",real = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( C N a e - C z, \\quad - C N a + N r_{m} \\left(1 - \\frac{N}{K}\\right)\\right )$$"
      ],
      "text/plain": [
       "⎛                             ⎛    N⎞⎞\n",
       "⎜C⋅N⋅a⋅e - C⋅z, -C⋅N⋅a + N⋅rₘ⋅⎜1 - ─⎟⎟\n",
       "⎝                             ⎝    K⎠⎠"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = r_m * N *(1-N/K) - a * N * C\n",
    "dC_dt = e * a * N * C - z * C\n",
    "\n",
    "dC_dt, dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( - C N a + N r_{m} \\left(1 - \\frac{N}{K}\\right) = 0, \\quad C N a e - C z = 0\\right )$$"
      ],
      "text/plain": [
       "⎛              ⎛    N⎞                       ⎞\n",
       "⎜-C⋅N⋅a + N⋅rₘ⋅⎜1 - ─⎟ = 0, C⋅N⋅a⋅e - C⋅z = 0⎟\n",
       "⎝              ⎝    K⎠                       ⎠"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_eqlb = Eq(dN_dt, 0)\n",
    "C_eqlb = Eq(dC_dt, 0)\n",
    "N_eqlb, C_eqlb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( \\left [ \\frac{r_{m} \\left(K - N\\right)}{K a}\\right ], \\quad \\left [ \\frac{z}{a e}\\right ]\\right )$$"
      ],
      "text/plain": [
       "⎛⎡rₘ⋅(K - N)⎤  ⎡ z ⎤⎞\n",
       "⎜⎢──────────⎥, ⎢───⎥⎟\n",
       "⎝⎣   K⋅a    ⎦  ⎣a⋅e⎦⎠"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_eqlb_sol = solve(N_eqlb, C)\n",
    "C_eqlb_sol = solve(C_eqlb, N)\n",
    "\n",
    "N_eqlb_sol, C_eqlb_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import integrate\n",
    "\n",
    "t_vec = sc.arange(0, 100., 0.01)\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "a = 1\n",
    "e = 0.5\n",
    "z = .5\n",
    "K =10\n",
    "\n",
    "# initial condition: this is an array now!\n",
    "N0C0 = sc.array([1., 1.])\n",
    "\n",
    "# the function still receives only `x`, but it will be an array, not a number\n",
    "def LV(NC, t, r_m, K, a, e, z):\n",
    "    # Unlike the esponental and logistic growth model, we now need to convert \n",
    "    # the output to a numpy array as it has two populations.\n",
    "    return sc.array([ r_m * NC[0]*(1-NC[0]/K) - a * NC[0] * NC[1],\n",
    "                   e * a * NC[0] * NC[1] - z * NC[1] ])\n",
    "\n",
    "NC_vec = integrate.odeint(LV, N0C0, t_vec, (r_m, K, a, e, z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 2)\n"
     ]
    }
   ],
   "source": [
    "print(NC_vec.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['seaborn-poster', 'classic', 'seaborn-notebook', 'tableau-colorblind10', 'bmh', 'fast', 'seaborn-dark-palette', 'seaborn-pastel', 'seaborn-darkgrid', 'seaborn-whitegrid', 'Solarize_Light2', 'seaborn-ticks', 'seaborn-white', 'seaborn-dark', 'grayscale', '_classic_test', 'seaborn-deep', 'fivethirtyeight', 'dark_background', 'seaborn-muted', 'seaborn', 'ggplot', 'seaborn-colorblind', 'seaborn-talk', 'seaborn-paper', 'seaborn-bright']\n"
     ]
    }
   ],
   "source": [
    "print(p.style.available)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "p.style.use('seaborn-darkgrid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f87993e5278>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.plot(t_vec, NC_vec)\n",
    "p.xlabel('Time'); p.ylabel('Population size') # and of y-axis\n",
    "p.legend(['Resource ($N$)', 'Consumer ($C$)'], loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial condition: [1. 1.]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f87993305f8>]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.plot(NC_vec[0,0], NC_vec[0,1], 'o')\n",
    "print('Initial condition:', NC_vec[0])\n",
    "\n",
    "p.plot(NC_vec[:,0], NC_vec[:,1])\n",
    "\n",
    "#Another solution with a different initial condition:\n",
    "#NC_vec2 = odeint(LV, [2., 4.], t_vec, (r_m, K, a, e, z))\n",
    "#p.plot(NC_vec2[:,0], NC_vec2[:,1])\n",
    "#p.plot(NC_vec2[0,0], NC_vec2[0,1], 'o')\n",
    "#p.xlabel('Resource Population size'); p.ylabel('Consumer Population size') # and of y-axis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file using_os.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical using subprocess.os"""

__appname__ = 'using_os.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'



# Use the subprocess.os module to get a list of files and directories 
# in your ubuntu home directory
# Hint: look in subprocess.os and/or subprocess.os.path and/or 
# subprocess.os.walk for helpful functions

import subprocess

#################################
#~Get a list of files and 
#~directories in your home/ that start with an uppercase 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithC = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for i in subdir:
        if i[0] == 'C':
            FilesDirsStartingWithC.append(i)
    for j in files:
        if j[0] == 'C':
            FilesDirsStartingWithC.append(j)
  
#################################
# Get files and directories in your home/ that start with either an 
# upper or lower case 'C'

# Type your code here:

# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithCorc = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for i in subdir:
        if (i[0] == 'C') or (i[0] == 'c') :
            FilesDirsStartingWithCorc.append(i)
    for j in files:
        if (j[0] == 'C') or (j[0] == 'c'):
            FilesDirsStartingWithCorc.append(j)


#################################
# Get only directories in your home/ that start with either an upper or 
#~lower case 'C' 

# Type your code here:
# Get the user's home directory.
home = subprocess.os.path.expanduser("~")

# Create a list to store the results.
FilesDirsStartingWithCorc = []

# Use a for loop to walk through the home directory.
for (dir, subdir, files) in subprocess.os.walk(home):
    for i in subdir:
        if (i[0] == 'C') or (i[0] == 'c') :
            FilesDirsStartingWithCorc.append(i)**********************************************************************

Testing using_os.py...

using_os.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 4.49035s

======================================================================
Inspecting script file LV1.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Differentiation and plot of LV model"""

__appname__ = 'LV1.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import scipy as sc
import matplotlib.pylab as p
import scipy.integrate as integrate

def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

r = 1.
a = 0.1 
z = 1.5
e = 0.75
t = sc.linspace(0, 15, 1000)
R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

# open figure object
f1 = p.figure()

p.subplot(2,1,1)
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time', fontsize = 5)
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
#p.show() not to display the figure

# f1.savefig('../Results/LV_model.pdf') #Save figure

# open figure object
# f2 = p.figure()

# Plot
p.subplot(2,1,2)
p.plot(pops[:,0], pops[:,1]  , 'r-')
p.grid()
# p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
# p.show() #not to display the figure

f1.savefig('../Results/LV_model.pdf') #Save figure**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 95.5

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.75060s

======================================================================
Inspecting script file LV5.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical"""

__appname__ = 'LV5.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import matplotlib.pylab as p
import scipy.integrate as integrate
import numpy as np
import scipy.stats



# def dCR_dt(pops, t=0):

#     R = pops[0]
#     C = pops[1]
#     dRdt = r * R * (1 - R/K) - a * R * C 
#     dCdt = -z * C + e * a * R * C
    
#     return sc.array([dRdt, dCdt])

# set default value
r = 1.
a = 0.1
z = 1.5
e = 0.75
K = 30

# take arguments from the command line
if len(sys.argv) > 1:
    r = sys.argv[1]
if len(sys.argv) > 2:
    a = sys.argv[2]
if len(sys.argv) > 3: 
    z = sys.argv[3]
if len(sys.argv) > 4:
    e = sys.argv[4] 
if len(sys.argv) > 5:
    K = sys.argv[5]
t = sc.linspace(0, 30, 30)
R = 10
C = 5 
pops = np.zeros((len(t),2))
for i in range(len(t)):
    R1 = R * (1 + (r + scipy.stats.norm.rvs() ) * (1 - R/K) - a * C)
    C1 = C * (1 - z + scipy.stats.norm.rvs() + e * a * R)
    R = R1
    C = C1
    pops[i,:] = [R1,C1]

# open figure object
f1 = p.figure()

p.subplot(2,1,1)
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('')
p.ylabel('Population density')
# make title include parameters
title = 'r = ' + str(r) + ', a = ' + str(a) + ', z = ' + str(z) + ', e = ' + str(e) + ', K = ' + str(K) + ', t = (' + str(int(min(t))) +','+ str(int(max(t)))+')' 
p.title(title)
#p.show() not to display the figure

# Plot
p.subplot(2,1,2)
p.plot(pops[:,0], pops[:,1]  , 'r-')
p.grid()
# p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
# p.show() #not to display the figure

f1.savefig('../Results/LV5_model.pdf') #Save figure

# print population values 
print(pops[-1,:])**********************************************************************

Testing LV5.py...

LV5.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
[ nan  nan]

**********************************************************************

Code ran without errors

Time consumed = 0.84727s

======================================================================
Inspecting script file DrawFW.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical
Draw food networks"""

__appname__ = 'DrawFW.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import networkx as nx
import scipy as sc
import matplotlib.pyplot as p

def GenRdmAdjList(N = 2, C = 0.5):
    """ 
    """
    Ids = range(N)
    ALst = []
    for i in Ids:
        if sc.random.uniform(0,1,1) < C:
            Lnk = sc.random.choice(Ids,2).tolist()
            if Lnk[0] != Lnk[1]: #avoid self (e.g., cannibalistic) loops
                ALst.append(Lnk)
    return ALst

MaxN = 30
C = 0.75
AdjL = sc.array(GenRdmAdjList(MaxN, C))
Sps = sc.unique(AdjL)
SizRan = ([-10,10]) #use log10 scale
Sizs = sc.random.uniform(SizRan[0],SizRan[1],MaxN)
pos = nx.circular_layout(Sps)
G = nx.Graph()
G.add_nodes_from(Sps)
G.add_edges_from(tuple(AdjL))
NodSizs= 1000 * (Sizs-min(Sizs))/(max(Sizs)-min(Sizs)) 

# open figure object
f1 = p.figure()
nx.draw_networkx(G, pos, node_size = NodSizs)

f1.savefig('../Results/FW.pdf') #Save figure
**********************************************************************

Testing DrawFW.py...

DrawFW.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************

**********************************************************************

Encountered error (or warning):
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:522: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(edge_color) \
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:543: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if cb.is_string_like(edge_color) or len(edge_color) == 1:
/usr/lib/python3/dist-packages/networkx/drawing/nx_pylab.py:724: MatplotlibDeprecationWarning: The is_string_like function was deprecated in version 2.1.
  if not cb.is_string_like(label):

======================================================================
Inspecting script file Nets.R...

File contents are:
**********************************************************************
# python 2 practical
# R version to draw networks

# install igraph
#install.packages('igraph')
library(igraph) # Load the igraph package

rm(list = ls())

# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0

links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)

#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)

#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 

# Generate colors based on partner type:
colrs <- c("blue", "green", "red")
V(net)$color <- colrs[nodes$Type]

# Set node size based on Number of PIs:
#V(net)$size <- V(net)$Pis*0.9

V(net)$size <- 50

# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight

#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"

E(net)$width <- 1+E(net)$weight/10

graphics.off()

svg("../Results/QMEENet.svg",width=7,height=7)

plot(net, edge.curved=0, vertex.label.color="black") 

legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
       col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)

dev.off()
**********************************************************************

Testing Nets.R...

Output (only first 500 characters): 

**********************************************************************
null device 
          1 

**********************************************************************

Encountered error (or warning):
Loading required package: methods

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union


======================================================================
Inspecting script file run_fmr_R.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical
running R script fmr.R on python"""

__appname__ = 'run_fmr_R.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import subprocess

# run fmr.R
subprocess.Popen("Rscript --verbose fmr.R" , shell= True).wait()
**********************************************************************

Testing run_fmr_R.py...

run_fmr_R.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
Reading CSV
Creating graph
null device 
          1 
Finished in R!

**********************************************************************

Encountered error (or warning):
running
  '/usr/lib/R/bin/R --slave --no-restore --file=fmr.R'


======================================================================
Inspecting script file run_LV.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""scripts to run LV1 and LV2 and compare speed"""

__appname__ = 'run_LV.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import os

os.system('python3 -m cProfile LV1.py')
os.system('python3 -m cProfile LV2.py 1 0.2 1.5 0.75 1000')
os.system('python3 -m cProfile LV3.py 1 0.2 1.5 0.75 1000')
**********************************************************************

Testing run_LV.py...

run_LV.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 95.0

Output (only first 500 characters): 

**********************************************************************
         529754 function calls (519860 primitive calls) in 0.738 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
       36    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:1043(__import__)
      684    0.002    0.000    0.002    0.000 <frozen importlib._bootstrap>:119(release)
      405    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:159(__init__)
      405    0.001    0.000    0.004    0.000 <frozen
**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "/usr/lib/python3.5/runpy.py", line 184, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.5/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/usr/lib/python3.5/cProfile.py", line 160, in <module>
    main()
  File "/usr/lib/python3.5/cProfile.py", line 153, in main
    runctx(code, globs, None, options.outfile, options.sort)
  File "/usr/lib/python3.5/cProfile.py", line 20, in runctx
    filename, sort)
  File "/usr/lib/python3.5/profile.py", line 64, in runctx
    prof.runctx(statement, globals, locals)
  File "/usr/lib/python3.5/cProfile.py", line 100, in runctx
    exec(cmd, globals, locals)
  File "LV2.py", line 45, in <module>
    pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)
  File "/usr/lib/python3/dist-packages/scipy/integrate/odepack.py", line 215, in odeint
    ixpr, mxstep, mxhnil, mxordn, mxords)
  File "LV2.py", line 18, in dCR_dt
    dRdt = r * R * (1 - R/K) - a * R * C 
TypeError: 'numpy.float64' object cannot be interpreted as an integer
Traceback (most recent call last):
  File "/usr/lib/python3.5/runpy.py", line 184, in _run_module_as_main
    "__main__", mod_spec)
  File "/usr/lib/python3.5/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/usr/lib/python3.5/cProfile.py", line 160, in <module>
    main()
  File "/usr/lib/python3.5/cProfile.py", line 153, in main
    runctx(code, globs, None, options.outfile, options.sort)
  File "/usr/lib/python3.5/cProfile.py", line 20, in runctx
    filename, sort)
  File "/usr/lib/python3.5/profile.py", line 64, in runctx
    prof.runctx(statement, globals, locals)
  File "/usr/lib/python3.5/cProfile.py", line 100, in runctx
    exec(cmd, globals, locals)
  File "LV3.py", line 47, in <module>
    R1 = R * (1 + r * (1 - R/K) - a * C)
TypeError: unsupported operand type(s) for /: 'int' and 'str'

======================================================================
Inspecting script file LV2.py...

File contents are:
**********************************************************************
#!/usr/bin/env python3

"""Python 2 practical"""

__appname__ = 'LV2.py'
__author__ = 'Wenhua Zhou (wz2812@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import scipy as sc
import matplotlib.pylab as p
import scipy.integrate as integrate

def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R * (1 - R/K) - a * R * C 
    dCdt = -z * C + e * a * R * C
    
    return sc.array([dRdt, dCdt])

# set default value
r = 1.
a = 0.1
z = 1.5
e = 0.75
K = 2000

# take arguments from the command line
if len(sys.argv) > 1:
    r = sys.argv[1]
if len(sys.argv) > 2:
    a = sys.argv[2]
if len(sys.argv) > 3: 
    z = sys.argv[3]
if len(sys.argv) > 4:
    e = sys.argv[4] 
if len(sys.argv) > 5:
    K = sys.argv[5]
t = sc.linspace(0, 15, 1000)
R0 = 10
C0 = 5 
RC0 = sc.array([R0, C0])
pops, infodict = integrate.odeint(dCR_dt, RC0, t, full_output=True)

# open figure object
f1 = p.figure()

p.subplot(2,1,1)
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('')
p.ylabel('Population density')
# make title include parameters
title = 'r = ' + str(r) + ', a = ' + str(a) + ', z = ' + str(z) + ', e = ' + str(e) + ', K = ' + str(K) + ', t = (' + str(int(min(t))) +','+ str(int(max(t)))+')' 
p.title(title)
#p.show() not to display the figure

# Plot
p.subplot(2,1,2)
p.plot(pops[:,0], pops[:,1]  , 'r-')
p.grid()
# p.legend(loc='best')
p.xlabel('Resource density')
p.ylabel('Consumer density')
# p.show() #not to display the figure

f1.savefig('../Results/LV2_model.pdf') #Save figure

# print population values 
print(pops[-1,:])**********************************************************************

Testing LV2.py...

LV2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 94.5

Output (only first 500 characters): 

**********************************************************************
[ 10.72087499  16.94811175]

**********************************************************************

Code ran without errors

Time consumed = 0.74994s

======================================================================
Inspecting script file MyFirstJupyterNb-checkpoint.ipynb...

File contents are:
**********************************************************************
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "bad operand type for unary -: 'str'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-c6eb8077416a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m \u001b[0;34m<\u001b[0m\u001b[0;34m-\u001b[0m \u001b[0;34m\"this is R!\"\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0mcat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m: bad operand type for unary -: 'str'"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing() # for pretty-printing equations etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x')\n",
    "type(x) # check it's class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c = var(\"a, b, c\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.is_imaginary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAJBAMAAAAWSsseAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEHarIkSJZt3NuzJUmW693xMAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABASURBVAgdY2AQUnZVU2BgTGBv4pjAwCbA9pDVgYGRgWsBAwjwKYCpfRuAFI+AHgOTAEPcgXUM7gwMwkpC1wsYABfXCcn8wW65AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x$$"
      ],
      "text/plain": [
       "x"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var('x')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAPBAMAAABgjEDtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA782r3SJ2ZjIQmUS7VIlAnjihAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAwElEQVQYGWNg/GQs72z0hQEVMAYw5BcwNKIKMsxiAIkyo4mGg0XZJqAKR4BFOUCi0Q2c3QFwWaAJ3Iq5j0LXH+A9n8DAuvwxWAooysC4dn4B0wEG/gSGLRO4JUEaQKJMDgwMPGBROQYGMaAgRNQAKsrxq7zcHC66ACrK+xckBARgEx7A1H4DiyFEmQ8wxCcwODEwTIOpZVnAwMAuwHDxJEP/BYaVDAzca+RlVnCf/3OBgeFd2hSRCZxWeROghqBRAGPPN8vbJxBHAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{True}$$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPBAMAAACCUFuUAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvdmc0Qu+8iZlR2iUR1i74cAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA+UlEQVQYGWMQsv/kovo/gQEIhGJBJAzIFzAwSAiAeGxNMDEQPV+BgYFrA1ikCExCCZA42wEGEEAXn8ZwAav4SgaGPWcPgNQznl4TwDBlrSZQGdCcSgZuSwYnkHg6A4MBnxnDiwSgeIvGTwbuRob3CUBxoMABjgsMHEDNQPVAbYxn/ScAxZm/n2SQ91q1aAFYfCUDW/gEeZA429X/Dvshjga5k4HdgEF+GlB8GgPXP3mgIUAAFue/wLB/nkARwxsGBi3mAAa2AwwM8goMDAwcBQz3pRLA9lYy/mZgSWCYYv/dk4GBU+VsTpTQf823a9Y+YEjyuQZUih0AAHGBRtIqn6whAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\mathrm{False}$$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\\\left(x + \\\\pi\\\\right)^{2}'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "latex(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\left(x + \\pi\\right)^{2}\n"
     ]
    }
   ],
   "source": [
    "print(latex(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751058209749445923078164062862\n",
       "08998628034825342117068"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pi.evalf(n=100) # pi to a 100 places after decimal!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$3.1415926535897932384626433832795028841971693993751$$"
      ],
      "text/plain": [
       "3.1415926535897932384626433832795028841971693993751"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(pi, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHUAAAAbBAMAAACw1N2lAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAACIUlEQVQ4EZ2TP0wUURDGv7u9g1t2wcNCC0lcSLT1FSYQEwMaKpo7iguFzQWRgkYsNBgLtiKEYDgTGxso+JOIBduZ0LAkhlCAuUYLqmvsTM5ILlbknJm3b89LToM7ye18b2Z+u3Pz3gOSmTvzOBlI1CG+JGafoZ5PCr/CzSApC2yo5OxCctQtE5vy6PE/9kaKb/PzbicudfKp8ke8rxwt3OXP6OUBO6FTAyajcJu7BvunBOxNdt1VgJX1CE9gFSny7d1bhXSZk8ZsX6u1Cn6xun96zm6lqlWmjHHgmCJ7zSa9kjuIzbD7ARoSTDObukXfZXUgxfdM+XUjxBuWWtQ9C+tmI3ZCirJBxCyRH3l9Y9WXdYsdDiUg7KBhG9+XiJPt4exDmkCYXuguSmnMDrxQMWv5EWs1PLyk7nUtWLvKPXfy7SxyH2LWhWFpPnMK9rykACqxkBnjlVsqTW2XSlWd2VXsued1w/Ls7wTo+6ErmAWu+NHK9NwPFCocI9YKY/Y5sV6LpZ6Beo2fZIZtqhZrf519uuNLB2fyXWdeF/OsbLWGnHQYs1vAokRkzuip6u7rCnOkihF7RDteKeCqXprvDvH+jlJNTs5Vz5hWvaH1HugKoe0jHbzlkWlPrwzrzM4EfIq7zhrTNMTChafV0WkNyNJPrPOZjJKd3bAJt98FS/6kyf3F813Q9sCIy3q5g7q4493/13sy+Tib8mJ5OTFoyn4DlUWJXgDaBIkAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(x + 3.1416\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "(x + 3.1416) "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N(MyFun, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFYAAAAbBAMAAAAUvmV2AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABkUlEQVQ4EY2SPUjDUBDH/2kksSVtg4OOZhHExYA6+1EQ3KoQQfyg4KrSVUGoi4KLblYnd4d2cxGpg92U6uQg6CQ4qYguCvFe7uWriOaGd/f+9+Ny73JAQmtO2glJGGa2mJTVzdxbYraufCVlgfR7clavJGebhCoWHX9a2qR0qkTHcMjN2E/74S2Mbig8wzkwTcERz7nmfodAJBoBcnOHBVFbvX9gduFOfE1YlZ08jQoyrvsKXaQHmW0FRJxVjznRI9w/LOaZ3Y6wt/1rLAY97Lqu+wmIeZFNiEPWLaC3Lq5Bv8Z1tWuLmuxjdV04yQIdZVZlv8+46Hwk5YDVE+ECVhPLdOk4G46z6OXHsjb5Fy9GhKUNNeQy+XPItXSBSTbSQ6YITS6Tz2pWXtQ95bqRt2mAXmTVZ0ftfJ0U+TZvHHs21A8oJQyYcXYHmQYpK6yK8qu1WQubQPfVMovBfKeQbZC0xLL3jyUROr8HVtQye28vQ0hGQzGFdodtPCb/eqGdZIvsui+1+6CcYrWn2u8pOZwfO6dQIT3zDYsAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left(1.5 + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(1.5 + π) "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, 1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFIAAAAbBAMAAAAdVcUMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJMqtHo0JKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABn0lEQVQ4EY2SP0jDQBTGvzS1SWsi59RNugiOHXS19Q/OOgQRkRaF4tChq4vGxUUKnRQnRRFBBd0EUejUqYOri1ZEdBBa6eCgEN/lcucfWsmD3L37vl9e7nIPCBW1qXQoDhbrmw5HGsx+C0meax/hSCDeDksabliyRqCWouGfiDMyI3kahjtRemHyRuoPlFzhGpiRys95FJY67Ahgz+1MiLoKirsiXQKOpWi5SHheCwbfhgpJHgFNaeh7wk4qiieSzKXRVBudF8gGTVpx+UCsJEmrtbR55nleHuB/iGKcnkvW0/IXqibQ+4n67fpQP+mDwlsB9H3Esn9Jo2FXLFbm8rbwToBYG/5lWY4ze+g4Dd8o0BjFI8/vfQFEJrLIBNtX+zTzZN+hxKGApK9nqtjlCoUit6AxLMLvoAvh0YkyFTz5t/tN2lWYTG/Dv6jgRPQLom5k1RLvyZrJeu0ZZgmnXC4Kj0rrL+WBzd9kzvPeEa3glcsLwut8m8ITo+4fK+g8ZehplaqEOkTEmJK6JNR1Ijp2sjT5rEppKb7sHhEmvC+K7lb+N5WoIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun.subs(x, a+pi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFIAAAAbBAMAAAAdVcUMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJMqtHo0JKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABn0lEQVQ4EY2SP0jDQBTGvzS1SWsi59RNugiOHXS19Q/OOgQRkRaF4tChq4vGxUUKnRQnRRFBBd0EUejUqYOri1ZEdBBa6eCgEN/lcucfWsmD3L37vl9e7nIPCBW1qXQoDhbrmw5HGsx+C0meax/hSCDeDksabliyRqCWouGfiDMyI3kahjtRemHyRuoPlFzhGpiRys95FJY67Ahgz+1MiLoKirsiXQKOpWi5SHheCwbfhgpJHgFNaeh7wk4qiieSzKXRVBudF8gGTVpx+UCsJEmrtbR55nleHuB/iGKcnkvW0/IXqibQ+4n67fpQP+mDwlsB9H3Esn9Jo2FXLFbm8rbwToBYG/5lWY4ze+g4Dd8o0BjFI8/vfQFEJrLIBNtX+zTzZN+hxKGApK9nqtjlCoUit6AxLMLvoAvh0YkyFTz5t/tN2lWYTG/Dv6jgRPQLom5k1RLvyZrJeu0ZZgmnXC4Kj0rrL+WBzd9kzvPeEa3glcsLwut8m8ITo+4fK+g8ZehplaqEOkTEmJK6JNR1Ijp2sjT5rEppKb7sHhEmvC+K7lb+N5WoIgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "(a + 2⋅π) "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new = MyFun.subs(x, a+pi); MyFun_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vec = sc.arange(0, 10, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = sc.array([N(MyFun.subs(x, xx)) for xx in x_vec]) #Note: using a list comprehension!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_new_vec = sc.array([N((MyFun_new).subs(a, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9.86960440108936, 10.5079229318073, 11.1662414625253,\n",
       "       11.8445599932432, 12.5428785239612, 13.2611970546792,\n",
       "       13.9995155853971, 14.7578341161151, 15.5361526468330,\n",
       "       16.3344711775510, 17.1527897082689, 17.9911082389869,\n",
       "       18.8494267697049, 19.7277453004228, 20.6260638311408,\n",
       "       21.5443823618587, 22.4827008925767, 23.4410194232947,\n",
       "       24.4193379540126, 25.4176564847306, 26.4359750154485,\n",
       "       27.4742935461665, 28.5326120768845, 29.6109306076024,\n",
       "       30.7092491383204, 31.8275676690383, 32.9658861997563,\n",
       "       34.1242047304742, 35.3025232611922, 36.5008417919102,\n",
       "       37.7191603226281, 38.9574788533461, 40.2157973840640,\n",
       "       41.4941159147820, 42.7924344455000, 44.1107529762179,\n",
       "       45.4490715069359, 46.8073900376538, 48.1857085683718,\n",
       "       49.5840270990898, 51.0023456298077, 52.4406641605257,\n",
       "       53.8989826912436, 55.3773012219616, 56.8756197526795,\n",
       "       58.3939382833975, 59.9322568141154, 61.4905753448334,\n",
       "       63.0688938755514, 64.6672124062693, 66.2855309369873,\n",
       "       67.9238494677052, 69.5821679984232, 71.2604865291412,\n",
       "       72.9588050598591, 74.6771235905771, 76.4154421212950,\n",
       "       78.1737606520130, 79.9520791827310, 81.7503977134489,\n",
       "       83.5687162441669, 85.4070347748848, 87.2653533056028,\n",
       "       89.1436718363208, 91.0419903670387, 92.9603088977567,\n",
       "       94.8986274284746, 96.8569459591926, 98.8352644899106,\n",
       "       100.833583020629, 102.851901551346, 104.890220082064,\n",
       "       106.948538612782, 109.026857143500, 111.125175674218,\n",
       "       113.243494204936, 115.381812735654, 117.540131266372,\n",
       "       119.718449797090, 121.916768327808, 124.135086858526,\n",
       "       126.373405389244, 128.631723919962, 130.910042450680,\n",
       "       133.208360981398, 135.526679512116, 137.864998042834,\n",
       "       140.223316573552, 142.601635104270, 144.999953634988,\n",
       "       147.418272165706, 149.856590696424, 152.314909227142,\n",
       "       154.793227757860, 157.291546288577, 159.809864819295,\n",
       "       162.348183350013, 164.906501880731, 167.484820411449,\n",
       "       170.083138942167], dtype=object)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([39.4784176043574, 40.7450546657934, 42.0316917272293,\n",
       "       43.3383287886652, 44.6649658501011, 46.0116029115370,\n",
       "       47.3782399729729, 48.7648770344089, 50.1715140958448,\n",
       "       51.5981511572807, 53.0447882187166, 54.5114252801525,\n",
       "       55.9980623415884, 57.5046994030244, 59.0313364644603,\n",
       "       60.5779735258962, 62.1446105873321, 63.7312476487680,\n",
       "       65.3378847102039, 66.9645217716399, 68.6111588330758,\n",
       "       70.2777958945117, 71.9644329559476, 73.6710700173835,\n",
       "       75.3977070788195, 77.1443441402554, 78.9109812016913,\n",
       "       80.6976182631272, 82.5042553245631, 84.3308923859990,\n",
       "       86.1775294474349, 88.0441665088709, 89.9308035703068,\n",
       "       91.8374406317427, 93.7640776931786, 95.7107147546145,\n",
       "       97.6773518160504, 99.6639888774864, 101.670625938922,\n",
       "       103.697263000358, 105.743900061794, 107.810537123230,\n",
       "       109.897174184666, 112.003811246102, 114.130448307538,\n",
       "       116.277085368974, 118.443722430410, 120.630359491846,\n",
       "       122.836996553281, 125.063633614717, 127.310270676153,\n",
       "       129.576907737589, 131.863544799025, 134.170181860461,\n",
       "       136.496818921897, 138.843455983333, 141.210093044769,\n",
       "       143.596730106205, 146.003367167641, 148.430004229077,\n",
       "       150.876641290512, 153.343278351948, 155.829915413384,\n",
       "       158.336552474820, 160.863189536256, 163.409826597692,\n",
       "       165.976463659128, 168.563100720564, 171.169737782000,\n",
       "       173.796374843436, 176.443011904872, 179.109648966308,\n",
       "       181.796286027743, 184.502923089179, 187.229560150615,\n",
       "       189.976197212051, 192.742834273487, 195.529471334923,\n",
       "       198.336108396359, 201.162745457795, 204.009382519231,\n",
       "       206.876019580667, 209.762656642103, 212.669293703539,\n",
       "       215.595930764974, 218.542567826410, 221.509204887846,\n",
       "       224.495841949282, 227.502479010718, 230.529116072154,\n",
       "       233.575753133590, 236.642390195026, 239.729027256462,\n",
       "       242.835664317898, 245.962301379334, 249.108938440770,\n",
       "       252.275575502206, 255.462212563641, 258.668849625077,\n",
       "       261.895486686513], dtype=object)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun_new_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f87a9329908>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = p.subplots()\n",
    "ax.plot(x_vec, MyFun_vec)\n",
    "ax.plot(x_vec, MyFun_new_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_lamb = lambdify([x], MyFun, 'numpy')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24.3 ms ± 897 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit #remember this?\n",
    "\n",
    "MyFun_vec = sc.array([N(((x + pi)**2).subs(x, xx)) for xx in x_vec])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.14 µs ± 125 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%%timeit\n",
    "\n",
    "MyFun_vec = MyFun_lamb(x_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIAAAAAWBAMAAAD6L4mmAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABl0lEQVQ4EZ2Tv0rDUBSHf4ltGpqioX2BoOLiYF3ErRkUHZ1cHOzUrSA+QfEF7GhAqK6CKLgK9gEU6tSpq+iiFlTcYnLP/XNMi9JmuPfc8/2+Q7gkAD3NS19Wk2zGcsKZ9iQmZZnlht7H5AOY5e7kPqcYwK3ScPIBALPcYJoBzGpmfGtwcZ1pjTkaq9DL4Aqc/2+FWbvYowmlgPZH4DUzMzkqKom24J3en1NTRZ6BWihzZlOUOsbCbBy/U1NFOj5qo5egKGXJKi9sLgXUSFcWOfbttziOezARRSVIBateOHLbaUWPigD5LzRuFw83eERRAsJwfGeYD6WdbCoCuFWv64TLAItIKoGwLBTPtO5E0clLFFVFY5CsRawmLykjnAogvblAFmLTb2D3kvMNWmlXRzSVIIW4+3XZOvKAXIg+xC+iI5pKkOglfwW2LyaJRUW8OuzQGiL5HFlEUQJC2O9eYcv4+hK3G8112C08ASyiBhAQWmW+3D8YM6ATx98odrEGsIgaQIBpplQR0+HV31QkLXYfXKV6lP4ARYJq5GFzLW8AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x^{2} + 2 \\pi x + \\pi^{2}$$"
      ],
      "text/plain": [
       " 2            2\n",
       "x  + 2⋅π⋅x + π "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(MyFun)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x**2 + 2*pi*x + pi**2\n"
     ]
    }
   ],
   "source": [
    "print(expand(MyFun))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAbBAMAAAAt2dQtAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAImYQu82Z3XZU70SJqzJu81j5AAAACXBIWXMAAA7EAAAOxAGVKw4bAAABYElEQVQoFY2SLUzDUBDH/+uWtIUyCgaBqSFBNgGSGRI+EiwgKgiBLNOISUAVQxB81AEOD8lwGAIYpjAEi8AiCJBKRLl790qz0LQ7cZ+/3LuXO6BMukt+GQLHHVophUy3/l0OXVd+SiHAjvuAzLAPqEtMxSOVL7ZLeaNJajofUNln0re4A1YLoBmgvna+KN0y7ixzyXNCDCTJF0x+N5NeqHohlbEMYK8XwrpU98k0jsYPQwk1ZHWSJGkC/H2SBaD6YGybeosaenrfmxyh6oRisEPj+U48qEcTqB457jHXTwW6pE6ozangMQh2g2CD/Rpe2HyyAggChkPWLOngH2hzqCF6jvw31iwp1ILa/Y1kaXDbP4HlS6ihagx1RXpw+uR9tIxRYdJOVhtXnNmSNDWcPWi0PIlSqBbhlTObki5ei5pen4tuQ2Yqc8mjBYvMa5tn6FREio7ur0HF0/R/Y+hd/QImF0Lvgv7FCwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factor(x**2 + 2*pi*x + pi**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNIrvdRDJuPMnUAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDElEQVRIDe2UPUgjURDH/3trPk1ErOQawQNBT3GRdB5EhEMEISk8TJlaBMM1d41ewLtTsDDlRYRsYXGFhdUJ2igIloq1RWorRSwENc7M2427y9MUy1Vmivcx83v/N2/2vQX+u/VY4bYwP+dCKgCLbQX5CO06qLsYvg4/wt6on6N/iuEeRnv1G6tAI6y9sXq9dtxk8aXoexVoCYy/JIAOW0JawFw7qLvAplbB+ACYFQlpgQwiDw4QLXsVjJKaZWZvaDDHEz2wAvQ7QMpmzDVXAVFWGGO3HhgGcrYCdtzF0vsVEmfk1AM1C7k6BPhOUPLXKh2bza8QKZOLAfwtfFW/3CYAnFoQ4B/Fz+3EFXNBhWiFXAykh1DjsAdA+pZqxMAR1XwA8V2JB3IwDhWAsSLWAwBSE6THwAgQv0GqRMNItbo1WK1ShNS5kl1X1BCADQsn1HkBrHmAd7vI1mlO1jymX+EjzMcAECuTQ7agU2Tz6FPxgEL6kNx8zFsYnA5Zc4teJG0IQIXKdmPasP2A5OBW0rxGR0W9ElehK4+YDQEKQGcpehwRgectYlyHeJ4aArCHhQkeP+ew86Uw4wAXlOTU8vaSxJsK8cm730CiTl4CkPl2OXUmhJtDrdG4dwD9pRUan7hrCfgfjmmptarVvCwNgH3vGt/Yed0tAe0PRJQ6belaAsmicJpmXvleB54AbevBYvg/zT0AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\frac{1}{\\left(a + 1\\right) \\left(a + 2\\right)}$$"
      ],
      "text/plain": [
       "       1       \n",
       "───────────────\n",
       "(a + 1)⋅(a + 2)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f1 = 1/((a+1)*(a+2)); f1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAI4AAAAsBAMAAABBB53eAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yVO+riWZ2mSJEu92sN7DKAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABwklEQVRIDWNgoCFwFSDGcJZA/KoY0/OJMUes7CN+cxgY+okxh4Fj1By8ATkaPniDh4j0M5+odMhJKB0ui9dqwO8UkCxX6qcVhFUNdhUsE6jjwlFz8IcjwfARUgIBZQaG/9jBB6D57EpKekFKSglAJj92Vf/xuwIhS9A9CKV4WaPmYAkeqbWXYaKUhA9jAkP9AahBjHiKNpwVvSdEM5cAA2sAzEFYaKgy3BU9VAHrAwa231j0w4SgynAX1FAFTB8Z2D7DNGGhcZjDvXwltEUDU8DAwIdZlu+qmgoNK5gytIr16AYmUGYCApgCBobzBRARBMkTzaAP5cGUoZrDGMHAdQGiAqaAgeEZwgAoS7SBYS1ec7g+MvBNAKooUlJ6qqSkBlbLtQCqBUGtF2B4CeIhKUN1D+sFBnkDiHq4e2Yh9MNYsQyMsLCHKUM1R76AwR+qGKaAZQHDbph+KM34nYHlA5oyNHMcGJJYNoCVwMwxZ2CYjW7OFwY2BW+IIEwZqjm8EziesaMo4H5evuwBmjkMNxn6EgpQlDGgVvSMmZO3zUFRwAQsQzHMEZtpnXkARRnuih7mYIhynCRBZYI4taJIICsDAAPNmOFYzOHFAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$- \\frac{1}{a + 2} + \\frac{1}{a + 1}$$"
      ],
      "text/plain": [
       "    1       1  \n",
       "- ───── + ─────\n",
       "  a + 2   a + 1"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apart(f1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAHwAAAAsBAMAAABVvsF6AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNIkS73TJc4EnkAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB4ElEQVRIDe2WvUtCURjGHz35kWZGS9EiFAR9kZS7EoQ0hA4JNgT+A5G4NAQl9OUQ5NDQHcI7FLQE0dRoU0MNEUVjzk2KOESUnTznXO+XJtQQ5Bnuve/zvL9z3vvec70CvzZ6/a1MZRkyzSKzkVbwwELZFAdWWsFhb+PG/v3n1m20tG0cDbbN1uRhwthPveKced3Ra380tiR/VFgbb9K+qvkoUsQmSUcjkhSil17zrGqTib+sdue/aZDOPoldCaVJ60jmtiDS1GdXGr4EF0jjX5AAbG9qDH0scpTgvdMYmkAUtAkMagyOu8fgzWoMTSDwCSAiqx2OU0kpXm3za4Hn/IgUANf2Lv9iKzh5NGKn8RTrg8BpyjNVLuTOIssWuGuJ3pduuEeRY1Idd1cAMgxnnhkCB1LnOhpTCezpcU8IcJbhSVJjUZLuJemApVgNf0D2/XiinuolBDJUsOYRLDCIr+6S0VViSv04DvLBIqV4R5oKwSh8PIvj3rIRJxVYeIcUvB90oWAP5ixybQKO03o8+g8RKaEjO1DLEnh3FA5aZ9L+YGPLc9yeMHnu11gORTX4WSw+TzsfXj9e0+C4zNwwQXUMrL6E2eMQq+eq1XdVAsSe12jGQOAGZ9qgmAnEr1I/AeTDmkunD146AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{1}{a + 3} + \\frac{1}{a + 2}$$"
      ],
      "text/plain": [
       "  1       1  \n",
       "───── + ─────\n",
       "a + 3   a + 2"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f2 = 1/(a+2) + 1/(a+3); f2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACv0lEQVRIDe2WT2gTQRTGv02af7tNWJRCe+raYE9KC3pRRHPy4Cl4kxa6VOypYI71pNKD/QMShHpRcSkotKdeNYeEIihFMHjsxXrUQ2lAWlR0fTOzk26S12bVnsSB7Ox+7/e+nZmd3Regsx3Ln+0UAetjz2lO79SMIm6WOmWkfd9lZEaK2UjfCenZmrqwbmyE1MNO02UkvoUA7ZAIaYefWg0kvoSQ33eg5EwD5vCpu8qm6bC9XlBKhONtFzOetaNI7RC3zb0IuQpZgnEfsdFWB7o6F9Uh5iDWQKZGfLJSebFYqRRV6oin+q7HdSA9isGCAvUsxsDvE8Yu62B10MWHIKQdFoERm8EZ6TKwMVjHWNaTQe3gAI8YmpHMh1Mny/FabimpgtphGbkFBmcky/f9sjH+6tnrVgdz+GrESbSb6jG069GvjT+8c/Q7/CePagVo+/xdO6qB/AM+5tZBk9hUga7Acc7AGDpTQMKTIRYwp67XNfBSYm2HPiT3YKxJlQWWkf0ZADknnKw/BieAOWBahHjgXR1fAyDjcQ7zwISHfhHigZkSvkMBK2ED6DFUbUwUYJUoyAMQs1AAFQemSJL41EbSoV4AWJ58oz5V+hbAgEsFyaHYRfp1FkkgtUtLIJZSAKkFVKmj1nR4/oAsJfAEfJHMFAkvUw4B6N9CXuSHHNB7LwCoZ4vkEOE9O3QgQBSrx9S1VtE5uwkwRRK9DmU0HWZhBH9K9CxWgUt1BdAgmSKJ9zA9pIJZGLvIiuFQ0w6+LRwkQAvFFMkeF71ecyWNH0isbbY4zMqHJVdyEmCK5MrU5DVaIJeyCMAFfCqK8/0xbMv9IIFb9Cw6i2TV92nTWgXKIQB9b6+Ml6jfd0gN5UmQAL9pJY0B0XUFWl+c1iI5LRy6AjgvMLYFb3dXgP2ASMe4J7uuwMEfsc9qZIcDvwDYJP++gGwiTQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "together(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIIAAAAvBAMAAADdrw/+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACv0lEQVRIDe2WT2gTQRTGv02af7tNWJRCe+raYE9KC3pRRHPy4Cl4kxa6VOypYI71pNKD/QMShHpRcSkotKdeNYeEIihFMHjsxXrUQ2lAWlR0fTOzk26S12bVnsSB7Ox+7/e+nZmd3Regsx3Ln+0UAetjz2lO79SMIm6WOmWkfd9lZEaK2UjfCenZmrqwbmyE1MNO02UkvoUA7ZAIaYefWg0kvoSQ33eg5EwD5vCpu8qm6bC9XlBKhONtFzOetaNI7RC3zb0IuQpZgnEfsdFWB7o6F9Uh5iDWQKZGfLJSebFYqRRV6oin+q7HdSA9isGCAvUsxsDvE8Yu62B10MWHIKQdFoERm8EZ6TKwMVjHWNaTQe3gAI8YmpHMh1Mny/FabimpgtphGbkFBmcky/f9sjH+6tnrVgdz+GrESbSb6jG069GvjT+8c/Q7/CePagVo+/xdO6qB/AM+5tZBk9hUga7Acc7AGDpTQMKTIRYwp67XNfBSYm2HPiT3YKxJlQWWkf0ZADknnKw/BieAOWBahHjgXR1fAyDjcQ7zwISHfhHigZkSvkMBK2ED6DFUbUwUYJUoyAMQs1AAFQemSJL41EbSoV4AWJ58oz5V+hbAgEsFyaHYRfp1FkkgtUtLIJZSAKkFVKmj1nR4/oAsJfAEfJHMFAkvUw4B6N9CXuSHHNB7LwCoZ4vkEOE9O3QgQBSrx9S1VtE5uwkwRRK9DmU0HWZhBH9K9CxWgUt1BdAgmSKJ9zA9pIJZGLvIiuFQ0w6+LRwkQAvFFMkeF71ecyWNH0isbbY4zMqHJVdyEmCK5MrU5DVaIJeyCMAFfCqK8/0xbMv9IIFb9Cw6i2TV92nTWgXKIQB9b6+Ml6jfd0gN5UmQAL9pJY0B0XUFWl+c1iI5LRy6AjgvMLYFb3dXgP2ASMe4J7uuwMEfsc9qZIcDvwDYJP++gGwiTQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\frac{2 a + 5}{\\left(a + 2\\right) \\left(a + 3\\right)}$$"
      ],
      "text/plain": [
       "    2⋅a + 5    \n",
       "───────────────\n",
       "(a + 2)⋅(a + 3)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simplify(f2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEQAAAAQBAMAAABdIsRgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABJElEQVQoFW2QMUsDQRCFXySXGLmYTRGxEDRnKyjYKhwpBeFaQcwSxcI0/ocgqL1gIXixswk2qa64NpFUARtJkdZORKIWss6YzOEGp9h57+3H7jBIeZs+/q2KpCVkPkTb/UpsGTgXzX0gxj0TdQFUQzHUE6TVljRWqPpi/iI6QSi9VbirddSYk1fmQ0I6xpg3yrMjZC8Rj4nkoyW0kTkatB5DusgFWBxidQrRhOzixPU594B1hRuW9Si6jiIeIu8TAmw4/L+7AjSQeifJNZllAYykgxxnfcw1R8i/sqaaIE+e97mGmWGBXklruM1vOA/PFkKGVresCqfA/XFtD1t4CfQ00gC6mKU4NuYLpd7OPuFcshccmgNsw9G/qXUkiJVapmg5Nj/m8kjK2dlUkgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$2 a + 4 \\pi$$"
      ],
      "text/plain": [
       "2⋅a + 4⋅π"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAkAAAAOBAMAAAAPuiubAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEJm7MquJRO/dIs12VHWsM+wAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABRSURBVAgdY2BUMnZgYBBlYHvOwKDIwNDBwNDJwBC3gGGfAEMcUIKBYZ4AkGB/BmJyBoBIJRDBowAiLzFwLWBgSWDgWcCwMi0pkoFh37t3LxkABZYPUKJR+4UAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$2$$"
      ],
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new, a, a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGsAAAAbBAMAAACJs2z+AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNuzJE3SJtjddMAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACEklEQVQ4EZ1UO2sUYRQ9O4/szL4Sq4iFkQh24qApbGQXG0khmcIQRYgprSRYCWpYMGpIlcJmq6ytNmthYeXgH3CQiI3EKSSdGlgEg4/x3Pnm2+xsRiRzi/ude849871mBjh02OsPDu2hYRGzRWzbeB0V8H3Et6CADZjyCtk+FHLZ7VHbzigxUh+X+qYmzbVnPcFmVzPD4/n157q0IqDm19hcOgnMwP4likv2QJgt3AhS1twAXh055mHmSh/gtU+LMJg+6ZpUvY4H44SCwAJwJo5ZjdF2GpiLiLe1moypzQhh/dHCWQ3EtulhjutthJoctrl9WD+14AYpEhvjkweU2wSNh4+5W4l0NqJ6H7fjOP4BDA5f2WrfqVaWmN5E7i4Hxr7trW9fn9xZibiljURSe+PzWizrE7yDU3C6Stq3beEFFss90qVQacmRAGtSGQHg9FFfJr7W6bzrdJ4IDafN1LU85uouk0SyyGRXic3ootlTymC2O6yrrbqwWdtRNCK1yKaPKdEZ2lZq4yucpXGZrRYmkpqt6qMcqSNpTmC2RMzQtpfACpreeEBucCRlXsCX+auXycnpVpbHtmxiRmprvJ9fDXEfhk/OkSTjxb1H2Izj38SyAvPS3c/3EkXbXN5YiKewxOH2lJbJuS9XpuNCpkqL7Kt8LqdlIYdDJcpjhzj5cA5G/mc61PeP5/7vp3ArfcRf5Sp5cMUaIdcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$12 \\left(a + 2 \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "            2\n",
       "12⋅(a + 2⋅π) "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(MyFun_new**2, a, 2) # same as above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALEAAAAWBAMAAAB9HmCgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNuzJE3SJtjddMAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACzklEQVQ4EZ2UT0gUURzHv7Mzs2POrq4QKQUFZRBSNpQhHcKpyOwQbpCxGdgeCutQiBEeIluIbBFBQy970vBQdCgFD3XJvXSIiCQCL5EDgnSp/JOR/Xv9xp335rWzRtu7vN/7/r7fz5t9M/uAvJG4b+Up/7HUe28GUrqjDQTEooU2HAtkoo75KyAWLbzDpJMfimbLfuRrxa/f4lM2mFKWglrxypYCbyvaUTwnmJj2JDX9YIx3E7zw58dA/dU+fx2szBTUrkRWNPQUlco2oA46P92wq+WNN0AKWixPlZdRGyXAQSFdoKruJJ0rfX1bPfUZXnhVJfcZ1VCSUAf42p+FpdPGBmA/70TiETqDMJF3Ac3OqmzeqRj1+iI2NwR9BOqUp0sTt5RdtNEKHOCtJxUbrRx52EIzbUIjxNi81+cxxIcQ+WbpSU+XJm7R19l4NYpTvLWbMSrdZ6YxY+F9opN2EoPHws4Q/aQvJ4BOxthXSD5uuUxkjZ2PwSAmS3mIHDmyjEgthgWWCh6rB5F1Ngj9TOVctyP7PIvaQWScXbHQMt7d/pFDcmR6uXuS6OWiO3Ny3CVXvVzMjqPNoDOTfJ5FB5GVvpmdZkx3rglGjpwG+i1MC/V0JvM6kyEklDEih23coK9zRKPj4j7fsskln4OxaKEUhwVjlWykgBqo34VKhfdA+0DkkAVzAaYdJV3y5Sxq3CXTxpMxTGBKMFbJVSibXYYyL1SfvD6dXrzdQOtGlCTLLaiSL0dWmtL9O65QVkuiB/6145LNOIzZBWgDmyW098ykVCPkAA/RYJVnoUo+YQnZqAVKHXUJ/M8MGET+0JI4jnu4ZMcLkmsQGUS4A9cRIoPk88kjeG6hHcYUtnNEyaGVHgwz9hN1XU+PZrlMs4i1skZM3KIb6S40Iks+btEffU6aTXQjlcZwREKsUfLYGm1X/gdLofTeQuKf2t8svwHtILoj8Abu/gAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$12 a^{2} + 48 \\pi a + 48 \\pi^{2}$$"
      ],
      "text/plain": [
       "    2                2\n",
       "12⋅a  + 48⋅π⋅a + 48⋅π "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(diff(MyFun_new**2, a, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y, z = var(\"x,y,z\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAJBAMAAAAWSsseAAAALVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAOrOgAAAADnRSTlMAEHarIkSJZt3NuzJUmW693xMAAAAJcEhZcwAADsQAAA7EAZUrDhsAAABASURBVAgdY2AQUnZVU2BgTGBv4pjAwCbA9pDVgYGRgWsBAwjwKYCpfRuAFI+AHgOTAEPcgXUM7gwMwkpC1wsYABfXCcn8wW65AAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x$$"
      ],
      "text/plain": [
       "x"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAsAAAANBAMAAACN24kIAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAV0lEQVQIHWNgVFZgcBVgYGMPYNBnYPBgnsCwioFBgFWB4RMDA0O9APdvIGXJwBQApNYwcB0AUjYM9ReAlIySvQOQAskyMPBMYPwOpPgucCkAKXYlayAJAFheDOlS+mEEAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$y$$"
      ],
      "text/plain": [
       "y"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAoAAAAJBAMAAAD5iKAgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARN3vMmYQu3aZIqtUic3QRwAsAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAANklEQVQIHWNgYFQWcGVgSI+YWcDAkMCwnAEIWMpApDSI4NkAIk8yMGxgYFG92ifAwMkQ/JABANaQCOwnyvUYAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$z$$"
      ],
      "text/plain": [
       "z"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "f = sin(x*y) + cos(y*z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKAAAAAUBAMAAAD4uit9AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMnZUZs0Qu91E7yKJmaurDqYVAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACzklEQVQ4EX1VUUgUURQ94+6+2XVW24KoLx028KPa2q8KglqkIEhh+1hIghiCMEJqCSNIiIWKPvwRv8QCNTKQCBaSCiFYhIIoaQskAqlNqh8JtCKxNDvzdt7uPFu7MPvuOe/cM3PnzswCa2PcT+z3g5q5lfLRgXwZWHeqpMhWc6DRU/g5Pe/U4FwZGctVNqRZiHR1p3Z2QqNPa0iCdp2a9GDA1nmFgkWVyTVqa9AFvTpz1oPrGYa1hiCGpd7aWHGxcpVUJqG+Ml7P8LEuRweMba3pR3+w+f6mXTY369iCiM/1T+LUG1h3EfVaUoZiZiqJrvhzWUd9gvKEjQkHA2NGCpgCp5TDSeCGbf2mwCTZhSP2dRQGUTePYJokQxlOJI17Ri9MW9YB3UA0MozdEN2Jt9QdxqADG1eAy8APEuEk8AyvnJtWchpmFoEcSYYyzCAwEi7AWJB1wFXgQUMalyBgZanbh/DiDriGF4FvJOr7AIf7FNzGBhvGPMloJnN8NJMpkV0hbOZJl2UdMEZ5vS1LtzjuHsTT1aJrSA9lWM4iP9EcKxtS6F2h4WoO8qSLsk4aYsgxFoBIiVs0fIjgks/QbZkN8YeNbKcsx5ThGVaucEXWyZYxjbph4IDUDaAf+OQzdIeyh8NogVly6bVDydC7vghjSdbJoVBGbaCIRnhD6XH79VrmYxL5bs7zlW8oRTilhgJVDDWUiRReGCMIFTiUHvJTPN5jKIWtba0dzGdwq7Wtr2n1S9Pqx72/SrJFMduSOMT7P5vgcxSKUcVQhuLrzjyevHwn68gP8DgX/5BHMTjKW4tjPPTwvXq8izjj7SpDXczHLO8y04oWOZVV1naVfcZ5nnLSg8JRvL7y49CYFkuKjNoqq6ymPCXhNVxg37zI/0cPwinTVpoany+R9Tb7EzG+icpeVfyzdiISf11h3TmtjXE/cdQPaubaX0Awj78usLOuNbejmwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sin{\\left (x y \\right )} + \\cos{\\left (y z \\right )}$$"
      ],
      "text/plain": [
       "sin(x⋅y) + cos(y⋅z)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAPgAAAAUBAMAAABSee3BAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0ydqsiRIlm3btUme8mhfXmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADlElEQVRIDY1WS2gTURQ9k2nzTxxKC6KoIaKCq+IH3HWEKF0YjR8EF8K4UfyVLoqICxtF1I1YREQFIYgWxS6KPxBB48aFLgxVUXFhtaK4ECz+KlXjuTMvn3mjxQM3ufe88+59nzuZAAFsDzB+IjzQHN9vDqbwfVmTDiAWgDEcoPzETF/Y6vhCYNbLa4oJf2gMaVk3ckRMR8jRGS2e74uNjC+EUcDxXo8yJxpDWtY2jojpOKcTWhyr+IlDKkzarpOykB5VVNOXljVqA2I6BnVCi+OOn5itQlU8XULrN79CIi2rMQqIaQiXNEIPd2hESB2yKh4aR+tnTxJeXJcGsi7gkJgHI7exT06whafq+e1PEH7N4PmxMqbnjsBcdTJDQZ7WvmJbt23kbfRYiKprUMU5Gh+HK975FYs+LllhkwpkPUZSzMN0nLXP000MAJ5f3I+WT0BP2XxnDiJhs8tLFNzieoqxC/FMNDKKNUAsQ5JoFO8vAq54HnDFDsslBLKeICnm4QCOW3voxsuA64fLI0gMA1kkx+JFmJ/3W7ApGGKrWNHxiLMrlcFtFi2RJBrFLzJyxTeAO8APhoGsD0g+QFtWMBeWJCLSvfB8A28xzYbxi2RXGZiIT64UwXvu3F2VlbbxhQfM00E0m134JpstiCBV4YcrZvGrEE0gK7pIitUgIk/mTYiMo6sTptCPuKJJ42BV0rI4ZFVAv2WytdzijOo7zzOAK2Zx7qhWvDmrXlwSEXJAPGN+8FRXM0tt57+2IPad9BBNVgWMoGUUiJToErXiyQq2Aq64UVzPin2cIebhHptrOV1pDc9PFMDZvHMk0xWY3/uATYzZcElrDVosjlISaLhlAK/HFTeKB7L6Gi7yM/HJfWPwyVF+qhCRXukZwGFzDKEie+gmYz4g/eW72A48RT9XmiqSJNTOw5eOPi25DXdTzlwdeyDrc84Qc2FsWJ4/Ix5PUfnGhrw8Jcbmbge7jz7D3pOnexnzsDpy7S9YtiP3ygFCnSQJVTxUrVZLcMVLq2uXVtc//F34S9a5nCGmYbAR89aDaP55HeHwDCWp3XlwhjBaVqPEXdF01F8B6zBHdqojVlFMa8aQBqy9WAxLVzbHWtZ/vVgSjpp0Gdebp9d9uXhBfCBhc/0Z/A+0rG2cI6aj/trvy3fqY248U7GR3GN69ax/1dZJLatsoLaJukYc9vGU8P+NOjWltjHoyxpz+Ig6+ANVvAhuIAzHgwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$- x \\left(x y \\cos{\\left (x y \\right )} + 2 \\sin{\\left (x y \\right )}\\right)$$"
      ],
      "text/plain": [
       "-x⋅(x⋅y⋅cos(x⋅y) + 2⋅sin(x⋅y))"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x, 1, y, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFoAAAAbBAMAAAAOgoX4AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABeUlEQVQ4EZWTMUjDQBSG/9R6DW3RUCedDhUXERXE+QZFRycRHHRyCxQ3t+Ls0EHBoIOC4CQWXIVmdHBwsquLgpMWdI7vJe3dJUJJD3L53ntfX3LXC5B7+HdebhdCjTTz266q/AxhbxV/89tAtTuM7cphbN+Wi3U7SnFVUVh6sXNTdpDhFYq3sWtlTy3O4iRQuXy+Nun0g6rSVIiExFgUfZucqwzTbkk7gvOWCoHNVJyxcdar1mbW5yTxAl19Nr0LX1EU0Wb4ie3sl47dJvEtoNnYB4+zh2tUPUps4YnuqCI+obX0WduVUKh5Fp94on4oX8XwblgEwflnECxxvoxlvrV54jEu4xvZmnVv4AENLmi73eKQ34SSCVt2B/HJ2+Eqpb1FFDwCWqVmYztdxKe6t8q98B4b/DPaI83GLjTwwdVXnoCJ6VqnzkDP0mzscohVrl7wZI3B/3zDMhnTp8rhpZghpOGEbrIJK6YTmxmDvob/nQZ8aSWVdP4Dbm1JgeCzfN0AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$x \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "x⋅(x + π) "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFcAAAAbBAMAAAD7fA5IAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEJm7MquJRO/dIs12VGbfGimAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABoklEQVQ4EZWTOUsDURSFz2SZyTIx0yhaGeMfCKQWphcxrQtkFLEIglOLP0CxMJ0QBae1ibaSIomVioVLJ4rBTgsJIoqgjPdmtiwaxgN5775zv9y3DuBT4viYT5KwAub8wyVMG77pHRzqvmHgQfkHvPcPVky1weW2uCu85fEj/YR0VuVYyHD7u8IGIGmSikGIH4zEyfhLwhEweX+jgO5lgyGexVOi5sUUrQDbpglsAnmDxqWObBc8bCerCvIqECv2g+O6m91XADlFe7yYXacJWU7lU9M0XwHv2KR3ygYbwBCearuMurC4dFc+N4AB2qGlaI766CWwgFVlzfLsylMoyCo5iaJlA2kOIjqgINvyxErleKtS4RrIhBVqQ81WwlqtBQNftueuOZSLsuXC14gZ1jIQeuuGA40kV5aKViKkQSaYN3glN1G3XOc0RpWkTo6zwYPlxRka0uFI38FmjP7DcuAzRDQaBrghVU3zkzqaSJivn7y0PA+eQFgjK67avt31ve6RTrbrIQm8LU/2vbpG0HDDnoCfaIf6Pf7eQn0+q2e77A8qXF7AwJjxsQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$2 \\left(x + \\pi\\right)^{2}$$"
      ],
      "text/plain": [
       "         2\n",
       "2⋅(x + π) "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(MyFun, (x, -1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB0AAAAVBAMAAABI7vhRAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAInarRM2ZVBDdiWbvuzJCz3LGAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAr0lEQVQYGWNggADG/2DwAcplYHaAsSC0KCqXIR2VzzEBlc9VgMrvROUyrEblg7TrAB3wDSrMtIGBa12RtKIAkO8CxJwMDM8ZFjI9ADKZjgIJJSBmuMDcACQl9B0YGEC28xkAVQFB/wUGbgUgzbaBvwFIMbB9ZOAEMfob+B2AFAPjN4ZdIFqTgWcBiGawb5gBoq4zMC8A0QzvlyeAaRjBerQBxgTT7DBXwkQvwhhAGgC58CczEgwlOgAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\sqrt{\\pi}$$"
      ],
      "text/plain": [
       "√π"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "integrate(exp(-x**2), (x, -oo, oo))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAALBAMAAAAHCCkxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yq+9mibuZdlQi3UTAfPOwAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAg0lEQVQIHWNggAMBEAtMQIUYXb8mMDBUTFkA5QMpDgOuTwxCGxhOIYSSGRj2NygzMLAdYBBSAgFlhgUMDOx/gQRDAhBDwAIg1Z8AJEAMCFgApFr/MTAwJkD4QDKRgYGrJvQAA9cBuBAnA0Mlg2kcQzpchIFxpscGBsb5oQUIISgL6HoA9QQYMvwZYisAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$-\\infty$$"
      ],
      "text/plain": [
       "-∞"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "-oo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = var(\"n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADsAAAA9BAMAAADhUgydAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMruZ3URUIqt2iWYQ780BvRqmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACG0lEQVQ4Ec1VPWgTURz/hfTSJPeSFDt1MZDVoa10soV2CVKwTYZOQuEUEbcUiqJQiJt0aA3EqdNt1Q72oFBKoXCji6CjUkh2QRPQRqXt893He/fu3cfsb8j9Pt7/fdy7lwc4uAEU3pkujfmZnANO8SQm8aw1oI6KnZSvgQxRMpLjzAhjVkp8ibFOSjxCKSVmY1eaydWpM38EdJPXvdnYRuFgRu47dy4rlX94e6laIa3/D/EPGuCPmJ6YWotOuCZ5etK7isZZusRNvWEIKhbW+M09ZPucis5RpRY3MctZQVTrdMRN6D7L7lzPc3P6J2exz480tFlqG41eqFZIH17ZIa2IMu0rTkiS3t+QVkWLNlVL1ll6LssIb0i9V4IdHPgN20uRCtk425CVyrWh6gDF2wvcrBqcBc997PqCfAlcwe6i6o9YnhFmQOpoNz1VC0yZtWxXFe8JMycYI8uekFZ1LMVFb0hpVdonKT7yeNvgHll0C+6/etHtQDO1CRaQrzx99to7EWatQ0a4+fihzZLy9XcXK2wn3G8yY6xifIgepU7dYrBB1D1jhPyCPnCieOQGyPfjI8dlR6li2Yl5yUTLNhNj9q7f686iVLBbgYH9uz+XXx9v5dwKaWB1aYjG+vxUV1TExOtWaSNfY7jlTko09cjWG+kKilZjG+uiIib+jDuZvLNn3+I6Hx+g/oCXs1tBgfYSe5bvObdCGP8A0u6rseJ52wwAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\sum_{n=1}^{10} \\frac{1}{n^{2}}$$"
      ],
      "text/plain": [
       "  10    \n",
       " ____   \n",
       " ╲      \n",
       "  ╲   1 \n",
       "   ╲  ──\n",
       "   ╱   2\n",
       "  ╱   n \n",
       " ╱      \n",
       " ‾‾‾‾   \n",
       "n = 1   "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, 10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAPBAMAAAAIUwCQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3TIiu0Sg0+p/AAAACXBIWXMAAA7EAAAOxAGVKw4bAAACVElEQVQ4Ea2TPWhTURTHf0ma76Q+HFwcjHZR8ONZXOqSR6EQcTBDYgWRBIWCIDQIBYtCKxjpoCaDiOCgg4MOYmYXgyA4OGQUlwYdXAuNYkUbzz33fcTdS/i/++7/I+e+ey74I3slf1um+XUS7VqfN5V6vQqLK73883a9rkChfskJ9PoUWjVEbojNKBcfjyWAnMdsszDD8ng89pgbZropmY0U+EDsR2DY66K0hcjNqdq2BmZrt8zzusc8VLgHU/CJ4iDTB0+BNYdf1pBYOCeBhrYQuSFlA8Uuo3DVYwcaSLUXmf4tS0n59RT4MjSkNSy7llaN+XPfHfD+UjLrJf7AWh+mWxRLRgbfQjBbDgOVthobKG5RBhUu3ejBNVk6IhUOoQh7niw+MFmDEE5L5WGg0lYzFboDnqJb2CXRksAGPG3CeSg/IufIjuXNwvsXbmCQLSttNZE74E0Nn+V7SWCxFWs4JLYkcIuM9EDZkAqkjwcGE2hoXxO6A954Ov39JpB9Nxs90l3Z8jNSu7BqSAU45E5s2dC+JnIH3/CMfLmvVQ0E6YncQJqyS0pO4ZUJNPARNp0oUGmrmXT7hyJH0TlZ2egcbonzoVTnSSeWtMKRrGBg7P4TqLTVTLr9wHV4KZ64x2U3L/33Vhby22RK5H/KusIxeD2xZaWtRsS+G9LS2OWuXKvUUTHGB6y6c004UJW3BWYdYt9lprCkV88YpFVdn1ZN5CYzv3PX3OBCuyKS5Oaombxgmu+dI5Bsn5Xbc1BmCtMb94fWwJ0Tj5uWtprQLdr/O/4C+CrWblgKxFoAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1.54976773116654$$"
      ],
      "text/plain": [
       "1.54976773116654"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n,1, 10)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJ8AAAAPBAMAAAAIUwCQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3TJEuyJIWJmAAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACm0lEQVQ4Ea2Tz0sUYRzGn9lxdsvdHT1ECB36YYeKhMEUyYuDB5E67AYKUsgOBUGXNKEsOjgY1gRFhnsMVCioU3so6NbWKbpknTPnUkSHYjWVlWx73u93N/oDWthnn5nn8z7sO+93gMbHmTxDmw5V7JmhGPg8/J6XeAE4V0wqjEjP5Tv1RJwdLZfgDo+28qbVbhLYD3CbP82+SmfgtsMNsTfg9UPgPnpjZRQM0WQWMxHXBecXvsLaALqG1hgA2RDL/JnwVfqBQaQqaFkAUgeR3AdnVhkBrQD2rCTqbgAHMNWKLa5OauG7mB7uBV+lChSQOYoWLvtSRNaHtQZhRJwl2AuSqDsC5OLXZXBZo/ADLR/STl/E3gamYt4wW84X0eIjU4EwIpltz9FE3byHXImPj1tuFFafXy0DF02hkcP8h7y2HxGIi+gLkdmEMArmNk5pAnHseeoBvXka3bJdDbAIe5xdIgVgPoB7mg+nB0X8yCO9KYyCcGpzmqgDMusciscsbRTWgGnPAQtFsuNWoZXpRBl5UxgivW4b5piAaHu7qom6+nikjv4tNOczVt5jCkWw+3qhxDTRbpVYqFsWRiTpY0oTcQQjfnnU/Iv1U37CwnN5FtpGTJjz3BjZSjdYyEOxKjBMIJLwkNZEHAcoBL4DK9xVvZCDN/ZqMLp36JKRcRayZo2Fu6Jo9VZ2yXCGKYv0MR+QRBzQBjeuef8WvvQwTSrhq5z10r+RWEKzmdLGYAsjkoiBT5KoS+eRijv0qFNc0jeLpry9nwQ7RK55xwMkA331SC6is6SMgJk5JM0uOqDu2/DICZyXOdzRX70pb/DIUIkzvfIzEHFGzMv/JvpIHa0NoHvyJJ0wIs9mTG4ScfO12hYy0d0yb/7nzx+UW/6EMJzTtQAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$1.64493406684823$$"
      ],
      "text/plain": [
       "1.64493406684823"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Sum(1/n**2, (n, 1, oo)).evalf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC8AAAA9BAMAAADPFy0PAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMruZ3URUIqt2iWYQ780BvRqmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABXklEQVQ4EWNgAAEhBgbOlQvATBRC2ISBYRdDBooYhBPCwODKwH8AUyaEgecjA28CNgnG7wwsG7BK/GFgmYBV4jsDL1YJoB38Adh04HBVCgPDZGz+KPbvZOBcZYBp0iAU4f2PAB+R3cce8f/TGRDY//+ZALIEA4P+DzA///8BVHGG9VCJL2jiQ1wiqr1yMiTBoHlwgdIEnu9gv6JKMCb4MbBDQhNVgofnKwP3Byw6GNg+MHA8wCbB/ICBf8MBkAyqUQy8CxjyDyzAIlEfwLCOGxxlaDqA2atiG0gDulFgsYGX0Iekm/X/Ee4BsdiF//9vLWDgkfr//1kBshQ47X5gYAKlYJS0i6yIHmxgSYcVgEo67AAYFdgBsgS3teRkuCoUidgNvAUcSkCgzcCALFEzBan4RJZg6GSIxWoUw0UGK0aOd0DwGtUo9g8MrokwLcCSDg5YGxhmbYDyQCUdDAAAkfypqiLfSSQAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\prod_{n=1}^{10} n$$"
      ],
      "text/plain": [
       "  10   \n",
       "┬───┬  \n",
       "│   │ n\n",
       "│   │  \n",
       "n = 1  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Product(n, (n, 1, 10)) # 10!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAAgAAAAPBAMAAAArJJMAAAAAIVBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADdcGRXAAAACnRSTlMAVO8Qq4lmdpnNpXqjvAAAAAlwSFlzAAAOxAAADsQBlSsOGwAAACBJREFUCB1jYAADRmUGBpOQxUA2GykEO1Axh9PKNrAZAEESCWTnoGnkAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1$$"
      ],
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(sin(x)/x, x, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAUBAMAAAADwRznAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABlElEQVQoFXWTv0vDQBiG31jbpjkTg6CDiIQq4iCYSREVI1J0URwEB5egorgVQUebwd0MLm4OTqLY/0DBWQgizkUcHP0BCjroG5LKXasHOb7n+57c3UcuwH+jNZIr+zI0xt1Kos1TUIVDBbVQQQVMV0GsqiiT5ckEdKoo04IMjAtlaH0OSjagjawF6CpuQgzexufq49MxNDvgpELORS6/iGGmS4FYEo8wHHZeI5/zbd98sMJUMEPMZUKcsnQEfcXyIb52bDjkJyBn517yXiroNdhZB69c4Y3lywB4tz77GWKZORjHqAviGajY4gsQ1HFQBj61rW83UYF2h1EqUB1Dy6K06ts0zA8KPAC3qXJKhHwNOINxxcQRoGddiI9t4IbMtnR7GC12KrAtTKASsVSKsC5WUPDZ1gl5jTsHF5ivCxkf6ClOeSxp1wMeZjZGsXt7XybvxZWOSa6SCIUqkzzMH0P+sLHQC7SFWtxF0/i9LqnA62JFhtPkxYn4wPFIhPgS5ovjSapxrl/tRDC8xrrE6g9zB/wAm91aBo7Q7skAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff(f, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "h = var(\"h\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAFMAAAAUBAMAAAADwRznAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHaZIu+JRFTNuzKrZt2Me+fNAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABlElEQVQoFXWTv0vDQBiG31jbpjkTg6CDiIQq4iCYSREVI1J0URwEB5egorgVQUebwd0MLm4OTqLY/0DBWQgizkUcHP0BCjroG5LKXasHOb7n+57c3UcuwH+jNZIr+zI0xt1Kos1TUIVDBbVQQQVMV0GsqiiT5ckEdKoo04IMjAtlaH0OSjagjawF6CpuQgzexufq49MxNDvgpELORS6/iGGmS4FYEo8wHHZeI5/zbd98sMJUMEPMZUKcsnQEfcXyIb52bDjkJyBn517yXiroNdhZB69c4Y3lywB4tz77GWKZORjHqAviGajY4gsQ1HFQBj61rW83UYF2h1EqUB1Dy6K06ts0zA8KPAC3qXJKhHwNOINxxcQRoGddiI9t4IbMtnR7GC12KrAtTKASsVSKsC5WUPDZ1gl5jTsHF5ivCxkf6ClOeSxp1wMeZjZGsXt7XybvxZWOSa6SCIUqkzzMH0P+sLHQC7SFWtxF0/i9LqnA62JFhtPkxYn4wPFIhPgS5ovjSapxrl/tRDC8xrrE6g9zB/wAm91aBo7Q7skAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$y \\cos{\\left (x y \\right )}$$"
      ],
      "text/plain": [
       "y⋅cos(x⋅y)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit((f.subs(x, x+h) - f)/h, h, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAABMAAAALBAMAAABv+6sJAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEKvvZom7mXYyzVQi3UQ6SGZXAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAbUlEQVQIHWNgYBBgAAIQwaj82YGBIayogYGBbQLHLwapDQwnGBg8GRj2J6xkYGA5wACUYP0LJBgcQEyGfAcg0QBmJv8DandgcGRg4IgxPsDAcYCBnYEhnGGyHYMrUKJcbQMDY71xAFA5BABtAwBKehUH3PvDFwAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$\\infty$$"
      ],
      "text/plain": [
       "∞"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"+\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACMAAAALBAMAAAAHCCkxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yq+9mibuZdlQi3UTAfPOwAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAAg0lEQVQIHWNggAMBEAtMQIUYXb8mMDBUTFkA5QMpDgOuTwxCGxhOIYSSGRj2NygzMLAdYBBSAgFlhgUMDOx/gQRDAhBDwAIg1Z8AJEAMCFgApFr/MTAwJkD4QDKRgYGrJvQAA9cBuBAnA0Mlg2kcQzpchIFxpscGBsb5oQUIISgL6HoA9QQYMvwZYisAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$-\\infty$$"
      ],
      "text/plain": [
       "-∞"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "limit(1/x, x, 0, dir=\"-\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\frac{x^{3}}{6} + \\frac{x^{4}}{24} + \\frac{x^{5}}{120} + \\mathcal{O}\\left(x^{6}\\right)$$"
      ],
      "text/plain": [
       "         2    3    4     5        \n",
       "        x    x    x     x     ⎛ 6⎞\n",
       "1 + x + ── + ── + ── + ─── + O⎝x ⎠\n",
       "        2    6    24   120        "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x) # this is a classic!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$e + e \\left(x - 1\\right) + \\frac{e}{2} \\left(x - 1\\right)^{2} + \\frac{e}{6} \\left(x - 1\\right)^{3} + \\frac{e}{24} \\left(x - 1\\right)^{4} + \\frac{e}{120} \\left(x - 1\\right)^{5} + \\mathcal{O}\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "                         2            3            4            5             \n",
       "                ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)    ℯ⋅(x - 1)     ⎛       6\n",
       "ℯ + ℯ⋅(x - 1) + ────────── + ────────── + ────────── + ────────── + O⎝(x - 1) \n",
       "                    2            6            24          120                 \n",
       "\n",
       "        \n",
       "       ⎞\n",
       "; x → 1⎠\n",
       "        "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAADgAAAAUBAMAAAAqxuNgAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAMqvNiRDvuyJ2RN1UmWaBK2/dAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABSklEQVQoFWWSv0vDUBDHv9HEpkmM2n+ga8FFwUG6mKGTEAgqSHGpjuIgTg6ib/YXRQKSQSxdHexoQSSbg4MZnByk4CCOBasgSL1r3ivaHlzux+fucrz3gEExW2nGEUBuboCuqrgAGBsqkHZexcvk7KggtW6iYr06BG2hoFEZgkeKAcUeXIkWgbr/fk7ggrR8dhjSTJ+hdoNM1ergLktgn3b03KY9A7wytD1o7ZEGpnniLaAHescSwAPDfAx8jFdSuEmdyGxzXZ7hYw34MtvGFmcIAhP0Rwm588cMQ8EZGkvpSf5ecedYAu3bqXHcW8gJLpEN5ELaOkY9qzglGNL+1/EBTsl9Qq5bwEnpGVjofiaUoVlLUfmlRe4saSqZ2Dhukvvn+BqK4Z68N9L/By/xGi24x/6uTICvTIpRinziQP+y+1WqhKx6Jq7AL1c3SthOBNhaAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\log{\\left (x \\right )}$$"
      ],
      "text/plain": [
       "log(x)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(log(x), x, 0) # will not work why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$-1 - \\frac{1}{2} \\left(x - 1\\right)^{2} + \\frac{1}{3} \\left(x - 1\\right)^{3} - \\frac{1}{4} \\left(x - 1\\right)^{4} + \\frac{1}{5} \\left(x - 1\\right)^{5} + x + \\mathcal{O}\\left(\\left(x - 1\\right)^{6}; x\\rightarrow 1\\right)$$"
      ],
      "text/plain": [
       "            2          3          4          5                         \n",
       "     (x - 1)    (x - 1)    (x - 1)    (x - 1)         ⎛       6       ⎞\n",
       "-1 - ──────── + ──────── - ──────── + ──────── + x + O⎝(x - 1) ; x → 1⎠\n",
       "        2          3          4          5                             "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(log(x), x,1) # this will work, however"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAAAvBAMAAAC8ty28AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3SJEuzIF9t57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADJ0lEQVRYCbWWTWgTQRTHX7pJdpNs0ogHBREjXhQEl1qpN4OXoj0YsFI/Ds1BRLwYqNKCBwOtvVULCrIiWKxSRZGcvGjpHgQLoi3e1SB68NSUFkutGt/bj9lZ+zE7DXnQyXtvfu+ftzOz0wBIWGxkUIKWQ8/BMbkCCfoZzFUkcCn0OUxZUgVS8C5DCpeCJ6RoKThWlsKl4ItStBSsF/SqVIEE/GPLzibspdLf9bYHDtTrEp2ERQ/BpdLTsLAkdxJ6jXeSNWFxAz6FRZHrGZLblqXw2lpRmw1PA2T+iumM5TBaIV6Dkph3ia1qDfpE9DcGYN9vWCBw9Pl0LVUUQHCbAW1ViAlxl1Y6+wYusMqgM62cXbYopbFlUO9iOE65xkwtv/9w6zdpTPmHg/ZyAFORPQ2Jd+rjoP4hidO+TmoevwqgvXvBzUXYMzFoG/P+d7wZLd9mAdhXwW6PaaumfgIkswDxhrRnjBGUfIDLkfJ0IFmJ41rQujSm/QSwPTiBf/EcDrZlerorAGpuDW3nzrMp78mdGn50Z3TnlfqIU9ooDh1XXl8tOZyOz7Gqb+7OE2przkLsRbn0LIBSiE8k6TvQ6E1epc3deULtdM2WoTOYyAPEjNiCXqEUrj8mHe2Yad7bZ5p5THp33hnTfGiad4hrrTMjMX8mYfdNLUOyjH3b3WOApjBtDPwzuGRP4iDsO2qvt/1rK1GmqtYSjWR+3xgwbf/OE2qriyRzn4Z0nsa5Ko1kmRVvTTDwtLk7T6it1IsAkxZWQxQXJmJcB9WgCIDOiepsNdPm7zyhNlxe3DHdZWvReZ7JfoGXdoQ950A7ujzsRG7f/J0n1s4c/3XTKac+2/s7houuNr2XzLw1YYngXh4e+bzOjJvez02jm2C7ioHiLhSHHPR9JQ+9lh9yM17yhuc4n0dWywUBP9IMaMn54Rre12DufDDcKGoZgyieqg0smg1MvghEGwb4BjovyrqUMspPxQt8JPST3mldh9zO5yf5QOzPCFqJWJzGIOeHcB+FYDaJaOVNFoYoox8FTbJIGV41SRq+A1xrknbq8amhsSZpJ/C/mqT2P1W6v8EoFNglAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\mathcal{O}\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "series(exp(x), x, 0, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAALYAAAAvBAMAAAC8ty28AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnN3SJEuzIF9t57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADJ0lEQVRYCbWWTWgTQRTHX7pJdpNs0ogHBREjXhQEl1qpN4OXoj0YsFI/Ds1BRLwYqNKCBwOtvVULCrIiWKxSRZGcvGjpHgQLoi3e1SB68NSUFkutGt/bj9lZ+zE7DXnQyXtvfu+ftzOz0wBIWGxkUIKWQ8/BMbkCCfoZzFUkcCn0OUxZUgVS8C5DCpeCJ6RoKThWlsKl4ItStBSsF/SqVIEE/GPLzibspdLf9bYHDtTrEp2ERQ/BpdLTsLAkdxJ6jXeSNWFxAz6FRZHrGZLblqXw2lpRmw1PA2T+iumM5TBaIV6Dkph3ia1qDfpE9DcGYN9vWCBw9Pl0LVUUQHCbAW1ViAlxl1Y6+wYusMqgM62cXbYopbFlUO9iOE65xkwtv/9w6zdpTPmHg/ZyAFORPQ2Jd+rjoP4hidO+TmoevwqgvXvBzUXYMzFoG/P+d7wZLd9mAdhXwW6PaaumfgIkswDxhrRnjBGUfIDLkfJ0IFmJ41rQujSm/QSwPTiBf/EcDrZlerorAGpuDW3nzrMp78mdGn50Z3TnlfqIU9ooDh1XXl8tOZyOz7Gqb+7OE2przkLsRbn0LIBSiE8k6TvQ6E1epc3deULtdM2WoTOYyAPEjNiCXqEUrj8mHe2Yad7bZ5p5THp33hnTfGiad4hrrTMjMX8mYfdNLUOyjH3b3WOApjBtDPwzuGRP4iDsO2qvt/1rK1GmqtYSjWR+3xgwbf/OE2qriyRzn4Z0nsa5Ko1kmRVvTTDwtLk7T6it1IsAkxZWQxQXJmJcB9WgCIDOiepsNdPm7zyhNlxe3DHdZWvReZ7JfoGXdoQ950A7ujzsRG7f/J0n1s4c/3XTKac+2/s7houuNr2XzLw1YYngXh4e+bzOjJvez02jm2C7ioHiLhSHHPR9JQ+9lh9yM17yhuc4n0dWywUBP9IMaMn54Rre12DufDDcKGoZgyieqg0smg1MvghEGwb4BjovyrqUMspPxQt8JPST3mldh9zO5yf5QOzPCFqJWJzGIOeHcB+FYDaJaOVNFoYoox8FTbJIGV41SRq+A1xrknbq8amhsSZpJ/C/mqT2P1W6v8EoFNglAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$1 + x + \\frac{x^{2}}{2} + \\mathcal{O}\\left(x^{3}\\right)$$"
      ],
      "text/plain": [
       "         2        \n",
       "        x     ⎛ 3⎞\n",
       "1 + x + ── + O⎝x ⎠\n",
       "        2         "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp(x).series(x,0,3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMQAAAAwBAMAAAC8i8hXAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAVO8Qq4lmdpnNMiJE3bsIsXnQAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADkklEQVRYCcVXz2sTQRR+6XazyWaTRjxYKmjVSw+Ki7b0aPBStZQGtFgRMQcRpajBKO3NgLQWD21BLwGhQbx4arz0pG0OgkXBgj3UX2DwD2gjjWjVGt/s7OxukpmW1QEfZOa975t5X+bXSwsgMnXitoiCkpDxRZyF46LxgbKI8Yd/gJmCYEaXJImPMF8USGQkSQDsNvkSelyaxDJfAVSQJaFmBRJD0iQuCRSUtCwJI2nkuSKB0cHvKS7jF3y8bZfguCGy5jdZ/XhluPfFaThYrdYTQBm4Wok3UP6ALriSfsedIma4w8XgSThvvuLSYoY7XAyasCIgxQxngn5iNsWBbeibkBIzDVOMaqUBcwD9h+PWOWLGHagXqW+04Y1Mu7jX266VIeMFHF/MOEMAHtm+9ayeewjXNb7EypGUG7uemHHHANyzA+POiAlqyksxX+nJjFxkQU0vZgAWlHPrRTI6xPYmUgyWAJYIJsW07OuXk79Iqnk8Adv0nwAj6Af2MeRf+h5jCbTfJMMgSxMyFdScB+g8tXXB2cFmNfSMCSUOFQGsirOHDWoqkFoWjQMEZUgsmhOYeRr3yC2Rqkl+cUIlSRJvAb8s9OMn2I4NtYFR7LV2ORIGfaufMWVoCpvuG09vprFHM3CTZGxUiG52B6aMlQCUZHA5SqTQSD2QIRErW9nIpQ0nAPAU1owCgfBsEKQSSs6yPIItVcfIzDO53Jtc7j56YiZsrYIsAKJZXIW1FgzQyMWVsYpm6yysvx7DWZK4JU1aYu4qaCxo2e1vpG1Gs8r2A8LHEqSdyZOWGHnhMlahVFMAc0WSsrmEBcO8BZpJInqjNBlP71pl50KvlZK8g8X4KsxaEa6gHUJH18fsSNhtuVGg923cpdPJO+gc7h5L2dnI6+aaMr6SdwlHwob1LOMchgEA+12XeGHn4Gtx6AQVLxuzw8yx4WiCAQ7DAABSNTx2xD4TD0Rd/B9sbwMIYMPXExyOQQ+ZQ/sLtaEbHcCaVnBD5lE4cjnBAE7fHK8B39dEngDLcn/eE9suhVVSJISmTHmpYNIb1fmfzDqAhggPbSoBrd55c96gzje+1gE0RFhJby4RKHpm4ukJzb01NUMQVq1qWoP+XTDOn4ZwmyQJLcuVQFhJSpJohUiBI4Lwk2Pjkx1pDucT0pOgcSRsuCnhMx1v+LOBwT4ObsNNJQ7nF5quVjc4cyisrlZSHPI/Qn8AupbvjhHEvv4AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$1 - \\frac{x^{2}}{2} + \\frac{x^{4}}{24} + \\mathcal{O}\\left(x^{5}\\right)$$"
      ],
      "text/plain": [
       "     2    4        \n",
       "    x    x     ⎛ 5⎞\n",
       "1 - ── + ── + O⎝x ⎠\n",
       "    2    24        "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1 = cos(x).series(x, 0, 5); s1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAcBAMAAAD1rn4EAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDUlEQVQ4EY2SP2hTcRDHvy/Ne/nf/mih4NTXCm41QVwqBbOUjn2IQ7ekIjjqpC46FB0ES8VSaAYxIF1cGigdHCR1cBHBVztIu9ilQycTERwU4t3l98t7P00kB7+7+3zv7t3L7wUY0rzjgyE7ddtNzA03sKfbHqFZTgwxkivppsdYClwD/xnMqF7xk8KtHvyVuOHk+qZon6PKKpCOxiOds1l3+20noCTZ7hW8EEjQ6Wcj/rJCsU4l7tL2gGKyZUhi3td46JwCY1wc3dcS3KrbAJ4alGgG3HahDmT4bZaU6Xjz8QPlxwYlmoF0mCce4Q0Pew3fOh3KL9IZP79wwRfdDFRoN5A9IXdEx5m5fO0GRbaKglNNraafCZmBr7SbXj8k95rOJO77T1ghazbgKa/tloXMwI5QM6CwQWcFt9V1keg3BXCQrTN5tdrWWa1WovSlbOCHY42Okj1MwBQ/ZcznlMxsuNogyP1g6QU7fBfPjjbIe3UFM1AsEWe4hFfscr/YizXLyKsiEkrIDEz9pG+6LdIV8u8SLUwLyS1V9new2EUzkOrMLxyWRaN7d39nW8k7eoC+y8TM+BeNZgC762uNbgff+6Xp2Xu6f8CXNlWKo0EMKH1uoaMsZChULcmJ/u2WHkHuJMopS5Us7AfzlpjWP80SbThn4V2L+kI+jMnJegwGpe9jhcK/txKrDkj/AD2MYyFwzynjAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x + \\mathcal{O}\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s2 = sin(x).series(x, 0, 2); s2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAF8AAAAcBAMAAAD1rn4EAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACDUlEQVQ4EY2SP2hTcRDHvy/Ne/nf/mih4NTXCm41QVwqBbOUjn2IQ7ekIjjqpC46FB0ES8VSaAYxIF1cGigdHCR1cBHBVztIu9ilQycTERwU4t3l98t7P00kB7+7+3zv7t3L7wUY0rzjgyE7ddtNzA03sKfbHqFZTgwxkivppsdYClwD/xnMqF7xk8KtHvyVuOHk+qZon6PKKpCOxiOds1l3+20noCTZ7hW8EEjQ6Wcj/rJCsU4l7tL2gGKyZUhi3td46JwCY1wc3dcS3KrbAJ4alGgG3HahDmT4bZaU6Xjz8QPlxwYlmoF0mCce4Q0Pew3fOh3KL9IZP79wwRfdDFRoN5A9IXdEx5m5fO0GRbaKglNNraafCZmBr7SbXj8k95rOJO77T1ghazbgKa/tloXMwI5QM6CwQWcFt9V1keg3BXCQrTN5tdrWWa1WovSlbOCHY42Okj1MwBQ/ZcznlMxsuNogyP1g6QU7fBfPjjbIe3UFM1AsEWe4hFfscr/YizXLyKsiEkrIDEz9pG+6LdIV8u8SLUwLyS1V9new2EUzkOrMLxyWRaN7d39nW8k7eoC+y8TM+BeNZgC762uNbgff+6Xp2Xu6f8CXNlWKo0EMKH1uoaMsZChULcmJ/u2WHkHuJMopS5Us7AfzlpjWP80SbThn4V2L+kI+jMnJegwGpe9jhcK/txKrDkj/AD2MYyFwzynjAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$x + \\mathcal{O}\\left(x^{2}\\right)$$"
      ],
      "text/plain": [
       "     ⎛ 2⎞\n",
       "x + O⎝x ⎠"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1 * s2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAG8AAAAwBAMAAADtMzlxAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEHarIkSJZt3NuzJUme9mZ+xlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACUklEQVRIDc2VPWgUQRTH/7PZvbvkPrJcIJ2wiRKwODwloGCRLZSzSxD7rBZXCJJ0WumhQbBSsHGrpI6FV6UTI5YinBESCBwINn6A3PmFoLjOfl1m9t6LqIVOcfve//f+szNz+3aBaBRPNpbjKPubqx3NSmpuBR/VVIl3sKtkQ6H11B7SYmEb1xgSyVabp/vfcavG3VK84+cEzIX8GsMPOwxI5OInju+71LItPnPG+U2OSL3imn0Syx3OM/9wVJ+zcx3SiBVcZY6tevD0jIPm9pBPTM+evYCNmdkhEgnCy18v3KHYJK44tygQa3KRfcul+Hks2ecoEGsCY2s0tbFOg1Qdd9Ioe/2QFfT8UVvPB1nx2yAkgpJ9BAZ54I+NHqYIRyItbj5Ag8LW97GeuUyRWJuYru6QWBybql3mff83KTl/uL5/Z4z76TeWnSyV7ydursSY9FOwN6RB+NEIn97xPdCTac73773x/bqsYfvpF3eUczpcCa0P/g62n2gfEiPfT4wvNbL9xPlSY9pPB3bvh6UPqXrRXQ8POBmDPUa5qGNpQUY3UqxeJ5BTvgzCVlnZRuUlYLxSxTR+DrxP4+y10sKI/FA17mZBmL8G5lwKSG20jxH5NvNI46qNOWWT2SkKfeRd0igrb2sb062LHqpgjNYXvVbL5IF6nLFQ10q1pNxBqc0Zu1qpntSASTBGo6PXqlmpg1NPut0fW6qYxs9gummcvW4Ah6RGPgBFD4YrITXMm80XLQneUvBM89IJSg+1UfmGaAEXg+NExWoQfCXkv5J+AhiVizjQMMAzAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\frac{x^{5}}{24} - \\frac{x^{3}}{2} + x$$"
      ],
      "text/plain": [
       " 5    3    \n",
       "x    x     \n",
       "── - ── + x\n",
       "24   2     "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "expand(s1.removeO() * s2.removeO())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "m11, m12, m21, m22 = var(\"m11, m12, m21, m22\")\n",
    "b1, b2 = var(\"b1, b2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGgAAAAyBAMAAABCJ4MDAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyRKt2u93NZpk6rBljAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABoUlEQVRIDe2WsU4CQRRFryws6qqFJiZWUmqDIX4AJGIthT0x/gCx8BeMVnTGzsbCxhC/gMQPkR41aDDYrfNm2RnfcinQyoSXTMLOnZOFG/ZksR1/YKbZi9+xUT+cicFxvYLN2RA5fTKHktJsEcWd+s1luHvBemSZhXLL92heowKEt8nyuM7KDw0TWeg06uKohGeEbx27PAOV5WqL3RRqNFuoNnAFFDvJ8pTKolo4TCFUgT6wxSCVRa38yEEvwCOKwwK5E1SG4NNB6yiMsNY9YJDKELVTyNwzGGClVCKQzlA2TNKe+flLPQSvNQLpbLXnIPmQzGR7aZKUdIZzs5F5NAJTuSw2Zj982r+bgPL9r7Ysxsj+QhwPJiB2mOxlvh45Qbbm0LiUeRF/LoIJMf3LscxW7oUoMhRh+tEZk6XIUIT5Y5wsJaOytDKUR96Pk6VkVJZWhhpyspSMy1JkmIGcLK0omSxFhhnIydKKkslSZKghL0srSiZLkaGGzNVYpJJRWYoMNeR7lIzJ0spwiiwlo7IUGU6TpWT/RZa/enX7zUviN+Imzk8nSiCdAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11} & m_{12}\\\\m_{21} & m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡m₁₁  m₁₂⎤\n",
       "⎢        ⎥\n",
       "⎣m₂₁  m₂₂⎦"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = Matrix([[m11, m12],[m21, m22]]) # Again, note: capital M for to avoid namespace conflict \n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAB4AAAAyBAMAAAC5cHbcAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyu93NmUSrdmazgYEmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAA9UlEQVQoFWOQ//+JAQb0/39kEHZxhXEZQlwMGcTgPBAjEcRnLWyACYL5DJwLUPn8Bqj8/QGofA0YF2Iew5y7i6EiEPN/BsQ7MKSDhMB85q8M/BeyVsD5XBMY4hUYdsD5QOv3GyDx+R8wrA9A5m9glWNA4vM8YF+AzGddqwc0C2EeyGBMvgVIEOJfEMur/ywKHySGLE9HPl3ig2n5Upj/wPGhwnASxgfHRwtDvgPU/+D46Gbw3wDlQ+KDwR6YCsDhxw+OD4ZemH5IfDAtgPEh8fEKyEUKb24F7gRkfqaxOcw8kEIG+f//gSQifsCCRPDR0ztafgAA94hWMvfBmrcAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1}\\\\b_{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⎤\n",
       "⎢  ⎥\n",
       "⎣b₂⎦"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = Matrix([[b1], [b2]]); b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}m_{11}^{2} + m_{12} m_{21} & m_{11} m_{12} + m_{12} m_{22}\\\\m_{11} m_{21} + m_{21} m_{22} & m_{12} m_{21} + m_{22}^{2}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡    2                               ⎤\n",
       "⎢ m₁₁  + m₁₂⋅m₂₁    m₁₁⋅m₁₂ + m₁₂⋅m₂₂⎥\n",
       "⎢                                    ⎥\n",
       "⎢                                 2  ⎥\n",
       "⎣m₁₁⋅m₂₁ + m₂₁⋅m₂₂   m₁₂⋅m₂₁ + m₂₂   ⎦"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAJEAAAAyBAMAAACufiRQAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyu93NmUSrdmazgYEmAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACoElEQVRIDe2Xv2tTURTHvyZ9aX5UUxTERc2oRaXi4iINNC4uPgcRXN7gIDjp4FIQov+AAemQ0iHg0haqwUHcOjpIJDgqhfwHljYdJOrznHNP8t7Lu3kG08n2woV7z/3209uT1/chOO/vYuKR8v1ZnKrcnBgEp7I4i9OTc5iQEZLzpDoW7t6Z0TFDQq4xOhI+WQlvomslFeej5eHdDS3sDR8EeyVtuUHJtlJSYd92aGpKujA6ISdKSlVH55S0uv1aMoVLle1W5vKn4R9QUq711bTBkjMk54frlfEQSE0/g/cNV+lDfWymYSrJW3a6mFtyh3Jc0acgvY9i+9Ea8CBbw+0SviOzUZWpl1PSgotfqfJMLZqTipLyNXglfABcrwmKfwQKVTMJdbFef16vr9JqHc5utpzpRnNSURI9TlvzTMICQFc7GyFRWe+0gsJetjnVi+ZMxfSp2MFbV0jrwAsUuk74TgHpN/L0HFAv6HahnFSU1HTOQUgn4fSQry3aST3c6QDZNhDJScWQZjrTDSHRxdM7yJVKdtJnLNEF54Bojiv9/+DNK7SmPlGfjzeQflO2k+5/6QAnGsM5riiJFjS444MR+uyoph2X03d4P0gJE1Ixf505uR4KIF2l1tI0425/Qb/71bWnwY4zphIi3XrZChJTaz/bPINKf3XM93f6a2oYZUwlRAqO/2l1RBqvbYehT0fm5GfhvzEn25DtaYa+6Szm5FyiOdmGbM8oKW5OziWbU2zIb2AaSebkXLI5xYZKIthIc3LuL+ZkG8ZIFnOKNdml5l1QjJuTbRgjWcwp1mSXGpLFnGzDGMliTrFmojnVj9LyQZ8s5uRcsjnZhrE7CTdqTt4lmlNsOIY5OZdsTrbhOObk3CEx58F9Kzuwb4p/AMbnOKDCDPxBAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}b_{1} m_{11} + b_{2} m_{12}\\\\b_{1} m_{21} + b_{2} m_{22}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡b₁⋅m₁₁ + b₂⋅m₁₂⎤\n",
       "⎢               ⎥\n",
       "⎣b₁⋅m₂₁ + b₂⋅m₂₂⎦"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKYAAAAMBAMAAAAaIdvMAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMARImrInYyuxBU793NZplSrWBsAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABpElEQVQoFXWRMUvDUBSFT9Mam8aW0MHFwYC6CoLFxSGDDi62UlxFXEQQdRGdJD9AsJtUQUVwtopugsVBEBydtZtCq7RawS3e+1rfbRQPHHjnS3K4Nw+RgYnZjDk0Aq2/RD/iQ3p0Mp9byDsC/xCjex07M9gDzLWWhQxv+WCH5G7k4p+OdQQsAsbzC6CJSkSX7DKyLp5gvpWUhRhetMwOVZqFK8TekaxjpQoMYhxCODH1dxwc+hgDIqWWNbE9s8nmzu171i0QjzdgfSFKS/UBF1j1hHBiikOAqk+kUxPbiTXYoTlh1ZEqIZFTnWfIOkJU4s4acI5IM67nFMIDKXe2psqwXfR7vpqIdxTCiTuPQdukylPSqQlsmobdqYQL+l21WKHVeQkIASXqpNVomx7X1Z1CMExl7E7RsvS7bgz1NYwKeP024USddDNdFVivnu4UkqRX2CHRN3PAwUOr85GeCWknef/n3oWk0Qv2P+KJ3Mi8PFWJqMgq0YWQtcy74iZbg1+HfWC5uOsLVYmoVqz6kWNrgEQQ1NlCQqfp6wxOg6CDcSL6DdvNpos4TbgRAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$m_{11} m_{22} - m_{12} m_{21}$$"
      ],
      "text/plain": [
       "m₁₁⋅m₂₂ - m₁₂⋅m₂₁"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.det()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAVQAAAA1BAMAAADsYw7NAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMA74lUIhAyZpl2q0Tdu81aHXxQAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAD70lEQVRoBe1aMWgUQRR9MXcXL4mJIEawMQqWYuxTpEgamxyioBZ6SRewsBJBBFHE1tIExSBEsNPW6kCu9gotBYvUcloJCuf/u/N3/87t3sze7mkimebyZt68eTc57j/+Hk71fmAfjPO97zi2vOJwOvFk41l9q+lgDbXsL315+QLmnGdMvLs9tlPfxvq5pdqZT056HoJIYwdO6TUPqyvPMfv28Dw6tdYR3MrjxMkV6fXjcEr7WMUbrGF6AV+r3RncdB6fi2Ck0YZT2svqHF5gtQaMt4DFXE6cZJFuE9Mh7WO10qV7vX8IuLGE6q7z9DyESJqsuqR9rE5tYxcXz6K6A1xv5HHi5Io0fQCc0j5W5cCrV+arjy8JKve1Dad0Hqsfe63p3u9yLRq1jZ8LTunYaq/w6FrvovotGE3MFpbukXRs1Tpn78EDq6P4nxzc6mhv1cpjFjRn372z+WDzdWTEgtG8/YfFs2DItiYtSJz4A6DyGCYbEJhMfvdO4GRjC0ygBRgY5DcqZZlDbaO4p7exSjgUJ106tqryWO10AwITya9yrYVfeAgm0IJAzm8U4zKH8Hgb8QTyNlIJt8lktnRsVaIel+PpBgSa5Df1hcZnTD6tHcWHgEALAoP8Rtsyh9rG8gbyNlLxlVZWVR5jqwLHWyqejTXrnUq3GbwXWhDI+W2QVeGxLvEE8jaWD4ZMMidVOraq8xjRI5hIfqt0IxOd+cAqLQjk/DbIqvCMVYG8jVTCIZPMSZWOreo8RnSByeT3HjNLlVcNtsoLAjkaDrIqPGNVIG1jlXDIZKZ0bFW28JksaUZ68iMCLQgnyG+DrArRWDWQtykVM5sp3W+V8ljt5SMRR2ryYwItCInzG20TmPnK2xSPtymVcFu2dL/VzIP+9cJ/aDW9zha66LySvreq6ixX1TKGSHKp9ZH0tarqLJe+MoZIUqn1kvS1quqs/iorZDnurHhJeltVdVZ96xayKpLJL/JMSV+rus6WZDWSLNmqrrMlWRVJqzwWvlUR4EJYklWRHJVVKoS67EbHFfjDquSZSr6f1UyBv7cQWI06NsUbNl3bejlNIFbdb7dq38TexAe3Oor/y769VStCWtBcldWisWDffVrrFgzp1qQFjWTyVq0IKbBQM0g1eIZvArHbpFUrQgrs6MeA7o6NuYXwRdOHbwL1W5VUKmU5+RjQt2OTsIpSmkApVq0IKXC8NXwzSDd4KO4JxGKeJlBoVT9ktyJkBKkxEz+rc3Zskreq6WRVYL4mEMAP2fVPF6wIKbBQM0g1ePhzJTBfEwjgny6kDtJUqbSUZhDrkawZOZtAsq3/1YqQZTSDijWB+i3u7Zk/zItxqrKNIcYAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{m_{22}}{m_{11} m_{22} - m_{12} m_{21}} & - \\frac{m_{12}}{m_{11} m_{22} - m_{12} m_{21}}\\\\- \\frac{m_{21}}{m_{11} m_{22} - m_{12} m_{21}} & \\frac{m_{11}}{m_{11} m_{22} - m_{12} m_{21}}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡       m₂₂               -m₁₂       ⎤\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎢m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎥\n",
       "⎢                                    ⎥\n",
       "⎢      -m₂₁                m₁₁       ⎥\n",
       "⎢─────────────────  ─────────────────⎥\n",
       "⎣m₁₁⋅m₂₂ - m₁₂⋅m₂₁  m₁₁⋅m₂₂ - m₁₂⋅m₂₁⎦"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.inv()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEoAAAAUBAMAAADYerbFAAAAKlBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADmU0mKAAAADXRSTlMAds0yiUTdEFTvq2aZojEYFgAAAAlwSFlzAAAOxAAADsQBlSsOGwAAAHlJREFUKBVjEFJmIAQ2pTK4ElIDlHdFVsUxHYuOzgJUVVVe1zFUsS9Zi6aKgRtTFQPD3kGuqkgJBICBO1hdzwgM1VoFtPCXRQtVnpWXTjOwpaOqOjVXZwNqbIPl21FVgXkoaQIs4kCMKnYBYlRxY1EEdJcY4RQtlAoANlUsX3ws1XEAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left [ -1, \\quad 1\\right ]$$"
      ],
      "text/plain": [
       "[-1, 1]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left [ - i \\sqrt{- \\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad i \\sqrt{- \\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad - \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}, \\quad \\sqrt{\\frac{1}{2} + \\frac{\\sqrt{5}}{2}}\\right ]$$"
      ],
      "text/plain": [
       "⎡       __________        __________       ________      ________⎤\n",
       "⎢      ╱   1   √5        ╱   1   √5       ╱ 1   √5      ╱ 1   √5 ⎥\n",
       "⎢-ⅈ⋅  ╱  - ─ + ── , ⅈ⋅  ╱  - ─ + ── , -  ╱  ─ + ── ,   ╱  ─ + ── ⎥\n",
       "⎣   ╲╱     2   2      ╲╱     2   2     ╲╱   2   2    ╲╱   2   2  ⎦"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve(x**4 - x**2 - 1, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAH4AAAAVBAMAAAByPkciAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAZpkQzYndq1TvMrsiRHaZuvfyAAAACXBIWXMAAA7EAAAOxAGVKw4bAAABsklEQVQ4EaWUvUvDUBTFT/JsWmhaXRycpOAs2YpLGwRx7SC4FcXBRUoHFxcJODm1oJODBFeHujkIfvwBgmsXGypSXPyq4uLgvS+vbZKmFOoZbnPveT/ezbuvAaDlMJnOnpgTK5PRRDVdCtr7JHx5lljdBpDYoBBR6ihSiKZTjthRaAyfX+9GgUg+B6yN5qGN4y+BmuW3HrP/eP4HaDkBvtC5f/aoR6MqG43Zv7AIU57KNq0Qn8R7SNTpOWlTXtIqBv1iiQPNZLj/UhNZnpQ4pmB+Aw3PH92hSwdhJbqZWzKUhnnTWUD6ouebtH+jBCwD5zQHiIDHa4Z5gVNMe+yxVP9IVtQlCnjsD/PIdNFw2ZOi86s5wColSdlVwKNaDK/beCFH6QqYt/z35/mlrDdkrZ4Zy6eroKH3pO5PnXLmW84N7thT55+l8y/aXOhLr2Y+OJHnD8MRJz4q+fxrITfDrj9/fe8rB2OLC32J/favTHj+EOWOG+ClEQ0HkYJuRwrq/vFLxKkUKu6i+BAqUCKv/qj/v/BCyzdxHco50W0KGPH90dgb6LHtDhL11JQdpf7z/fsDFeVnZQdxT5sAAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$\\left \\{ x : 1, \\quad y : 0\\right \\}$$"
      ],
      "text/plain": [
       "{x: 1, y: 0}"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - 1, x - y - 1], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOAAAAAmBAMAAAAvsop7AAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAZrsyIs3dRBDvmatUdomwWowxAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADqElEQVRYCc2XT0hUQRzHv67P3eeuu+pFiIgW+3OJYKHoWHsIoboswUrQQSOCyjIPHfIg7jGV2jKLIorFCEKx9pCdEvcQYUG0YJAKwnYIQtA1ipK0bP699b2ZeW/3INEcZub3me/v932zb2ffWwCo2kG6f9C2dnETo1VM7J5HF2ZT9pjNI/PTCpOB8XTsrsyAxfkYEF7lC31RVRAYQptCjQvYpUAZdMdrlmWGlpwvQeAR2gHPUmxwdH0NGHYAGvgLeKlACZg3EYxKDOhEKEdg3RpbGVTW2UVcVLDuymRRcAX+vAZy9IsN9+V1Eg/C/KZg3ZXJotoo0jEN5IhbaQzNP6hbltMILN/SBbxXVATy5m64hlDilZz4ldwFmclxOofxurhE6xuAHGWuhtiLpmyBSuxtFOYje6yb+/JVHRF5IZhFP/uc3Q0H5vdPdMl5kU/bZKTE5sT0sY8KXWrMM+ZuqKRsDvhPDd9tzu5oFb7D1TIFN92QH3931000PE5d2A+cOf+8Z5FG/iztHc3b8NoYDPZ46HAk6YNiinB/lHTX0ZQ/Q0b0JWjvaN6GhW6El4nevO1I0gd9GcBg2/yCYuqyXgRPQyP3GL6oS6aCjfPAmxzFKTTbV+vXaaPkczJ5Lpk8SaeM0c3Ym4kHqM9vkJLITLIWI0sb1RAewsBOrv69kSTNPHeIwAoO0aqVtdcZYHsX1VarTyOrhLdhMIFZS1l2DN8iEvLIBKbIjZ9x0Xsb+rLY45Ko4t4GwkzyYQbWfMsGDSr4lqYTjkLBbIA8tir8lu5mqQ+JemJmrpEF5c+h/ywTWp05MfedzSs5h/ydgf/AWQX4aI40xyxS+kj7h9kL7JS1IEZyF21NiGyE7Meqxq10hgOI/LRyroqJmUWxi8wL1gIbx5Gm0GqWyIrZWKrmbvgEuOfIIUEwhdob5HLzjoVT5O3A1oTIRsi0VM3d8A4wGXdmobYdIXK7qpy4Zy5mB0JkR0CpmrthWwqTjkKkQs0KQu6nVVhoRaVq7oYk/VJK1LANfnpmyzWtiFfzMgzo3kJ7C+XcyLpOJKp5GWoOJFDJWdOKRDUvwxHNXoIZDZSRViSqccNWOYXG4YyGzmmYgnQiUU38WeCPCynxLYy4hFCXwWGZKbFWJKpF+I9giP9rc6RWFxCOOwgJDgIfZKbEOpFVrZjj8i0nlLSWpYUXMjQ6l0bbZSjHWpGoduC0pb5iTUpj2/r6j1IgJjXk9aFdhnKsFYlq+6j4L0mzDCaVVUcUAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$\\left \\{ x : \\frac{a}{2} + \\frac{c}{2}, \\quad y : \\frac{a}{2} - \\frac{c}{2}\\right \\}$$"
      ],
      "text/plain": [
       "⎧   a   c     a   c⎫\n",
       "⎨x: ─ + ─, y: ─ - ─⎬\n",
       "⎩   2   2     2   2⎭"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "solve([x + y - a, x - y - c], [x,y])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, N, t = var(\"r_m N t\",real = True) # the real bit is not really necessary here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "N = Function('N')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKwAAAArBAMAAAAXqn6LAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAEM0yRHaribtU792ZImZu+f8wAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAC3klEQVRIDa1WTWgTQRT+Nt24TZs/ior0Yki9iZCLIII0ID1UheZSKehhe8hRSAVvHorgRdQseBFEFAXxoJiTnrRB8Odk40U8FBs8CYpGKNiCUt+b2W1248za7u6D2Xnz3vd9mdmdmTwgjh15FIet527oUzEy5s8YZD3VaulzMTKpdgyyjrpyYdLR5aLHzcdoFqPTdczxLl7qcjHiy0U8i0HXUR/CWNPloseNX8j0otN1TGMDu0q3ddno8cv4ajei0j8xMdNR0PfOHqtXB+J6tADObVaRWXpQhLEoxucG6MHh9tFNkkvRZk/RPEc7GAvqDI62izZv/gEsYn+jdofcmquU8Ry/shbtB7Fv7f4NTJPznBqdJeMu9WxKWS1acvrPLJaABSDXohifpQNuTimrRQNT81OzftkfXbSBdBvm2/VXwMVwWQ0aaFxyrvRlp1FooQEMd2ndPYp/DpPVojHkPMXxvuwCrDWzSpvAAbIlit9yc8qXoECPldkmjOC10UZunTfCSJWkadaYZFmrXD54r1y22febGi0QwWuDlJorFGfZ/dSkLPXebAubnlFQi5ZLzb87fDZ9ugKYDjDzhgj8EmZgACdpwObJypF86tE0L/rJ/InuyHzaptUWSZEvU/5k53Ej/JPp0cBqBXh/BoVqlvRHSTHfo4fVBl4bNYCnzqaarR7trrKOo7zufU9ekIJNzWwBH7+TM0GNTSEbgpYc3MccVofcgej48JIZJC9MIetmuBtEy1Suhzq+8MbaMr5qyLauGqMoA/z8t7AbREusaeMQPtBV0LfhjvDVFyMVdu78XEIoui9Kq18Uo2v+mOdTYRfc7aFojyV78TeSl3MOZkCFnTjYvnAI2ocKd6mwEwc7HLXDLBd2p5pXazuk/QcuCzv6P0rWxkVhl3httywKu8RrO1HYBS/pBF6HLOzMHnynLglZUdhZpUwlATGfhCjssvYeXygJVxR2uetdtdZfq8fORrMhTw4AAAAASUVORK5CYII=\n",
      "text/latex": [
       "$$- r_{m} N{\\left (t \\right )} + \\frac{d}{d t} N{\\left (t \\right )}$$"
      ],
      "text/plain": [
       "           d       \n",
       "-rₘ⋅N(t) + ──(N(t))\n",
       "           dt      "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t) - r_m*N(t); dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAIQAAAAYBAMAAADJzkisAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdrtEVN3vqxDNIomZZjLe39VDAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACRklEQVQ4EaVUS2gTURQ96UzS6UwaxwqKCyE7wU2DqNuOgiurZqkVSXcu225cSIWxouIHWlAUQWRwayVdtiAaFRX/EQURKs7CpWBphIIf9Nw7+Y1JtJgD771zz71z5v1mgC7RF3ZpAEx37YDd/2nx7u2GIHp09uDLmMcticwgprUN3lSSuWrikowDv3IwC0d8WFmVj2kf76yByeP2XE2zT2RrFN+UDVLo89kCIBngLFqxvgzzUbmu97o1mhkVZuyik0OyyLaftJ6XrGLqAIdXQRSwT4Ws3rv46Q4S4+cYOyd/ANtIRtieANYoxzgu+4x3NLQi6c6ZlLcHaVeWl0YBmAfsPINDbBfZYkh/lfBzQ9tK2huewgNkJkLyND6WUQISJRj3l+8BtynGUBRzyIyJ82uf6pjEMPKeUq5hTR6cTk+ZJ7pE7b3qC1cF14TfdVVBJsudG8FNjc5gHSaCKDEPp2LkeBgeZzRDreXCFUKtzDzPA6c9K36ZJFWCvSwHkhKbOZIvojZjzJfIh0GLo683aSRKHXxqcJaRWEyztVpwu7nGUC1WhP8BwwOGnlGUhQzBArZrRbQXV4TrjeBEZRbfNRnvHJ9PV6jJdi5gX207m6qKLgMeu1jw1BNNKaVJ9v1L7JwS8NhitUwpBvMnMOxHFhthRYfaqJgaO8xgnE3eceMDyfVGtsoubJ7MVSsSL6SkE+SCExat2kNe8nfIZ0a0+cyiBMx/WvQEWtruY9eE/XDFrZp1Gqq/nC2d8qvR9cfXH6ymtKnmN/kcfxP0Mc0QAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$$N{\\left (t \\right )} = C_{1} e^{r_{m} t}$$"
      ],
      "text/plain": [
       "           rₘ⋅t\n",
       "N(t) = C₁⋅ℯ    "
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyEq_sol = dsolve(dN_dt); MyEq_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8799d46390>"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy  import integrate\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "\n",
    "# initial conditions\n",
    "N_0 = 0.1\n",
    "\n",
    "# The time vector\n",
    "t_vec = sc.arange(0, 10., 0.01)\n",
    "\n",
    "def exp_pop(N, t, r_m):\n",
    "    \"\"\"The right-hand side of the exponential growth ODE\"\"\"\n",
    "    return r_m*N\n",
    "\n",
    "N_vec = integrate.odeint(exp_pop, N_0, t_vec, args=(r_m,)) # the comma is needed!\n",
    "\n",
    "# plot the numerical solution\n",
    "p.plot(t_vec, N_vec)\n",
    "p.xlabel('Time') ; p.ylabel('$N$') \n",
    "\n",
    "# plot analytical solution\n",
    "p.plot(t_vec, N_0 * sc.exp(r_m * t_vec),'k--')\n",
    "p.legend(['numerical approximation', 'analytical solution'], loc='best') # draw legend\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00, -1.00501671e-03, -2.02013400e-03, ...,\n",
       "        -2.13744854e+03, -2.15893125e+03, -2.18062988e+03],\n",
       "       [ 1.00502283e-03,  6.11819401e-09, -1.01511118e-03, ...,\n",
       "        -2.13744753e+03, -2.15893025e+03, -2.18062887e+03],\n",
       "       [ 2.02014197e-03,  1.01512526e-03,  7.96376975e-09, ...,\n",
       "        -2.13744651e+03, -2.15892923e+03, -2.18062786e+03],\n",
       "       ...,\n",
       "       [ 2.13744963e+03,  2.13744863e+03,  2.13744761e+03, ...,\n",
       "         1.09563845e-03, -2.14816243e+01, -4.31802491e+01],\n",
       "       [ 2.15893236e+03,  2.15893136e+03,  2.15893034e+03, ...,\n",
       "         2.14838268e+01,  1.10688877e-03, -2.16975180e+01],\n",
       "       [ 2.18063100e+03,  2.18062999e+03,  2.18062898e+03, ...,\n",
       "         4.31824631e+01,  2.16997432e+01,  1.11834951e-03]])"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_vec - N_0 * sc.exp(r_m * t_vec)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, K, N, t = var(\"r_m K N t\",real = True) # the real bit is not really necessary here\n",
    "\n",
    "N = Function('N')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$- r_{m} \\left(1 - \\frac{1}{K} N{\\left (t \\right )}\\right) N{\\left (t \\right )} + \\frac{d}{d t} N{\\left (t \\right )}$$"
      ],
      "text/plain": [
       "     ⎛    N(t)⎞        d       \n",
       "- rₘ⋅⎜1 - ────⎟⋅N(t) + ──(N(t))\n",
       "     ⎝     K  ⎠        dt      "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = Derivative(N(t), t) - r_m * N(t) * (1 - N(t) / K); dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMMAAAAwBAMAAABeV9MuAAAAMFBMVEX///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv3aB7AAAAD3RSTlMAdrtEVN3vqxDNIomZZjLe39VDAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAEnElEQVRYCbVXW2hcRRj+Nns2e3Y3e2l9qJVqzoOoFCRLaUHwYTeCfamaRR/UhpIIBRXUbHwQL9UeI15bSbwgLER78EXFSrYPaivFbGulNMG61uIFEroF0QcfGhNF26TGb+ZcOCe7wTlu/GFmvv+f+f5vzpnZmbPAf7X09dMRS5CjPdciMW8KuLaWfA36dXbK74D3rBbZ32kRCxOayANnbMKj0HICxYN8fS7oh/b6yThvs+7DFRJ0BJNopaCv4EX2Xiwjvmw/fuQvMl6SLH1hpC6BkEg/3fukdJD8crxhoxB1dgzQNtuEmCHbuMnQwhHbkRKF/F2yB0gUHRCiKVSBs874LDGQ+cQEUpejf8uokHh/vYSiyloeVAaTeexzaTFK6HXETM62hruZ44nKW5VKHcNeup89pA4OICPnLhhdBqcPKZEtos8SMbncj3A9Tsye3tHABl1GRY+yXcSMHKsf2mRhF/TPbIkLFjprokNIJOe4OBuxW6viGKcQ0qKLkT8kZZuVrCK155ApJVIDU9i+JDqERNRg9Yxe6srjl2sIw1nqt9zXRVL03djfcKhiLTyTL0p4Ja0W07xwCJC4jIkxjo8/vO4Hh5bpPuFL4Ero5Ug+fpWvQxlmDXSI3Zktr0JJrhJXDxdyiP4pJLxtpc5VHDnZAAZMLjElcoqckMMGOL6b6SNj2G+F5HrDPxJIszzfD/RTy8OIDMyzd9Ns3d+jgNcv56EN3G9CN+Ro56RUYKoP6WHqhMli8UVbeBlrbtFbLsnzRh4PfYRrv5ap5/jz38qZ72Q5xV/v4Jo/RRe4Vw7zBCsxtbgv3/gfJM7VUeNmrCF6fP4YcHTNJbYiWwL3ewe3ojbH9D8KiVRFWk3gtu0wUgvRPDdTkTfNGNPd2nbKlQlqSM6L26NTyFQJLqwc0bbPrD0HHYlRyjRLZJfbsDneU0WgMM3M4kUVoAPb6LhrURa4XUuZzL7ALGK5j+AOZ7nbTevnx+ik+TRI1YCTeg4Qj9TSzuyp2pfZlvkiDtzQckyL4MjQLkbLLNES8O4sgf1J2Tz2gxxGBmU4PYhkq9My0WhmBSLiAKHplGplSb7NtCF74gZ6JRBT89moD7eE9lfSqseg2NCZnGR25iJ5CYxgon/9RXVYkrDaYd5t8glZaKM33ShbGGy+P7vBsr2D9562gVdvNz0ogXMlbQ5GPe9OGz3Opu/m123HYPPtQsx+JOBNO+rW+lN7TRc7rbxY09aKqOsuSvDrA2wm64WG9Awe0M+ycuySC9z2nOkipbafo14F7mEzjliZ32yVyoOVtxG314fhzCCrgIWQ2LduCsdJrtoSv0OzJ2ww1tkAZm6f+elzRMqv0PebukR0Jz5ErC7/XvApMsz/kMxksJ5g6R3rLO5AV45TCJi6xAtFnXvl0+kryafEx0uWNlQTuQyWLSzxxvP4ApnhBrHf1CUe++Zq02WKtfDMcFAMt6FUtB3dvswawlOXEJ+yjp1fKrqQreHgF/m/eNhyHF+jLrHoYwWgFfCaHXWJfn48NPMVIuoSG6FPKSRsHtJtNsdaRyJfiUM+vJ0cGq+HZ4Vn/AOGDUQmstbH5wAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$$N{\\left (t \\right )} = \\frac{K e^{C_{1} K + r_{m} t}}{e^{C_{1} K + r_{m} t} - 1}$$"
      ],
      "text/plain": [
       "           C₁⋅K + rₘ⋅t \n",
       "        K⋅ℯ            \n",
       "N(t) = ────────────────\n",
       "        C₁⋅K + rₘ⋅t    \n",
       "       ℯ            - 1"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyEq_sol = dsolve(dN_dt); MyEq_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f8799491d68>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy  import integrate\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "K = 10.\n",
    "# initial condition\n",
    "N_0 = 0.1\n",
    "\n",
    "#The time vector \n",
    "t_vec = sc.arange(0, 10., 0.01)\n",
    "\n",
    "def log_pop(N, t, r_m, K):\n",
    "    \"\"\"The right-hand side of the logistic ODE\"\"\"\n",
    "    return r_m*N*(1-N/K)\n",
    "\n",
    "N_vec = integrate.odeint(log_pop, N_0, t_vec, args=(r_m, K));\n",
    "\n",
    "p.plot(t_vec, N_vec) # plot the solution\n",
    "p.xlabel('Time') ; p.ylabel('$N$') \n",
    "\n",
    "# plot analytical solution\n",
    "p.plot(t_vec, K * N_0 * sc.exp(r_m * t_vec)/(K + N_0 * (sc.exp(r_m * t_vec) - 1.)),'k--')\n",
    "p.legend(['numerical approximation', 'analytical solution'], loc='best') # draw legend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "r_m, a, e, z, K, N, C, t = var(\"r_m, a, e, z, K, N, C, t\",real = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( C N a e - C z, \\quad - C N a + N r_{m} \\left(1 - \\frac{N}{K}\\right)\\right )$$"
      ],
      "text/plain": [
       "⎛                             ⎛    N⎞⎞\n",
       "⎜C⋅N⋅a⋅e - C⋅z, -C⋅N⋅a + N⋅rₘ⋅⎜1 - ─⎟⎟\n",
       "⎝                             ⎝    K⎠⎠"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dN_dt = r_m * N *(1-N/K) - a * N * C\n",
    "dC_dt = e * a * N * C - z * C\n",
    "\n",
    "dC_dt, dN_dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( - C N a + N r_{m} \\left(1 - \\frac{N}{K}\\right) = 0, \\quad C N a e - C z = 0\\right )$$"
      ],
      "text/plain": [
       "⎛              ⎛    N⎞                       ⎞\n",
       "⎜-C⋅N⋅a + N⋅rₘ⋅⎜1 - ─⎟ = 0, C⋅N⋅a⋅e - C⋅z = 0⎟\n",
       "⎝              ⎝    K⎠                       ⎠"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_eqlb = Eq(dN_dt, 0)\n",
    "C_eqlb = Eq(dC_dt, 0)\n",
    "N_eqlb, C_eqlb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/latex": [
       "$$\\left ( \\left [ \\frac{r_{m} \\left(K - N\\right)}{K a}\\right ], \\quad \\left [ \\frac{z}{a e}\\right ]\\right )$$"
      ],
      "text/plain": [
       "⎛⎡rₘ⋅(K - N)⎤  ⎡ z ⎤⎞\n",
       "⎜⎢──────────⎥, ⎢───⎥⎟\n",
       "⎝⎣   K⋅a    ⎦  ⎣a⋅e⎦⎠"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N_eqlb_sol = solve(N_eqlb, C)\n",
    "C_eqlb_sol = solve(C_eqlb, N)\n",
    "\n",
    "N_eqlb_sol, C_eqlb_sol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import integrate\n",
    "\n",
    "t_vec = sc.arange(0, 100., 0.01)\n",
    "\n",
    "# parameters\n",
    "r_m = 1.\n",
    "a = 1\n",
    "e = 0.5\n",
    "z = .5\n",
    "K =10\n",
    "\n",
    "# initial condition: this is an array now!\n",
    "N0C0 = sc.array([1., 1.])\n",
    "\n",
    "# the function still receives only `x`, but it will be an array, not a number\n",
    "def LV(NC, t, r_m, K, a, e, z):\n",
    "    # Unlike the esponental and logistic growth model, we now need to convert \n",
    "    # the output to a numpy array as it has two populations.\n",
    "    return sc.array([ r_m * NC[0]*(1-NC[0]/K) - a * NC[0] * NC[1],\n",
    "                   e * a * NC[0] * NC[1] - z * NC[1] ])\n",
    "\n",
    "NC_vec = integrate.odeint(LV, N0C0, t_vec, (r_m, K, a, e, z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 2)\n"
     ]
    }
   ],
   "source": [
    "print(NC_vec.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['seaborn-poster', 'classic', 'seaborn-notebook', 'tableau-colorblind10', 'bmh', 'fast', 'seaborn-dark-palette', 'seaborn-pastel', 'seaborn-darkgrid', 'seaborn-whitegrid', 'Solarize_Light2', 'seaborn-ticks', 'seaborn-white', 'seaborn-dark', 'grayscale', '_classic_test', 'seaborn-deep', 'fivethirtyeight', 'dark_background', 'seaborn-muted', 'seaborn', 'ggplot', 'seaborn-colorblind', 'seaborn-talk', 'seaborn-paper', 'seaborn-bright']\n"
     ]
    }
   ],
   "source": [
    "print(p.style.available)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "p.style.use('seaborn-darkgrid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f87993e5278>"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.plot(t_vec, NC_vec)\n",
    "p.xlabel('Time'); p.ylabel('Population size') # and of y-axis\n",
    "p.legend(['Resource ($N$)', 'Consumer ($C$)'], loc='best')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial condition: [1. 1.]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f87993305f8>]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p.plot(NC_vec[0,0], NC_vec[0,1], 'o')\n",
    "print('Initial condition:', NC_vec[0])\n",
    "\n",
    "p.plot(NC_vec[:,0], NC_vec[:,1])\n",
    "\n",
    "#Another solution with a different initial condition:\n",
    "#NC_vec2 = odeint(LV, [2., 4.], t_vec, (r_m, K, a, e, z))\n",
    "#p.plot(NC_vec2[:,0], NC_vec2[:,1])\n",
    "#p.plot(NC_vec2[0,0], NC_vec2[0,1], 'o')\n",
    "#p.xlabel('Resource Population size'); p.ylabel('Consumer Population size') # and of y-axis\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
**********************************************************************

Testing MyFirstJupyterNb-checkpoint.ipynb...

======================================================================
======================================================================
Finished running scripts

Ran into 5 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 94.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!