hi
a <- 4
a
a^2
sqrt(a)
v <- c(0,1,2,3,4)
v
is.vector(a)
is.vector(v)
mean(v)
var(v)
median(v)
sum(v)
setwd("~/Documents/Genomics_and_bioinformatics")
# read data
North <- read.csv('killer_whale_North.csv', header = FALSE, stringsAsFactors = FALSE)
South <- read.csv('killer_whale_South.csv', header = FALSE, stringsAsFactors = FALSE)
# read data
turtle <- read.csv('turtle.csv', header = FALSE, stringsAsFactors = FALSE)
turtle_geno <- read.csv('turtle.genotypes.csv', header = FALSE, stringsAsFactors = FALSE)
View(turtle)
View(turtle_geno)
View(turtle)
View(turtle_geno)
data2 <- as.matrix(read.csv("turtle.csv", stringsAsFactors=F, header=F, colClasses=rep("numeric", len)))
### read data
len <- 2000
data2 <- as.matrix(read.csv("turtle.csv", stringsAsFactors=F, header=F, colClasses=rep("numeric", len)))
calcFST <- function(pop1, pop2) {
# only for equal sample sizes!
fA1 <- as.numeric(apply(FUN=sum, X=pop1, MAR=2)/nrow(pop1))
fA2 <- as.numeric(apply(FUN=sum, X=pop2, MAR=2)/nrow(pop2))
FST <- rep(NA, length(fA1))
for (i in 1:length(FST)) {
HT <- 2 * ( (fA1[i] + fA2[i]) / 2 ) * (1 - ((fA1[i] + fA2[i]) / 2) )
HS <- fA1[i] * (1 - fA1[i]) + fA2[i] * (1 - fA2[i])
FST[i] <- (HT - HS) / HT
}
FST
}
snps <- which(apply(FUN=sum, X=data2, MAR=2)/(nrow(data2))>0.03)
cat("\nFST value (average):",
"\nA vs B", mean(calcFST(data2[1:20,snps], data2[21:40,snps]), na.rm=T),
"\nA vs C", mean(calcFST(data2[1:20,snps], data2[41:60,snps]), na.rm=T),
"\nA vs D", mean(calcFST(data2[1:20,snps], data2[61:80,snps]), na.rm=T),
"\nB vs C", mean(calcFST(data2[21:40,snps], data2[41:60,snps]), na.rm=T),
"\nB vs D", mean(calcFST(data2[21:40,snps], data2[61:80,snps]), na.rm=T),
"\nC vs D", mean(calcFST(data2[41:60,snps], data2[61:80,snps]), na.rm=T),"\n")
a <- sum(turtle)
?summary.aov
?sum
# calculate FST
# get the allele frequency of each location
all_A <- colSums(turtle[1:20,])/ncol(turtle)
all_A
# calculate FST
# get the allele frequency of each location
all_A <- colSums(turtle[1:20,])/ncol(turtle)
all_B <- colSums(turtle[21:40,])/ncol(turtle)
all_C <- colSums(turtle[41:60,])/ncol(turtle)
all_D <- colSums(turtle[61:80,])/ncol(turtle)
# A and B
cat("FST for A and B is")
cat("\nFST value (average):",
"\nA vs B", mean(calcFST(data2[1:20,snps], data2[21:40,snps]), na.rm=T),
"\nA vs C", mean(calcFST(data2[1:20,snps], data2[41:60,snps]), na.rm=T),
"\nA vs D", mean(calcFST(data2[1:20,snps], data2[61:80,snps]), na.rm=T),
"\nB vs C", mean(calcFST(data2[21:40,snps], data2[41:60,snps]), na.rm=T),
"\nB vs D", mean(calcFST(data2[21:40,snps], data2[61:80,snps]), na.rm=T),
"\nC vs D", mean(calcFST(data2[41:60,snps], data2[61:80,snps]), na.rm=T),"\n")
# A and B
Hs_AB <- all_A*(1 - all_A) + all_B*(1 - all_B)
Ht_AB <- (all_A + all_B)(1-(all_A+all_B)/2)
Ht_AB <- (all_A + all_B)*(1-(all_A+all_B)/2)
FST_AB <- (Ht_AB - Hs_AB)/ Ht_AB
avg_FST_AB <- mean((Ht_AB - Hs_AB)/ Ht_AB)
cat("FST for A and B is:",
avg_FST_AB)
fst <- (Ht_AB - Hs_AB)/ Ht_AB
fst <- (Ht_AB - Hs_AB)/Ht_AB
fst <- (Ht_AB - Hs_AB)
fst <- Hs_AB/Ht_AB
avg_FST_AB <- mean((Ht_AB - Hs_AB)/ Ht_AB, na.rm = T)
# calculate FST
# get the allele frequency of each location
all_A <- colSums(turtle[1:20,])/20
all_B <- colSums(turtle[21:40,])/20
all_C <- colSums(turtle[41:60,])/20
all_D <- colSums(turtle[61:80,])/20
# A and B
Hs_AB <- all_A*(1 - all_A) + all_B*(1 - all_B)
Ht_AB <- (all_A + all_B)*(1-(all_A+all_B)/2)
avg_FST_AB <- mean((Ht_AB - Hs_AB)/ Ht_AB, na.rm = T)
cat("FST for A and B is:",
avg_FST_AB)
c(1,2,3)*c(2,2,2)
c(1,2,3)*c(2,2,3)
(Ht_AB - Hs_AB)/ Ht_AB
turtle[,894]
turtle[1:20,894]
turtle[21:40,894]
0.1*0.9+0.1*0.9
0.09*(1-0.5)
0.2*0.9
(Ht_AB - Hs_AB)/ Ht_AB, na.rm = T)
(Ht_AB - Hs_AB)/ Ht_AB, na.rm = T
a <- na.omit(fst)
a <- na.omit(FST_AB)
snos
snps
# A and C
Hs_AC <- all_A*(1 - all_A) + all_C*(1 - all_C)
Ht_AC <- (all_A + all_C)*(1-(all_A+all_C)/2)
avg_FST_AC <- mean((Ht_AC - Hs_AC)/ Ht_AC, na.rm = T)
cat("FST for A and C is:",
avg_FST_AC)
cat("\nFST value (average):",
"\nA vs B", mean(calcFST(data2[1:20,snps], data2[21:40,snps]), na.rm=T),
"\nA vs C", mean(calcFST(data2[1:20,snps], data2[41:60,snps]), na.rm=T),
"\nA vs D", mean(calcFST(data2[1:20,snps], data2[61:80,snps]), na.rm=T),
"\nB vs C", mean(calcFST(data2[21:40,snps], data2[41:60,snps]), na.rm=T),
"\nB vs D", mean(calcFST(data2[21:40,snps], data2[61:80,snps]), na.rm=T),
"\nC vs D", mean(calcFST(data2[41:60,snps], data2[61:80,snps]), na.rm=T),"\n")
# A and D
Hs_AD <- all_A*(1 - all_A) + all_D*(1 - all_D)
Ht_AD <- (all_A + all_D)*(1-(all_A+all_D)/2)
avg_FST_AD <- mean((Ht_AD - Hs_AD)/ Ht_AD, na.rm = T)
cat("FST for A and D is:",
avg_FST_AD)
# B and D
Hs_BD <- all_B*(1 - all_B) + all_D*(1 - all_D)
Ht_BD <- (all_B + all_D)*(1-(all_B+all_D)/2)
avg_FST_BD <- mean((Ht_BD - Hs_BD)/ Ht_BD, na.rm = T)
cat("FST for B and D is:",
avg_FST_BD)
# C and D
Hs_CD <- all_C*(1 - all_C) + all_D*(1 - all_D)
Ht_CD <- (all_C + all_D)*(1-(all_C+all_D)/2)
avg_FST_CD <- mean((Ht_CD - Hs_CD)/ Ht_CD, na.rm = T)
# B and C
Hs_BC <- all_B*(1 - all_B) + all_C*(1 - all_C)
Ht_BC <- (all_B + all_C)*(1-(all_B+all_C)/2)
avg_FST_BC <- mean((Ht_BC - Hs_BC)/ Ht_BC, na.rm = T)
cat("FST for B and C is:",
avg_FST_BC)
colSums(turtle[1:20,])
cat("\nFST value (average):",
"\nA vs B", mean(calcFST(data2[1:20,snps], data2[21:40,snps]), na.rm=T),
"\nA vs C", mean(calcFST(data2[1:20,snps], data2[41:60,snps]), na.rm=T),
"\nA vs D", mean(calcFST(data2[1:20,snps], data2[61:80,snps]), na.rm=T),
"\nB vs C", mean(calcFST(data2[21:40,snps], data2[41:60,snps]), na.rm=T),
"\nB vs D", mean(calcFST(data2[21:40,snps], data2[61:80,snps]), na.rm=T),
"\nC vs D", mean(calcFST(data2[41:60,snps], data2[61:80,snps]), na.rm=T),"\n")
# use tree from genetic distance
tree <- hclust(turtle)
data <- as.matrix(read.csv("turtle.genotypes.csv", stringsAsFactors=F, header=F, colClasses=rep("numeric", len)))
dim(data)
### assign an name for each location
locations <- rep(c("A","B","C","D"), each=10)
distance <- dist(data)
distance
tree <- hclust(distance)
plot(tree, labels=locations)
# use tree from genetic distance
distance <- dist(turtle)
tree <- hclust(distance)
plot(tree)
rep(c("A","B"),10)
rep(c("A","B"),each=10)
# use tree from genetic distance
label <- rep(c("A","B","C","D"), each = 10)
distance <- dist(turtle)
tree <- hclust(distance)
# use tree from genetic distance
label <- rep(c("A","B","C","D"), each = 20)
distance <- dist(turtle)
tree <- hclust(distance)
plot(tree, labels = label)
label <- rep(c("A","B","C","D"), each = 10)
distance <- dist(turtle_geno)
tree <- hclust(distance)
plot(tree, labels = label)
# use PCA
pca <- prcomp(turtle)
pca$x
test <- pca$x
View(tree)
View(test)
plot(test[,1])
plot(test[,1], pch = 2)
plot(test[,1], pch = 1)
line(test[,1], pch = 3)
line(test[,1])
lines(test[,1])
lines(test[,1],add=T,color = "blue")
lines(test[,1],add=TRUE,color = "blue")
plot(test[,1])
plot(test[,2],add=TRUE,color = "blue")
plot(test[,2],add=TRUE)
# use PCA
pca <- prcomp(turtle)
test <- pca$x
plot(test[,1])
plot(test[,2],add=TRUE)
### or we can do a PCA
### we can filter our low-frequency variants first
colors <- rep(c("blue","red","yellow","green"), each=5)
### or we can do a PCA
### we can filter our low-frequency variants first
colors <- rep(c("blue","red","yellow","green"), each=5)
index <- which(apply(FUN=sum, X=data, MAR=2)/(nrow(data)*2)>0.03)
pca <- prcomp(data[,index], center=T, scale=T)
summary(pca)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1)
legend("right", legend=sort(unique(locations)), col=unique(colors), pch=1)
# use PCA
### or we can do a PCA
### we can filter our low-frequency variants first
colors <- rep(c("red","yellow","blue","green"), each=5)
pca <- prcomp(turtle_geno, center=T, scale=T)
summary(pca)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1)
legend("right", legend=sort(unique(locations)), col=unique(colors), pch=1)
# use PCA
### or we can do a PCA
### we can filter our low-frequency variants first
colors <- rep(c("red","grey","blue","darkgreen"), each=5)
pca <- prcomp(turtle_geno, center=T, scale=T)
summary(pca)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1)
legend("right", legend=sort(unique(locations)), col=unique(colors), pch=1)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1, cex = 2)
legend("right", legend=sort(unique(locations)), col=unique(colors), pch=1)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1, cex = 1.5)
legend("right", legend=sort(unique(locations)), col=unique(colors), pch=1)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=1)
plot(pca$x[,1], pca$x[,2], col=colors, pch=1, cex = 1.5)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=1)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=12)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=3)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=4)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=5)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=6)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=7)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=20)
plot(pca$x[,1], pca$x[,2], col=colors, pch=20, cex = 1.5)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=20)
dim(distance)
summary(distance)
distance
# 2 test genetic and geographical distance
genedis <- c(avg_FST_AB,avg_FST_AC,avg_FST_AD,avg_FST_BC,avg_FST_BD,avg_FST_CD)
geodis <- c(5,7,45,2,40,38)
cor(cbind(genedis,geodis))
plot(geodis,genedis)
line(geodis,genedis)
lines(geodis,genedis,pch = 20)
lines(sort(x),pch = 20)
x <- cbind(genedis,geodis)
cor(x)
lines(sort(x),pch = 20)
View(x)
x <- cbind(geodis,genedis)
cor(x)
lines(sort(x),pch = 20)
lines(sort(x),pch = 20)
sort(x)
plot(x,pch = 20)
?hclust
label <- rep(c("A","B","C","D"), each = 10)
distance <- dist(turtle_geno)
tree <- hclust(distance)
plot(tree, labels = label)
# use PCA
### or we can do a PCA
### we can filter our low-frequency variants first
colors <- rep(c("red","grey","blue","darkgreen"), each=5)
pca <- prcomp(turtle_geno, center=T, scale=T)
summary(pca)
plot(pca$x[,1], pca$x[,2], col=colors, pch=20, cex = 1.5)
legend("right", legend=c("A","B","C","D"), col=unique(colors), pch=20)
pca[,1]
pca$x[,1]
pca$x[,2]
# bonus question
turtle_marker <- read.csv('turtle_markers.csv', header = FALSE, stringsAsFactors = FALSE)
View(turtle_marker)
# calculate FST
all_A <- turtle_marker[,2]
all_B <- turtle_marker[,3]
all_C <- turtle_marker[,4]
# A and B
Hs_AB <- all_A*(1 - all_A) + all_B*(1 - all_B)
Ht_AB <- (all_A + all_B)*(1-(all_A+all_B)/2)
avg_FST_AB <- mean((Ht_AB - Hs_AB)/ Ht_AB, na.rm = T)
cat("FST for A and B is:",
avg_FST_AB)
# A and C
Hs_AC <- all_A*(1 - all_A) + all_C*(1 - all_C)
Ht_AC <- (all_A + all_C)*(1-(all_A+all_C)/2)
avg_FST_AC <- mean((Ht_AC - Hs_AC)/ Ht_AC, na.rm = T)
cat("FST for A and C is:",
avg_FST_AC)
# B and C
Hs_BC <- all_B*(1 - all_B) + all_C*(1 - all_C)
Ht_BC <- (all_B + all_C)*(1-(all_B+all_C)/2)
avg_FST_BC <- mean((Ht_BC - Hs_BC)/ Ht_BC, na.rm = T)
cat("FST for B and C is:",
avg_FST_BC)
setwd("~/Documents/CMEECoursework/Week7/Code")
# install igraph
install.packages('igraph')
library(igraph)
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
# install igraph
#install.packages('igraph')
library(igraph) # Load the igraph package
rm(list = ls())
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
graphics.off()
svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
View(links)
View(net)
View(nodes)
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
#V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
#graphics.off()
#svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
dev.off()
rm(list = ls())
# 	ICL	UoR	CEH	ZSL	CEFAS	Nonacademic/CASE
# ICL	0	0	10	9	5	70
# UoR		0	12	0	2	76
# CEH			0	0	0	6
# ZSL				0# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7) 	0	28
# CEFAS					0	0
# Nonacademic/CASE						0
links <- read.csv("../Data/QMEE_Net_Mat_edges.csv", header=T, as.is=T)
nodes <- read.csv("../Data/QMEE_Net_Mat_nodes.csv", header=T, row.names = 1)
#Create graph object
net <- graph.adjacency(as.matrix(links), mode = "directed", weighted=TRUE, diag=F)
#Test plot
# plot(net, edge.arrow.size=1, edge.curved=.1,
#      vertex.color="orange", vertex.frame.color="#555555",
#      vertex.label=V(net)$Type, vertex.label.color="black",
#      vertex.label.cex=.7)
# Generate colors based on partner type:
colrs <- c("green", "red", "blue")
V(net)$color <- colrs[nodes$Type]
# Set node size based on Number of PIs:
#V(net)$size <- V(net)$Pis*0.9
V(net)$size <- 50
# Set edge width based on weight (PhD Students):
E(net)$width <- E(net)$weight
#change arrow size and edge color:
E(net)$arrow.size <- 1
E(net)$edge.color <- "gray80"
E(net)$width <- 1+E(net)$weight/10
#graphics.off()
#svg("../Results/QMEENet.svg",width=7,height=7)
plot(net, edge.curved=0, vertex.label.color="black")
legend(x=-1.5, y=-0.1, c("University","Hosting Partner", "Non-hosting Partner"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
#dev.off()
source('~/Documents/CMEECoursework/Week7/Code/Nets.R')
install.packages('IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
cat("Reading CSV\n")
nagy <- read.csv('../Data/NagyEtAl1999.csv', stringsAsFactors = FALSE)
cat("Creating graph\n")
pdf('../Results/fmr_plot.pdf', 11, 8.5)
col <- c(Aves='purple3', Mammalia='red3', Reptilia='green3')
plot(log10(nagy$M.g), log10(nagy$FMR.kJ.day.1), pch=19, col=col[nagy$Class],
xlab=~log[10](M), ylab=~log[10](FMR))
for(class in unique(nagy$Class)){
model <- lm(log10(FMR.kJ.day.1) ~ log10(M.g), data=nagy[nagy$Class==class,])
abline(model, col=col[class])
}
dev.off()
cat("Finished in R!\n")
install.packages("igraph")
