source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrang.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrangTidy.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrangTidy.R')
# R practicals
# use dplyr and tidyr to do the data wrangling steps
# load the data in R
MyData <- as.matrix(read.csv("../Data/PoundHillData.csv",header = F,  stringsAsFactors = F))
MyMetaData <- read.csv("../Data/PoundHillMetaData.csv",header = T,  sep=";", stringsAsFactors = F)
# have a look at the metadata file
MyMetaData
# replace blanks with zeros
MyData[MyData == ""] = 0
# use dplyr and tidyr for data wrangling
# transpose the data
require(dplyr)
require(tidyr)
MyData <- t(MyData)
# check and assign the column names
colnames(MyData) <- MyData[1,]
# create a temporary dataframe without the column names
TempData <- dplyr::tbl_df(MyData[-1,]) # do not convert columns to factor
# can get rid of row names by
rownames(TempData) <- NULL
# convert the data to long format
# wrangle the dataset into submission
MyWrangledData <- tidyr::gather(TempData,"Species","Count",5:45)
# assign the correct data types to each column
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
MyWrangledData[, "Cultivation"]
typeof(MyWrangledData[, "Cultivation"])
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrang.R')
typeof(MyWrangledData[, "Cultivation"])
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrangTidy.R')
typeof(MyWrangledData[, "Cultivation"])
MyWrangledData[1, "Cultivation"]
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/DataWrangTidy.R')
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF) #check the size of the data frame you loaded
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
dim(MyDF) #check the size of the data frame you loaded
View(MyDF)
?hist
hist(log10(MyDF$Predator.mass), breaks = 30,xlab="log10(Predator Mass (g))",ylab="Count",
col = "lightblue", border = "pink") # Change bar and borders colors
hist(log10(MyDF$Predator.mass), breaks = 10,xlab="log10(Predator Mass (g))",ylab="Count",
col = "lightblue", border = "pink") # Change bar and borders colors
ats
cor(ats[,2][1:99],ats[,2][2:100])
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/TAutoCorr.R')
p
max(RandCor)
correlation
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/TAutoCorr.R')
correlation
max(RandCor)
p
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/TAutoCorr.R')
p
colnames(MyDF)
min(MyDF$Prey.mass)
max(MyDF$Prey.mass)
max(MyDF$Predator.mass)
min(MyDF$Predator.mass)
library(lattice)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF)
?densityplot
# lattice plot of log predator mass
pdf("../Results/Pred_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
xlab="Logarthms of Predator Body Mass (g)", ylab="Density", main = "Lattice graph of logarithm Predator mass")
graphics.off(); #you can also use dev.off()
levels(MyDF$Prey.mass)
unique(MyDF$Prey.mass)
unique(MyDF$Prey.mass.unit)
if MyDF$Prey.mass.unit[1] == 'g'
if (MyDF$Prey.mass.unit[1] == 'g')
a
MyDF$Prey.mass.unit[1] == 'g'
length(MyDF)
length(MyDF$Prey)
for i in length(MyDF$Prey.mass){
if (MyDF$Prey.mass.unit[i] == 'mg'){
MyDF$Prey.mass[i] <- MyDF$Prey.mass[i]*1000
}
}
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
MyDF$Prey.mass[i] <- MyDF$Prey.mass[i]*1000
}
}
max(MyDF$Prey.mass)
min(MyDF$Prey.mass)
# R practicals
# output 3 pdf files of lattice graphs
# read given data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
# lattice plot of log predator mass
pdf("../Results/Pred_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
xlab="Logarthms of Predator Body Mass (g)", ylab="Density", main = "Lattice graph of logarithm Predator mass")
graphics.off(); #you can also use dev.off()
# given the mass unit only contains g and mg by unique(),
# only calculation is to multiply mass with unit "mg" by 0.001 to unified the units
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
MyDF$Prey.mass[i] <- MyDF$Prey.mass[i]/1000
}
}
View(MyDF)
typeof(MyDF$Record.number)
typeof(MyDF$Prey.mass)
numeric(100)
PreyMass <- double(length(MyDF$Prey.mass))
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass <- MyDF$Prey.mass[i]/1000
}
else
PreyMass <- MyDF$Prey.mass[i]
}
PreyMass[285]
# only calculation is to multiply mass with unit "mg" by 0.001 to unified the units
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass <- MyDF$Prey.mass[i]/1000
}
else
PreyMass <- MyDF$Prey.mass[i]
}
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass[i] <- MyDF$Prey.mass[i]/1000
}
else
PreyMass[i] <- MyDF$Prey.mass[i]
}
MyDF$Prey.mass[1]
PreyMass[1] <- MyDF$Prey.mass[1]
PreyMass[1] <- MyDF$Prey.mass[1]/1000
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass[i] <- MyDF$Prey.mass[i]/1000
}
else
PreyMass[i] <- MyDF$Prey.mass[i]
}
PreyMassp[285]
PreyMass[285]
PreyMass[1]
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in length(MyDF$Prey.mass)){
print(i)
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass[i] <- MyDF$Prey.mass[i]/1000
}
else
PreyMass[i] <- MyDF$Prey.mass[i]
}
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in 1:length(MyDF$Prey.mass)){
print(i)
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass[i] <- MyDF$Prey.mass[i]/1000
}
else
PreyMass[i] <- MyDF$Prey.mass[i]
}
PreyMass[285]
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
densityplot(~log(PreyMass) | Type.of.feeding.interaction, data = MyDF)
pdf("../Results/Prey_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(PreyMass) | Type.of.feeding.interaction, data = MyDF,
xlab="Logarthms of Prey Body Mass", ylab="Density", main = "Lattice graph of logarithm Prey mass")
graphics.off(); #you can also use dev.off()
# R practicals
# output 3 pdf files of lattice graphs
# read given data
MyDF <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
library(lattice)
# lattice plot of log predator mass
pdf("../Results/Pred_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(Predator.mass) | Type.of.feeding.interaction, data=MyDF,
xlab="Logarthms of Predator Body Mass (g)", ylab="Density", main = "Lattice graph of logarithm Predator mass")
graphics.off(); #you can also use dev.off()
# prey mass needs to be calculated with unit
# given the mass unit only contains g and mg by unique(),
# only calculation is to multiply mass with unit "mg" by 0.001 to unified the units
PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in 1:length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
PreyMass[i] <- MyDF$Prey.mass[i]/1000
}
else
PreyMass[i] <- MyDF$Prey.mass[i]
}
# lattice plot of log prey mass
pdf("../Results/Prey_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(PreyMass) | Type.of.feeding.interaction, data = MyDF,
xlab="Logarthms of Prey Body Mass", ylab="Density", main = "Lattice graph of logarithm Prey mass")
graphics.off(); #you can also use dev.off()
# lattice plot of log ratio of prey mass over predator mass
densityplot(~log(Prey.mass/Predator.mass) | Type.of.feeding.interaction, data=MyDF)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
# lattice plot of log ratio of prey mass over predator mass
pdf("../Results/SizeRatio_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(PreyMass/Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab="Logarthms of mass ratio", ylab="Density", main = "Lattice graph of logarithm mass ratio")
dev.off();
# lattice plot of log ratio of prey mass over predator mass
pdf("../Results/SizeRatio_Lattice.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
densityplot(~log(PreyMass/Predator.mass) | Type.of.feeding.interaction, data = MyDF,
xlab="Logarthms of mass ratio", ylab="Density", main = "Lattice graph of logarithm mass ratio")
dev.off();
unique(MyDF$Type.of.feeding.interaction)
a <- unique(MyDF$Type.of.feeding.interaction)
a <- unique(MyDF$Type.of.feeding.interaction)[1]
unique(MyDF$Type.of.feeding.interaction)[1]
levels(MyDF$Type.of.feeding.interaction)
levels(MyDF$Type.of.feeding.interaction)[1]
a <- data.frame(2,2)
a
a[1]
a[1] <-1
a
?data.frame
numeric(2,5)
df <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
df
View(df)
df <- data.frame(levels(MyDF$Type.of.feeding.interaction)=double())
df <- data.frame(levels(MyDF$Type.of.feeding.interaction)=double()
levels(MyDF$Type.of.feeding.interaction)=double()
levels(MyDF$Type.of.feeding.interaction)=double()
levels(MyDF$Type.of.feeding.interaction)=double()
levels(MyDF$Type.of.feeding.interaction)=double())
df <- data.frame(levels(MyDF$Type.of.feeding.interaction)[1]=double()
levels(MyDF$Type.of.feeding.interaction)[2]=double()
levels(MyDF$Type.of.feeding.interaction)[3]=double()
levels(MyDF$Type.of.feeding.interaction)[4]=double()
levels(MyDF$Type.of.feeding.interaction)[5]=double())
levels(MyDF$Type.of.feeding.interaction)
levels(MyDF$Type.of.feeding.interaction)[1]
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
predacious/piscivorous = double(), row.names = c('Mean','Median'))
df <- data.frame(Doubles=double(),
Ints=integer(),
Factors=factor(),
Logicals=logical(),
Characters=character(),
stringsAsFactors=FALSE)
df
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
predacious/piscivorous = double(), row.names = c('Mean','Median'))
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
predacious/piscivorous = double())
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
row.names = c('Mean','Median'))
View(df)
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
row.names = c(Mean,Median))
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
row.names = 'Mean','Median')
df <- data.frame(insectivorous = double(),
piscivorous = double(),
planktivorous = double(),
predacious = double(),
)
df <- data.frame()
colnames(df) <- levels(levels(MyDF$Type.of.feeding.interaction))
# calculate mean and median by feeding type:
df <- data.frame()
colnames(df) <- levels(MyDF$Type.of.feeding.interaction)
levels(MyDF$Type.of.feeding.interaction)
# calculate mean and median by feeding type:
df <- data.frame(matrix(ncol = 5, nrow = 2))
colnames(df) <- levels(MyDF$Type.of.feeding.interaction)
rownames(df) <- c("Mean","Median")
View(df)
# save file
write.csv(file='../Results/PP_Results.csv', x=df)
?subset
test <- subset(MyDF, MyDF$Type.of.feeding.interaction = "insectivorous")
test <- subset(MyDF, MyDF$Type.of.feeding.interaction == "insectivorous")
# calculate mean and median
smalldf1 <- subset(MyDF, MyDF$Type.of.feeding.interaction == levels(MyDF$Type.of.feeding.interaction)[1])
# calculate mean and median by feeding type:
# create empty dataframe
df <- data.frame(Feeding type = character())
df <- data.frame(Feedingtype = character(),
MeanPredatorMass = double(),
MedianPredatorMass = double(),
MeanPreyMass = double(),
MedianPreyMass = double(),
MeanMassRatio = double(),
MedianMassRatio = double()
)
View(df)
df[,1] <- levels(MyDF$Type.of.feeding.interaction)
df[1,1] <- 1
df[1,] <- c(1,2,3,4,5,6,7)
View(df)
median(c(1,2,3,4,5))
View(MyDF)
# prey mass needs to be calculated with unit
# given the mass unit only contains g and mg by unique(),
# only calculation is to multiply mass with unit "mg" by 0.001 to unified the units
#PreyMass <- numeric(length(MyDF$Prey.mass))
for (i in 1:length(MyDF$Prey.mass)){
if (MyDF$Prey.mass.unit[i] == 'mg'){
MyDF$Prey.mass[i] <- MyDF$Prey.mass[i]/1000
}
else
MyDF$Prey.mass[i] <- MyDF$Prey.mass[i]
}
View(MyDF)
# calculate mean and median by feeding type:
# create empty dataframe
df <- data.frame(Feedingtype = character(),
MeanLogPredatorMass = double(),
MedianLogPredatorMass = double(),
MeanLogPreyMass = double(),
MedianLogPreyMass = double(),
MeanLogMassRatio = double(),
MedianLogMassRatio = double()
)
df[,1] <- levels(MyDF$Type.of.feeding.interaction)
# calculate mean and median
for (i in 1:levels(MyDF$Type.of.feeding.interaction)){
smalldf <- subset(MyDF, MyDF$Type.of.feeding.interaction == levels(MyDF$Type.of.feeding.interaction)[i])
Feedtype <- levels(MyDF$Type.of.feeding.interaction)[i]
MeanPreM <- log(mean(smalldf$Predator.Mass))
MedPreM <- log(median(smalldf$Predator.Mass))
MeanPreyM <- log(mean(smalldf$Prey.Mass))
MedPreyM <- log(median(smalldf$Prey.Mass))
MeanRatio <- log(mean(smalldf$Predator.Mass/smalldf$Prey.Mass))
MedianRatio <- log(median(smalldf$Predator.Mass/smalldf$Prey.Mass))
df[i,] <- c(Feedtype, MeanPreM, MedPreM, MeanPreyM, MedPreyM, MeanRatio, MedianRatio)
}
length(levels(MyDF$Type.of.feeding.interaction))
# calculate mean and median
for (i in 1:length(levels(MyDF$Type.of.feeding.interaction))){
smalldf <- subset(MyDF, MyDF$Type.of.feeding.interaction == levels(MyDF$Type.of.feeding.interaction)[i])
Feedtype <- levels(MyDF$Type.of.feeding.interaction)[i]
MeanPreM <- log(mean(smalldf$Predator.Mass))
MedPreM <- log(median(smalldf$Predator.Mass))
MeanPreyM <- log(mean(smalldf$Prey.Mass))
MedPreyM <- log(median(smalldf$Prey.Mass))
MeanRatio <- log(mean(smalldf$Predator.Mass/smalldf$Prey.Mass))
MedianRatio <- log(median(smalldf$Predator.Mass/smalldf$Prey.Mass))
df[i,] <- c(Feedtype, MeanPreM, MedPreM, MeanPreyM, MedPreyM, MeanRatio, MedianRatio)
}
smalldf <- subset(MyDF, MyDF$Type.of.feeding.interaction == levels(MyDF$Type.of.feeding.interaction)[i])
i=1
Feedtype <- levels(MyDF$Type.of.feeding.interaction)[i]
MeanPreM <- log(mean(smalldf$Predator.Mass))
smalldf$Predator.mass
MedianRatio <- log(median(smalldf$Predator.mass/smalldf$Prey.mass))
# calculate mean and median
for (i in 1:length(levels(MyDF$Type.of.feeding.interaction))){
smalldf <- subset(MyDF, MyDF$Type.of.feeding.interaction == levels(MyDF$Type.of.feeding.interaction)[i])
Feedtype <- levels(MyDF$Type.of.feeding.interaction)[i]
MeanPreM <- log(mean(smalldf$Predator.mass))
MedPreM <- log(median(smalldf$Predator.mass))
MeanPreyM <- log(mean(smalldf$Prey.mass))
MedPreyM <- log(median(smalldf$Prey.mass))
MeanRatio <- log(mean(smalldf$Predator.mass/smalldf$Prey.mass))
MedianRatio <- log(median(smalldf$Predator.mass/smalldf$Prey.mass))
df[i,] <- c(Feedtype, MeanPreM, MedPreM, MeanPreyM, MedPreyM, MeanRatio, MedianRatio)
}
View(df)
df[,1] <- levels(MyDF$Type.of.feeding.interaction)
View(df)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
View(df)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
View(df)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/PP_Lattice.R')
# read data
a <- read.table("../Data/Results.txt", header = TRUE)
head(a)
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/MyBars.R')
# read data
a <- read.table("../Data/Results.txt", header = TRUE)
head(a)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
View(a)
View(a)
# Print the first linerange
p <- ggplot(a)
View(p)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/MyBars.R')
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/MyBars.R')
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
p
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
p
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
source('~/Documents/CMEECoursework/Week3/MyRCoursework/Code/plotLin.R')
install.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
colour = Type.of.feeding.interaction )) +
geom_point(size=I(2), shape=I(10)) + theme_bw()
p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
theme_tufte() # and theme to Tufte's minimal ink theme
install.packages("ggthemes")
library(ggthemes)
install.packages("ggthemes")
